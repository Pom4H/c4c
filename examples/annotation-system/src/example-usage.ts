/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏
 * 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä–µ
 * 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä
 */

import { createAnnotatedRegistry, registerAnnotatedProcedure, executeAnnotatedProcedure } from "./registry.js";
import { createAnnotatedProcedure } from "./decorators.js";
import * as userService from "./examples/user-service.js";

/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
async function demonstrateAnnotationSystem() {
  console.log("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π tsdev\n");

  // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
  const registry = createAnnotatedRegistry();

  // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏:");

  const procedures = [
    userService.createUser,
    userService.getUser,
    userService.sendWelcomeEmail,
    userService.trackUserEvent,
    userService.validateEmail,
    userService.hashPassword,
    userService.calculateUserScore,
    userService.createUserLegacy,
  ];

  for (const procedure of procedures) {
    registerAnnotatedProcedure(registry, procedure);
  }

  // 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞
  console.log("\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞:");
  const metadata = getRegistryMetadata(registry);
  console.log(JSON.stringify(metadata, null, 2));

  // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log("\nüîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");

  const categories = ["api", "workflow", "analytics", "validation", "computation"];
  for (const category of categories) {
    const procedures = getProceduresByCategory(registry, category as any);
    console.log(`\nüìÅ ${category.toUpperCase()} (${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä):`);
    procedures.forEach(proc => {
      console.log(`  - ${proc.contract.name} (${proc.metadata.visibility}) - ${proc.metadata.description}`);
    });
  }

  // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏
  console.log("\nüëÅÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏:");

  const visibilities = ["public", "workflow", "internal", "private"];
  for (const visibility of visibilities) {
    const procedures = getProceduresByVisibility(registry, visibility as any);
    console.log(`\nüîí ${visibility.toUpperCase()} (${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä):`);
    procedures.forEach(proc => {
      console.log(`  - ${proc.contract.name} (${proc.metadata.category}) - ${proc.metadata.description}`);
    });
  }

  // 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
  console.log("\nüè∑Ô∏è –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º:");

  const tags = ["users", "email", "analytics", "deprecated"];
  for (const tag of tags) {
    const procedures = getProceduresByTag(registry, tag);
    console.log(`\n#${tag} (${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä):`);
    procedures.forEach(proc => {
      console.log(`  - ${proc.contract.name} (${proc.metadata.category}) - ${proc.metadata.description}`);
    });
  }

  // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  console.log("\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:");

  const searchCriteria = [
    { category: "api" as const, visibility: "public" as const },
    { tags: ["deprecated"] },
    { deprecated: true },
    { search: "user" },
  ];

  for (const criteria of searchCriteria) {
    const results = searchProcedures(registry, criteria);
    console.log(`\nüîç –ö—Ä–∏—Ç–µ—Ä–∏–∏: ${JSON.stringify(criteria)}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${results.length} –ø—Ä–æ—Ü–µ–¥—É—Ä`);
    results.forEach(proc => {
      console.log(`   - ${proc.contract.name} (${proc.metadata.category}, ${proc.metadata.visibility})`);
    });
  }

  // 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä
  console.log("\n‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä:");

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüì° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (createUser):");
    const createResult = await executeAnnotatedProcedure(registry, "createUser", {
      name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
      email: "alexey@example.com",
      password: "securepassword123",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(createResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É
    console.log("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É (sendWelcomeEmail):");
    const emailResult = await executeAnnotatedProcedure(registry, "sendWelcomeEmail", {
      userId: "user_123",
      email: "alexey@example.com",
      name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(emailResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (trackUserEvent):");
    const trackResult = await executeAnnotatedProcedure(registry, "trackUserEvent", {
      userId: "user_123",
      event: "user.signup",
      properties: { source: "web", campaign: "winter2024" },
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(trackResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüîí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (validateEmail):");
    const validationResult = await executeAnnotatedProcedure(registry, "validateEmail", {
      email: "test@example.com",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(validationResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\n‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (createUserLegacy):");
    const legacyResult = await executeAnnotatedProcedure(registry, "createUserLegacy", {
      name: "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
      email: "test@example.com",
      password: "password123",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(legacyResult, null, 2));

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:", error);
  }

  // 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:");
  const validationErrors = validateDependencies(registry);
  if (validationErrors.length === 0) {
    console.log("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã");
  } else {
    console.log("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", validationErrors);
  }

  // 10. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–µ—Å—Ç—Ä–æ–≤
  console.log("\nüìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã:");

  console.log("\nüì° –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤):");
  const publicProcedures = getPublicProcedures(registry);
  for (const [name, procedure] of publicProcedures) {
    console.log(`  - ${name} (${procedure.metadata.category}) - ${procedure.metadata.description}`);
  }

  console.log("\nüîÑ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É:");
  const workflowProcedures = getWorkflowProcedures(registry);
  for (const [name, procedure] of workflowProcedures) {
    console.log(`  - ${name} (${procedure.metadata.category}) - ${procedure.metadata.description}`);
  }

  console.log("\nüîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:");
  const internalProcedures = getInternalProcedures(registry);
  for (const [name, procedure] of internalProcedures) {
    console.log(`  - ${name} (${procedure.metadata.category}) - ${procedure.metadata.description}`);
  }

  console.log("\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:");
  const privateProcedures = getPrivateProcedures(registry);
  for (const [name, procedure] of privateProcedures) {
    console.log(`  - ${name} (${procedure.metadata.category}) - ${procedure.metadata.description}`);
  }

  console.log("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (import.meta.url === `file://${process.argv[1]}`) {
  demonstrateAnnotationSystem().catch(console.error);
}

export { demonstrateAnnotationSystem };