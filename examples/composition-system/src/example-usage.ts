/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
 * 2. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –≤ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
 * 3. –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 * 4. –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
 */

import { createCompositionRegistry, registerComposition, executeComposition } from "./composition-registry.js";
import * as userService from "./examples/user-service.js";

/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
async function demonstrateCompositionSystem() {
  console.log("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ tsdev\n");

  // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
  const registry = createCompositionRegistry();

  // 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
  console.log("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä:");

  const baseProcedures = userService.baseProcedures;
  for (const [name, procedure] of Object.entries(baseProcedures)) {
    registry.procedures.set(name, procedure);
    console.log(`  - ${name}: ${procedure.description}`);
  }

  // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
  console.log("\nüß© –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π:");

  const compositions = [
    userService.createUser,
    userService.userRegistration,
    userService.sendMultiChannelNotification,
    userService.createUserProfileConditional,
    userService.createUserWithFallback,
    userService.comprehensiveUserRegistration,
    userService.validateEmailWithRetry,
    userService.processUserData,
  ];

  for (const composition of compositions) {
    registerComposition(registry, composition);
  }

  // 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞
  console.log("\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞:");
  const metadata = getRegistryMetadata(registry);
  console.log(JSON.stringify(metadata, null, 2));

  // 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
  console.log("\nüîç –¢–∏–ø—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–π:");

  const compositionTypes = ["sequential", "parallel", "conditional", "retry", "fallback"];
  for (const type of compositionTypes) {
    const compositions = Array.from(registry.compositions.values())
      .filter(comp => comp.type === type);
    console.log(`\nüìÅ ${type.toUpperCase()} (${compositions.length} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π):`);
    compositions.forEach(comp => {
      console.log(`  - ${comp.name} (${comp.visibility}) - ${comp.description}`);
    });
  }

  // 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏
  console.log("\nüëÅÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥–∏–º–æ—Å—Ç–∏:");

  const visibilities = ["public", "workflow", "internal", "private"];
  for (const visibility of visibilities) {
    const compositions = Array.from(registry.compositions.values())
      .filter(comp => comp.visibility === visibility);
    console.log(`\nüîí ${visibility.toUpperCase()} (${compositions.length} –∫–æ–º–ø–æ–∑–∏—Ü–∏–π):`);
    compositions.forEach(comp => {
      console.log(`  - ${comp.name} (${comp.type}) - ${comp.description}`);
    });
  }

  // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
  console.log("\n‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π:");

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüìù –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (createUser):");
    const createResult = await executeComposition(registry, "createUser", {
      name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
      email: "alexey@example.com",
      password: "securepassword123",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(createResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Ä–∫—Ñ–ª–æ—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüîÑ –í–æ—Ä–∫—Ñ–ª–æ—É –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (userRegistration):");
    const registrationResult = await executeComposition(registry, "userRegistration", {
      name: "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
      email: "maria@example.com",
      password: "password456",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(registrationResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (sendMultiChannelNotification):");
    const notificationResult = await executeComposition(registry, "sendMultiChannelNotification", {
      userId: "user_123",
      email: "test@example.com",
      phone: "+1234567890",
      message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(notificationResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüîÄ –£—Å–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (createUserProfileConditional):");
    const conditionalResult = await executeComposition(registry, "createUserProfileConditional", {
      userId: "user_123",
      userType: "premium", // –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è
      preferences: { theme: "dark" },
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(conditionalResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å fallback
    console.log("\nüîÑ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å fallback (createUserWithFallback):");
    const fallbackResult = await executeComposition(registry, "createUserWithFallback", {
      name: "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
      email: "ivan@example.com",
      password: "password789",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(fallbackResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüéØ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (comprehensiveUserRegistration):");
    const comprehensiveResult = await executeComposition(registry, "comprehensiveUserRegistration", {
      name: "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
      email: "elena@example.com",
      password: "password999",
      phone: "+9876543210",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(comprehensiveResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å retry
    console.log("\nüîÑ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å retry (validateEmailWithRetry):");
    const retryResult = await executeComposition(registry, "validateEmailWithRetry", {
      email: "test@example.com",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(retryResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    console.log("\nüîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (processUserData):");
    const privateResult = await executeComposition(registry, "processUserData", {
      rawData: {
        name: "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
        email: "test@example.com",
        password: "testpass",
      },
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(privateResult, null, 2));

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:", error);
  }

  // 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã
  console.log("\nüìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã:");

  console.log("\nüì° –ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤):");
  const publicCompositions = registry.publicProcedures;
  for (const [name, composition] of publicCompositions) {
    console.log(`  - ${name} (${composition.config?.composition?.type}) - ${composition.config?.description}`);
  }

  console.log("\nüîÑ –ö–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É:");
  const workflowCompositions = registry.workflowProcedures;
  for (const [name, composition] of workflowCompositions) {
    console.log(`  - ${name} (${composition.config?.composition?.type}) - ${composition.config?.description}`);
  }

  console.log("\nüîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:");
  const internalCompositions = registry.internalProcedures;
  for (const [name, composition] of internalCompositions) {
    console.log(`  - ${name} (${composition.config?.composition?.type}) - ${composition.config?.description}`);
  }

  console.log("\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:");
  const privateCompositions = registry.privateProcedures;
  for (const [name, composition] of privateCompositions) {
    console.log(`  - ${name} (${composition.config?.composition?.type}) - ${composition.config?.description}`);
  }

  // 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:");

  for (const [name, composition] of registry.composedProcedures) {
    const config = composition.config.composition;
    console.log(`\nüì¶ ${name}:`);
    console.log(`  –¢–∏–ø: ${config.type}`);
    console.log(`  –í–∏–¥–∏–º–æ—Å—Ç—å: ${config.visibility}`);
    console.log(`  –ü—Ä–æ—Ü–µ–¥—É—Ä—ã: ${config.procedures.join(", ")}`);
    if (config.dependencies) {
      console.log(`  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${config.dependencies.join(", ")}`);
    }
    if (config.errorHandling) {
      console.log(`  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: ${config.errorHandling}`);
    }
  }

  console.log("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (import.meta.url === `file://${process.argv[1]}`) {
  demonstrateCompositionSystem().catch(console.error);
}

export { demonstrateCompositionSystem };