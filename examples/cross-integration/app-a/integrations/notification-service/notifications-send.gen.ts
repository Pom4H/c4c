// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../../generated/notification-service/sdk.gen.js";
import { z } from "zod";

const NotificationSchema = z.object({
  id: z.string(),
  message: z.string(),
  recipient: z.string().optional(),
  channel: z.enum(['email', 'sms', 'push', 'webhook']),
  priority: z.enum(['low', 'normal', 'high', 'urgent']),
  status: z.enum(['pending', 'sent', 'failed']),
  metadata: z.record(z.string(), z.unknown()).optional(),
  sentAt: z.string().optional(),
  createdAt: z.string(),
});

export const NotificationServiceNotificationsSendContract: Contract = {
  name: "notification-service.notifications.send",
  description: "Send a notification",
  input: z.object({
    message: z.string().min(1),
    recipient: z.string().optional(),
    channel: z.enum(['email', 'sms', 'push', 'webhook']).default('push'),
    priority: z.enum(['low', 'normal', 'high', 'urgent']).default('normal'),
    metadata: z.record(z.string(), z.unknown()).optional(),
  }),
  output: NotificationSchema,
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsSend",
    tags: ["notification-service"],
  },
};

const notificationsSendHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationsSend(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION_SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsSendProcedure: Procedure = {
  contract: NotificationServiceNotificationsSendContract,
  handler: notificationsSendHandler,
};
