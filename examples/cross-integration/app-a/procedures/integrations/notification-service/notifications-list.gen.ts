// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/notification-service/sdk.gen.js";
import { createClient, createConfig } from "@hey-api/client-fetch";
import { z } from "zod";

export const NotificationServiceNotificationsListContract: Contract = {
  name: "notification-service.notifications.list",
  description: "List all notifications",
  input: z.unknown(),
  output: z.unknown(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsList",
    tags: ["notification-service"],
  },
};

const notificationsListHandler = applyPolicies(
  async (input, context) => {
    const baseUrl = process.env.NOTIFICATION_SERVICE_URL || context.metadata?.['notification-serviceUrl'] as string | undefined;
    if (!baseUrl) {
      throw new Error(`NOTIFICATION_SERVICE_URL environment variable is not set`);
    }
    
    const headers = getOAuthHeaders(context, "notification-service");
    
    // Create custom client with proper baseURL configuration
    const customClient = createClient(createConfig({ baseUrl }));
    
    const result = await sdk.notificationsList({ 
      body: input,
      headers,
      client: customClient 
    } as any);
    
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION_SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsListProcedure: Procedure = {
  contract: NotificationServiceNotificationsListContract,
  handler: notificationsListHandler,
};
