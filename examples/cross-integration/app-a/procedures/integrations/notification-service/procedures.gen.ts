// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/notification-service/sdk.gen.js";
import { z } from "zod";


export const NotificationServiceTaskManagerNotificationServiceNotificationsListContract: Contract = {
  name: "notification-service.task.manager.notification.service.notifications.list",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerNotificationServiceNotificationsList",
    tags: ["notification-service"],
  },
};

const taskManagerNotificationServiceNotificationsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerNotificationServiceNotificationsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerNotificationServiceNotificationsListProcedure: Procedure = {
  contract: NotificationServiceTaskManagerNotificationServiceNotificationsListContract,
  handler: taskManagerNotificationServiceNotificationsListHandler,
};


export const NotificationServiceTaskManagerNotificationServiceNotificationsListRestContract: Contract = {
  name: "notification-service.task.manager.notification.service.notifications.list.rest",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerNotificationServiceNotificationsListRest",
    tags: ["notification-service"],
  },
};

const taskManagerNotificationServiceNotificationsListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerNotificationServiceNotificationsListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerNotificationServiceNotificationsListRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerNotificationServiceNotificationsListRestContract,
  handler: taskManagerNotificationServiceNotificationsListRestHandler,
};


export const NotificationServiceTaskManagerNotificationServiceNotificationsSendContract: Contract = {
  name: "notification-service.task.manager.notification.service.notifications.send",
  description: "Send a notification",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerNotificationServiceNotificationsSend",
    tags: ["notification-service"],
  },
};

const taskManagerNotificationServiceNotificationsSendHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerNotificationServiceNotificationsSend(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerNotificationServiceNotificationsSendProcedure: Procedure = {
  contract: NotificationServiceTaskManagerNotificationServiceNotificationsSendContract,
  handler: taskManagerNotificationServiceNotificationsSendHandler,
};


export const NotificationServiceTaskManagerNotificationServiceNotificationsSubscribeContract: Contract = {
  name: "notification-service.task.manager.notification.service.notifications.subscribe",
  description: "Subscribe to notifications on a topic",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerNotificationServiceNotificationsSubscribe",
    tags: ["notification-service"],
  },
};

const taskManagerNotificationServiceNotificationsSubscribeHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerNotificationServiceNotificationsSubscribe(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerNotificationServiceNotificationsSubscribeProcedure: Procedure = {
  contract: NotificationServiceTaskManagerNotificationServiceNotificationsSubscribeContract,
  handler: taskManagerNotificationServiceNotificationsSubscribeHandler,
};


export const NotificationServiceTaskManagerTasksCreateContract: Contract = {
  name: "notification-service.task.manager.tasks.create",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksCreate",
    tags: ["notification-service"],
  },
};

const taskManagerTasksCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksCreateProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksCreateContract,
  handler: taskManagerTasksCreateHandler,
};


export const NotificationServiceTaskManagerTasksCreateRestContract: Contract = {
  name: "notification-service.task.manager.tasks.create.rest",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksCreateRest",
    tags: ["notification-service"],
  },
};

const taskManagerTasksCreateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksCreateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksCreateRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksCreateRestContract,
  handler: taskManagerTasksCreateRestHandler,
};


export const NotificationServiceTaskManagerTasksDeleteContract: Contract = {
  name: "notification-service.task.manager.tasks.delete",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksDelete",
    tags: ["notification-service"],
  },
};

const taskManagerTasksDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksDeleteProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksDeleteContract,
  handler: taskManagerTasksDeleteHandler,
};


export const NotificationServiceTaskManagerTasksDeleteRestContract: Contract = {
  name: "notification-service.task.manager.tasks.delete.rest",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksDeleteRest",
    tags: ["notification-service"],
  },
};

const taskManagerTasksDeleteRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksDeleteRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksDeleteRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksDeleteRestContract,
  handler: taskManagerTasksDeleteRestHandler,
};


export const NotificationServiceTaskManagerTasksGetContract: Contract = {
  name: "notification-service.task.manager.tasks.get",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksGet",
    tags: ["notification-service"],
  },
};

const taskManagerTasksGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksGetProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksGetContract,
  handler: taskManagerTasksGetHandler,
};


export const NotificationServiceTaskManagerTasksGetRestContract: Contract = {
  name: "notification-service.task.manager.tasks.get.rest",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksGetRest",
    tags: ["notification-service"],
  },
};

const taskManagerTasksGetRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksGetRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksGetRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksGetRestContract,
  handler: taskManagerTasksGetRestHandler,
};


export const NotificationServiceTaskManagerTasksListContract: Contract = {
  name: "notification-service.task.manager.tasks.list",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksList",
    tags: ["notification-service"],
  },
};

const taskManagerTasksListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksListProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksListContract,
  handler: taskManagerTasksListHandler,
};


export const NotificationServiceTaskManagerTasksListRestContract: Contract = {
  name: "notification-service.task.manager.tasks.list.rest",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksListRest",
    tags: ["notification-service"],
  },
};

const taskManagerTasksListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksListRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksListRestContract,
  handler: taskManagerTasksListRestHandler,
};


export const NotificationServiceTaskManagerTasksUpdateContract: Contract = {
  name: "notification-service.task.manager.tasks.update",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksUpdate",
    tags: ["notification-service"],
  },
};

const taskManagerTasksUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksUpdateProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksUpdateContract,
  handler: taskManagerTasksUpdateHandler,
};


export const NotificationServiceTaskManagerTasksUpdateRestContract: Contract = {
  name: "notification-service.task.manager.tasks.update.rest",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksUpdateRest",
    tags: ["notification-service"],
  },
};

const taskManagerTasksUpdateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksUpdateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksUpdateRestProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksUpdateRestContract,
  handler: taskManagerTasksUpdateRestHandler,
};


export const NotificationServiceNotificationsListContract: Contract = {
  name: "notification-service.notifications.list",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsList",
    tags: ["notification-service"],
  },
};

const notificationsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsListProcedure: Procedure = {
  contract: NotificationServiceNotificationsListContract,
  handler: notificationsListHandler,
};


export const NotificationServiceNotificationsListRestContract: Contract = {
  name: "notification-service.notifications.list.rest",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsListRest",
    tags: ["notification-service"],
  },
};

const notificationsListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationsListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsListRestProcedure: Procedure = {
  contract: NotificationServiceNotificationsListRestContract,
  handler: notificationsListRestHandler,
};


export const NotificationServiceNotificationsSendContract: Contract = {
  name: "notification-service.notifications.send",
  description: "Send a notification",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsSend",
    tags: ["notification-service"],
  },
};

const notificationsSendHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationsSend(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsSendProcedure: Procedure = {
  contract: NotificationServiceNotificationsSendContract,
  handler: notificationsSendHandler,
};


export const NotificationServiceNotificationsSubscribeContract: Contract = {
  name: "notification-service.notifications.subscribe",
  description: "Subscribe to notifications on a topic",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "notificationsSubscribe",
    tags: ["notification-service"],
  },
};

const notificationsSubscribeHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationsSubscribe(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION-SERVICE_TOKEN",
  })
);

export const NotificationServiceNotificationsSubscribeProcedure: Procedure = {
  contract: NotificationServiceNotificationsSubscribeContract,
  handler: notificationsSubscribeHandler,
};


export const NotificationServiceProcedures: Procedure[] = [
  NotificationServiceTaskManagerNotificationServiceNotificationsListProcedure,
  NotificationServiceTaskManagerNotificationServiceNotificationsListRestProcedure,
  NotificationServiceTaskManagerNotificationServiceNotificationsSendProcedure,
  NotificationServiceTaskManagerNotificationServiceNotificationsSubscribeProcedure,
  NotificationServiceTaskManagerTasksCreateProcedure,
  NotificationServiceTaskManagerTasksCreateRestProcedure,
  NotificationServiceTaskManagerTasksDeleteProcedure,
  NotificationServiceTaskManagerTasksDeleteRestProcedure,
  NotificationServiceTaskManagerTasksGetProcedure,
  NotificationServiceTaskManagerTasksGetRestProcedure,
  NotificationServiceTaskManagerTasksListProcedure,
  NotificationServiceTaskManagerTasksListRestProcedure,
  NotificationServiceTaskManagerTasksUpdateProcedure,
  NotificationServiceTaskManagerTasksUpdateRestProcedure,
  NotificationServiceNotificationsListProcedure,
  NotificationServiceNotificationsListRestProcedure,
  NotificationServiceNotificationsSendProcedure,
  NotificationServiceNotificationsSubscribeProcedure
];
