// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../../generated/notification-service/sdk.gen.js";
import { z } from "zod";

export const NotificationServiceTaskManagerTasksDeleteContract: Contract = {
  name: "notification-service.task.manager.tasks.delete",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "notification-service",
    operation: "taskManagerTasksDelete",
    tags: ["notification-service"],
  },
};

const taskManagerTasksDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "notification-service");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.taskManagerTasksDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "notification-service",
    metadataTokenKey: "notification-serviceToken",
    envVar: "NOTIFICATION_SERVICE_TOKEN",
  })
);

export const NotificationServiceTaskManagerTasksDeleteProcedure: Procedure = {
  contract: NotificationServiceTaskManagerTasksDeleteContract,
  handler: taskManagerTasksDeleteHandler,
};
