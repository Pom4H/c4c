/**
 * Workflow: Notify on Task Created
 * 
 * –ü–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å App B (notification-service),
 * —ç—Ç–æ—Ç workflow –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
 * 
 * –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–æ –ø—Å–µ–≤–¥–æ–∫–æ–¥ –¥–ª—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏–¥–µ–∏.
 * –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @c4c/workflow API.
 */

import { workflow, step } from '@c4c/workflow';
import { z } from 'zod';

// –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
const getTaskDetails = step({
  id: 'get-task',
  input: z.object({ taskId: z.string() }),
  output: z.object({
    id: z.string(),
    title: z.string(),
    priority: z.string().optional(),
  }),
  execute: ({ engine, inputData }) => 
    engine.run('tasks.get', { id: inputData.taskId }),
});

// –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ App B (–ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!)
const sendNotification = step({
  id: 'send-notification',
  input: z.object({
    title: z.string(),
    priority: z.string().optional(),
  }),
  output: z.object({
    id: z.string(),
    message: z.string(),
  }),
  execute: ({ engine, inputData }) => 
    engine.run('notification-service.notifications.send', {
      message: `üÜï New task created: ${inputData.title}`,
      channel: 'push',
      priority: inputData.priority === 'high' ? 'urgent' : 'normal',
    }),
});

// –°–æ–±–∏—Ä–∞–µ–º workflow
export const notifyOnTaskCreated = workflow('notify-on-task-created')
  .step(getTaskDetails)
  .step(sendNotification)
  .commit();

/**
 * –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
 * 
 * 1. –¢—Ä–∏–≥–≥–µ—Ä tasks.trigger.created —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
 * 2. Workflow –ø–æ–ª—É—á–∞–µ—Ç taskId –∏–∑ trigger data
 * 3. –®–∞–≥ 1 –≤—ã–∑—ã–≤–∞–µ—Ç tasks.get (–ª–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ App A)
 * 4. –®–∞–≥ 2 –≤—ã–∑—ã–≤–∞–µ—Ç notification-service.notifications.send (–∏–∑ App B!)
 * 5. App B –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø—Å–µ–≤–¥–æ–∫–æ–¥):
/*
export const notifyOnTaskCreatedV2 = {
  id: 'notify-on-task-created-v2',
  name: 'Send notification when task is created',
  
  trigger: {
    provider: 'task-manager',
    triggerProcedure: 'tasks.trigger.created',
    eventType: 'task.created',
  },
  
  nodes: [
    {
      id: 'start',
      type: 'trigger',
      procedureName: 'tasks.trigger.created',
      next: 'get-task',
    },
    {
      id: 'get-task',
      type: 'procedure',
      procedureName: 'tasks.get',
      next: 'send-notification',
    },
    {
      id: 'send-notification',
      type: 'procedure',
      procedureName: 'notification-service.notifications.send', // ‚Üê –ò–∑ App B!
      next: 'end',
    },
    {
      id: 'end',
      type: 'procedure',
      procedureName: 'system.log',
    },
  ],
  startNode: 'start',
};
*/
