// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../../generated/task-manager/sdk.gen.js";
import { z } from "zod";

const TaskSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional(),
  status: z.enum(['todo', 'in_progress', 'done']),
  priority: z.enum(['low', 'medium', 'high']).optional(),
  assignee: z.string().optional(),
  dueDate: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
});

export const TaskManagerTasksListContract: Contract = {
  name: "task-manager.tasks.list",
  description: "List all tasks with optional filters",
  input: z.object({
    status: z.enum(['todo', 'in_progress', 'done']).optional(),
    assignee: z.string().optional(),
    limit: z.number().optional(),
  }),
  output: z.object({
    tasks: z.array(TaskSchema),
    total: z.number(),
  }),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksList",
    tags: ["task-manager"],
  },
};

const tasksListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK_MANAGER_TOKEN",
  })
);

export const TaskManagerTasksListProcedure: Procedure = {
  contract: TaskManagerTasksListContract,
  handler: tasksListHandler,
};
