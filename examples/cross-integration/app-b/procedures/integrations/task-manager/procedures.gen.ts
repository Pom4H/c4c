// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/task-manager/sdk.gen.js";
import { z } from "zod";


export const TaskManagerNotificationServiceNotificationsListContract: Contract = {
  name: "task-manager.notification.service.notifications.list",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceNotificationsList",
    tags: ["task-manager"],
  },
};

const notificationServiceNotificationsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceNotificationsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceNotificationsListProcedure: Procedure = {
  contract: TaskManagerNotificationServiceNotificationsListContract,
  handler: notificationServiceNotificationsListHandler,
};


export const TaskManagerNotificationServiceNotificationsListRestContract: Contract = {
  name: "task-manager.notification.service.notifications.list.rest",
  description: "List all notifications",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceNotificationsListRest",
    tags: ["task-manager"],
  },
};

const notificationServiceNotificationsListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceNotificationsListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceNotificationsListRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceNotificationsListRestContract,
  handler: notificationServiceNotificationsListRestHandler,
};


export const TaskManagerNotificationServiceNotificationsSendContract: Contract = {
  name: "task-manager.notification.service.notifications.send",
  description: "Send a notification",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceNotificationsSend",
    tags: ["task-manager"],
  },
};

const notificationServiceNotificationsSendHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceNotificationsSend(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceNotificationsSendProcedure: Procedure = {
  contract: TaskManagerNotificationServiceNotificationsSendContract,
  handler: notificationServiceNotificationsSendHandler,
};


export const TaskManagerNotificationServiceNotificationsSubscribeContract: Contract = {
  name: "task-manager.notification.service.notifications.subscribe",
  description: "Subscribe to notifications on a topic",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceNotificationsSubscribe",
    tags: ["task-manager"],
  },
};

const notificationServiceNotificationsSubscribeHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceNotificationsSubscribe(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceNotificationsSubscribeProcedure: Procedure = {
  contract: TaskManagerNotificationServiceNotificationsSubscribeContract,
  handler: notificationServiceNotificationsSubscribeHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksCreateContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.create",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksCreate",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksCreateProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksCreateContract,
  handler: notificationServiceTaskManagerTasksCreateHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksCreateRestContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.create.rest",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksCreateRest",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksCreateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksCreateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksCreateRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksCreateRestContract,
  handler: notificationServiceTaskManagerTasksCreateRestHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksDeleteContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.delete",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksDelete",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksDeleteProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksDeleteContract,
  handler: notificationServiceTaskManagerTasksDeleteHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksDeleteRestContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.delete.rest",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksDeleteRest",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksDeleteRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksDeleteRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksDeleteRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksDeleteRestContract,
  handler: notificationServiceTaskManagerTasksDeleteRestHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksGetContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.get",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksGet",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksGetProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksGetContract,
  handler: notificationServiceTaskManagerTasksGetHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksGetRestContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.get.rest",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksGetRest",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksGetRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksGetRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksGetRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksGetRestContract,
  handler: notificationServiceTaskManagerTasksGetRestHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksListContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.list",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksList",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksListProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksListContract,
  handler: notificationServiceTaskManagerTasksListHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksListRestContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.list.rest",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksListRest",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksListRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksListRestContract,
  handler: notificationServiceTaskManagerTasksListRestHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksUpdateContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.update",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksUpdate",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksUpdateProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksUpdateContract,
  handler: notificationServiceTaskManagerTasksUpdateHandler,
};


export const TaskManagerNotificationServiceTaskManagerTasksUpdateRestContract: Contract = {
  name: "task-manager.notification.service.task.manager.tasks.update.rest",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "notificationServiceTaskManagerTasksUpdateRest",
    tags: ["task-manager"],
  },
};

const notificationServiceTaskManagerTasksUpdateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.notificationServiceTaskManagerTasksUpdateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerNotificationServiceTaskManagerTasksUpdateRestProcedure: Procedure = {
  contract: TaskManagerNotificationServiceTaskManagerTasksUpdateRestContract,
  handler: notificationServiceTaskManagerTasksUpdateRestHandler,
};


export const TaskManagerTasksCreateContract: Contract = {
  name: "task-manager.tasks.create",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksCreate",
    tags: ["task-manager"],
  },
};

const tasksCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksCreateProcedure: Procedure = {
  contract: TaskManagerTasksCreateContract,
  handler: tasksCreateHandler,
};


export const TaskManagerTasksListRestContract: Contract = {
  name: "task-manager.tasks.list.rest",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksListRest",
    tags: ["task-manager"],
  },
};

const tasksListRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksListRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksListRestProcedure: Procedure = {
  contract: TaskManagerTasksListRestContract,
  handler: tasksListRestHandler,
};


export const TaskManagerTasksCreateRestContract: Contract = {
  name: "task-manager.tasks.create.rest",
  description: "Create a new task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksCreateRest",
    tags: ["task-manager"],
  },
};

const tasksCreateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksCreateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksCreateRestProcedure: Procedure = {
  contract: TaskManagerTasksCreateRestContract,
  handler: tasksCreateRestHandler,
};


export const TaskManagerTasksDeleteContract: Contract = {
  name: "task-manager.tasks.delete",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksDelete",
    tags: ["task-manager"],
  },
};

const tasksDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksDeleteProcedure: Procedure = {
  contract: TaskManagerTasksDeleteContract,
  handler: tasksDeleteHandler,
};


export const TaskManagerTasksDeleteRestContract: Contract = {
  name: "task-manager.tasks.delete.rest",
  description: "Delete a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksDeleteRest",
    tags: ["task-manager"],
  },
};

const tasksDeleteRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksDeleteRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksDeleteRestProcedure: Procedure = {
  contract: TaskManagerTasksDeleteRestContract,
  handler: tasksDeleteRestHandler,
};


export const TaskManagerTasksGetRestContract: Contract = {
  name: "task-manager.tasks.get.rest",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksGetRest",
    tags: ["task-manager"],
  },
};

const tasksGetRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksGetRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksGetRestProcedure: Procedure = {
  contract: TaskManagerTasksGetRestContract,
  handler: tasksGetRestHandler,
};


export const TaskManagerTasksUpdateRestContract: Contract = {
  name: "task-manager.tasks.update.rest",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksUpdateRest",
    tags: ["task-manager"],
  },
};

const tasksUpdateRestHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksUpdateRest(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksUpdateRestProcedure: Procedure = {
  contract: TaskManagerTasksUpdateRestContract,
  handler: tasksUpdateRestHandler,
};


export const TaskManagerTasksGetContract: Contract = {
  name: "task-manager.tasks.get",
  description: "Get a task by ID",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksGet",
    tags: ["task-manager"],
  },
};

const tasksGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksGetProcedure: Procedure = {
  contract: TaskManagerTasksGetContract,
  handler: tasksGetHandler,
};


export const TaskManagerTasksListContract: Contract = {
  name: "task-manager.tasks.list",
  description: "List all tasks with optional filters",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksList",
    tags: ["task-manager"],
  },
};

const tasksListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksListProcedure: Procedure = {
  contract: TaskManagerTasksListContract,
  handler: tasksListHandler,
};


export const TaskManagerTasksUpdateContract: Contract = {
  name: "task-manager.tasks.update",
  description: "Update a task",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksUpdate",
    tags: ["task-manager"],
  },
};

const tasksUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "task-manager");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.tasksUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK-MANAGER_TOKEN",
  })
);

export const TaskManagerTasksUpdateProcedure: Procedure = {
  contract: TaskManagerTasksUpdateContract,
  handler: tasksUpdateHandler,
};


export const TaskManagerProcedures: Procedure[] = [
  TaskManagerNotificationServiceNotificationsListProcedure,
  TaskManagerNotificationServiceNotificationsListRestProcedure,
  TaskManagerNotificationServiceNotificationsSendProcedure,
  TaskManagerNotificationServiceNotificationsSubscribeProcedure,
  TaskManagerNotificationServiceTaskManagerTasksCreateProcedure,
  TaskManagerNotificationServiceTaskManagerTasksCreateRestProcedure,
  TaskManagerNotificationServiceTaskManagerTasksDeleteProcedure,
  TaskManagerNotificationServiceTaskManagerTasksDeleteRestProcedure,
  TaskManagerNotificationServiceTaskManagerTasksGetProcedure,
  TaskManagerNotificationServiceTaskManagerTasksGetRestProcedure,
  TaskManagerNotificationServiceTaskManagerTasksListProcedure,
  TaskManagerNotificationServiceTaskManagerTasksListRestProcedure,
  TaskManagerNotificationServiceTaskManagerTasksUpdateProcedure,
  TaskManagerNotificationServiceTaskManagerTasksUpdateRestProcedure,
  TaskManagerTasksCreateProcedure,
  TaskManagerTasksListRestProcedure,
  TaskManagerTasksCreateRestProcedure,
  TaskManagerTasksDeleteProcedure,
  TaskManagerTasksDeleteRestProcedure,
  TaskManagerTasksGetRestProcedure,
  TaskManagerTasksUpdateRestProcedure,
  TaskManagerTasksGetProcedure,
  TaskManagerTasksListProcedure,
  TaskManagerTasksUpdateProcedure
];
