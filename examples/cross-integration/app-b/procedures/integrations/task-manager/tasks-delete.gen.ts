// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/task-manager/sdk.gen.js";
import { createClient, createConfig } from "@hey-api/client-fetch";
import { z } from "zod";

export const TasksDeleteContract: Contract = {
  name: "task-manager.tasks.delete",
  description: "Delete a task",
  input: z.object({
  id: z.string()
}),
  output: z.object({
  success: z.boolean(),
  id: z.string()
}),
  metadata: {
    exposure: "external" as const,
    roles: ["api-endpoint", "workflow-node"],
    provider: "task-manager",
    operation: "tasksDelete",
    tags: ["task-manager"],
  },
};

const tasksDeleteHandler = applyPolicies(
  async (input, context) => {
    const baseUrl = process.env.TASK_MANAGER_URL || context.metadata?.['task-managerUrl'] as string | undefined;
    if (!baseUrl) {
      throw new Error(`TASK_MANAGER_URL environment variable is not set`);
    }
    
    const headers = getOAuthHeaders(context, "task-manager");
    
    // Create custom client with proper baseURL configuration
    const customClient = createClient(createConfig({ baseUrl }));
    
    const result = await sdk.tasksDelete({ 
      body: input,
      headers,
      client: customClient 
    } as any);
    
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "task-manager",
    metadataTokenKey: "task-managerToken",
    envVar: "TASK_MANAGER_TOKEN",
  })
);

export const TasksDeleteProcedure: Procedure = {
  contract: TasksDeleteContract,
  handler: tasksDeleteHandler,
};
