// This file is auto-generated by c4c integrate command
// Do not edit manually.

import type { Procedure, Contract } from "@c4c/core";
import { z } from "zod";

export const TaskManagerTasksTriggerCreatedWebhookContract: Contract = {
  name: "task-manager.tasks.trigger.created.webhook",
  description: "Webhook fired when a new task is created",
  input: z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional(),
  status: z.enum(["todo", "in_progress", "done"]),
  priority: z.enum(["low", "medium", "high"]).optional(),
  assignee: z.string().optional(),
  dueDate: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string()
}),
  output: z.object({
  success: z.boolean(),
  message: z.string().optional()
}),
  metadata: {
    exposure: "external" as const,
    roles: ["workflow-node"],
    provider: "task-manager",
    operation: "tasksTriggerCreatedWebhook",
    tags: ["task-manager", "webhook"],
    type: "trigger" as const,
    trigger: {
      type: "webhook",
    },
  },
};

// Webhook triggers don't have a handler - they are registered as event receivers
export const TaskManagerTasksTriggerCreatedWebhookProcedure: Procedure = {
  contract: TaskManagerTasksTriggerCreatedWebhookContract,
  handler: async () => {
    throw new Error('Webhook triggers should not be called directly - they are invoked by the workflow engine');
  },
};
