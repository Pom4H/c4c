// This file is auto-generated by scripts/generate-contracts.mjs
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/avito/items/sdk.gen.js";
import * as zod from "../../../generated/avito/items/zod.gen.js";

export const AvitoItemsVasPricesContract: Contract = {
  name: "avitoItems.vas.prices",
  description: "Получение информации о стоимости услуг продвижения и доступных значках\nВозвращает в ответ список объектов со следующей структурой:\n- `itemId` – идентификатор объявления\n- `vas` – список объектов, которые содержат информацию о стоимости дополнительных услуг и пакетов дополнительных услуг для каждого объявления. Структура объекта:\n- `slug` – идентификатор услуги или пакета услуг:\n- `highlight` — [услуга продвижения \"Выделить\"](https://support.avito.ru/articles/200026858)\n- `xl` – [услуга продвижения \"XL-объявление\"](https://support.avito.ru/articles/685)\n- `stickerpack_x1` – [1 значок на XL-объявлении](https://support.avito.ru/articles/2450)\n- `stickerpack_x2` – [2 значка на XL-объявлении](https://support.avito.ru/articles/2450)\n- `stickerpack_x3` – [3 значка на XL-объявлении](https://support.avito.ru/articles/2450)\n\n- `x2_1` – [пакет \"до 2 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)\n- `x2_7` – [пакет \"до 2 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)\n- `x5_1` – [пакет \"до 5 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)\n- `x5_7` – [пакет \"до 5 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)\n- `x10_1` – [пакет \"до 10 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)\n- `x10_7` – [пакет \"до 10 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)\n- `x15_1` – [пакет \"до 15 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)\n- `x15_7` – [пакет \"до 15 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)\n- `x20_1` – [пакет \"до 20 раз больше просмотров на 1 день\"](https://support.avito.ru/articles/1398)\n- `x20_7` – [пакет \"до 20 раз больше просмотров на 7 дней\"](https://support.avito.ru/articles/1398)\n\n- `price` – цена в рублях с учетом скидки\n\n- `priceOld` – цена в рублях до применения скидки\n\n- `stickers` – список объектов которые содержат доступные для объявления  [значки](https://support.avito.ru/articles/2450)\n- `id` – идентификатор значка\n- `title` – название значка\n- `description` – описание значка",
  input: zod.zVasPricesData,
  output: zod.zVasPricesResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "vasPrices",
    tags: ["avito", "items"],
  },
};

const vasPricesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.vasPrices(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsVasPricesProcedure: Procedure = {
  contract: AvitoItemsVasPricesContract,
  handler: vasPricesHandler,
};

export const AvitoItemsPostCallsStatsContract: Contract = {
  name: "avitoItems.post.calls.stats",
  description: "Получение статистики по звонкам\nПолучение агрегированной статистики звонков, полученных пользователем",
  input: zod.zPostCallsStatsData,
  output: zod.zPostCallsStatsResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "postCallsStats",
    tags: ["avito", "items"],
  },
};

const postCallsStatsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postCallsStats(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsPostCallsStatsProcedure: Procedure = {
  contract: AvitoItemsPostCallsStatsContract,
  handler: postCallsStatsHandler,
};

export const AvitoItemsGetItemInfoContract: Contract = {
  name: "avitoItems.get.item.info",
  description: "Получение информации по объявлению\nВозвращает данные об объявлении - его статус, список примененных услуг Максимальное количество запросов в минуту - 500\n**Внимание:** для получения статистики объявления должен использоваться метод:\n[получение статистики по списку объявлений](#operation/itemStatsShallow)",
  input: zod.zGetItemInfoData,
  output: zod.zGetItemInfoResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "getItemInfo",
    tags: ["avito", "items"],
  },
};

const getItemInfoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getItemInfo(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsGetItemInfoProcedure: Procedure = {
  contract: AvitoItemsGetItemInfoContract,
  handler: getItemInfoHandler,
};

export const AvitoItemsPutItemVasContract: Contract = {
  name: "avitoItems.put.item.vas",
  description: "Применение дополнительных услуг\n**Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`\n\nПрименение дополнительной услуги к объявлению, в ответе возвращает данные о примененной услуге и сумму списания.\n[Более подробная информация по дополнительным услугам](https://support.avito.ru/sections/200009758)\n\n**Внимание:** получение ошибки при выполнении этой операции не означает, что услуга точно не была куплена.\nВ этом случае рекомендуется подождать несколько минут и проверить, что услуга отсутствует в списке применённых, а только затем повторить попытку.",
  input: zod.zPutItemVasData,
  output: zod.zPutItemVasResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "putItemVas",
    tags: ["avito", "items"],
  },
};

const putItemVasHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.putItemVas(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsPutItemVasProcedure: Procedure = {
  contract: AvitoItemsPutItemVasContract,
  handler: putItemVasHandler,
};

export const AvitoItemsGetItemsInfoContract: Contract = {
  name: "avitoItems.get.items.info",
  description: "Получение информации по объявлениям\nВозвращает список объявлений авторизованного пользователя - статус, категорию и ссылку на сайте.\n**Внимание! В настоящий момент этот метод не работает с объявлениями [сотрудников](https://pro.avito.ru/employees).** Он позволяет получить объявления только для пользователя, который указан владельцем этого объявления. В случае сотрудника это будет главный аккаунт компании, для авторизованного сотрудника вернётся пустой список объявлений.",
  input: zod.zGetItemsInfoData,
  output: zod.zGetItemsInfoResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "getItemsInfo",
    tags: ["avito", "items"],
  },
};

const getItemsInfoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getItemsInfo(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsGetItemsInfoProcedure: Procedure = {
  contract: AvitoItemsGetItemsInfoContract,
  handler: getItemsInfoHandler,
};

export const AvitoItemsUpdatePriceContract: Contract = {
  name: "avitoItems.update.price",
  description: "Обновление цены объявления\n\nОбновляет цену товара по id.\nМаксимальное количество запросов в минуту - 150.\n**Внимание! Доступно для категорий Товары, Запчасти, Авто, Недвижимость (кроме краткосрочной)**",
  input: zod.zUpdatePriceData,
  output: zod.zUpdatePriceResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "updatePrice",
    tags: ["avito", "items"],
  },
};

const updatePriceHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.updatePrice(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsUpdatePriceProcedure: Procedure = {
  contract: AvitoItemsUpdatePriceContract,
  handler: updatePriceHandler,
};

export const AvitoItemsPutItemVasPackageV2Contract: Contract = {
  name: "avitoItems.put.item.vas.package.v2",
  description: "Применение пакета дополнительных услуг\n**Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`\n\nПрименение пакета дополнительных услуг к объявлению, в ответе возвращает сумму списания.\n\n**Внимание:** получение ошибки при выполнении этой операции не означает, что пакет точно не была куплен.\nВ этом случае рекомендуется подождать несколько минут и проверить, что пакет отсутствует в списке применённых, а только затем повторить попытку.",
  input: zod.zPutItemVasPackageV2Data,
  output: zod.zPutItemVasPackageV2Response,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "putItemVasPackageV2",
    tags: ["avito", "items"],
  },
};

const putItemVasPackageV2Handler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.putItemVasPackageV2(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsPutItemVasPackageV2Procedure: Procedure = {
  contract: AvitoItemsPutItemVasPackageV2Contract,
  handler: putItemVasPackageV2Handler,
};

export const AvitoItemsApplyVasContract: Contract = {
  name: "avitoItems.apply.vas",
  description: "Применение услуг продвижения\nС помощью этого метода вы можете применить к опубликованному объявлению одну или несколько услуг продвижения (например, «XL-объявление», «Выделение цветом» и «До 10 раз больше просмотров на 7 дней»). В рамках одного запроса услуга может быть применена только один раз.\n\nЕсли для вашего объявления доступны значки (такие как «Без ДТП», «Срочно», «1 владелец»), при подключении услуги «XL-объявление» вы можете передать их список (не более трёх значков). В этом случае добавьте соответствующую услугу на 1, 2 или 3 значка.\n\n[Подробнее об услугах продвижения](https://support.avito.ru/partitions/131)\n\nЧтобы получить список доступных услуг и значков,  используйте метод `/core/v1/accounts/{userId}/vas/prices`.\n\nЕсли заказ сформирован успешно, в ответ вы получите уникальные идентификаторы операций покупки для каждой из применяемых услуг. Позже эти идентификаторы можно будет использовать, чтобы узнать статус выполнения заказа.\n\nВ случае некорректного запроса метод вернет код ответа 400 и структуру, содержащую поле `code`. Возможные коды ошибок:\n- **1001** – один или несколько заголовков неправильно передаются;\n- **1002** – ошибка в URL;\n- **1003** – неверный идентификатор объявления из запроса;\n- **1004** – JSON из тела запроса не соответствует схеме или список идентификаторов услуг пустой;\n- **1005** – объявление, к которому вы хотите применить услуги, неактивно;\n- **1006** – неправильное количество выбранных значков для объявления.\nУбедитесь, что в списке идентификаторов услуг есть услуга для покупки значков и она совпадает с количеством выбранных значков.\n- stickerpack_x1 – 1 значок\n- stickerpack_x2 – 2 значка\n- stickerpack_x3 – 3 значка\n- **1007** – некоторые из выбранных услуг не могут быть применены;\n- **1008** – в объявлении появились обязательные поля, которые нужно заполнить.\nОтредактируйте объявление и попробуйте применить услугу снова.\n- **1009** – в кошельке не хватает средств для покупки услуг;\n- **1010** – вы пытались купить больше одной услуги увеличения просмотров;\n- **1011** – вы пытались купить значки, недоступные для выбранного объявления.\n\nВ случае внутренней ошибки на стороне Авито вернётся код ответа 500 и структура, содержащая поле `code`. Возможные коды ошибок:\n- **1000** – ошибка на стороне Авито, попробуйте позже или [напишите в поддержку](https://support.avito.ru/request/659?eventData[contextId]=117);\n\n**Важно:** если ответ пришёл без кода ошибки или его значения нет в списке выше — возможно, услуга всё-таки была куплена. Подождите несколько минут: услуга продвижения появится в списке применённых, а если нет — попробуйте оформить её снова.",
  input: zod.zApplyVasData,
  output: zod.zApplyVasResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "applyVas",
    tags: ["avito", "items"],
  },
};

const applyVasHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.applyVas(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsApplyVasProcedure: Procedure = {
  contract: AvitoItemsApplyVasContract,
  handler: applyVasHandler,
};

export const AvitoItemsItemStatsShallowContract: Contract = {
  name: "avitoItems.item.stats.shallow",
  description: "Получение статистики по списку объявлений\nПолучение счетчиков по переданному списку объявлений пользователя.\n\n**Внимание:** в запросе может быть передано не более 200 идентификаторов объявлений.\n\n**Внимание:** глубина такого запроса ограничена 270 днями.\n\n### Счетчики\n* ~~views - общее число просмотров объявления;~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqViews.\n* uniqViews - число уникальных пользователей, просмотревших объявление;\n* ~~contacts - число контактов [1];~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqContacts.\n* uniqContacts - число уникальных пользователей, совершивших контакты [1];\n* ~~favorites - число добавлений объявления в \"избранное\";~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqFavorites.\n* uniqFavorites - число уникальных пользователей, добавивших объявление в \"избранное\".\n\n### Группировка счетчиков\nСчетчики могут быть сгруппированы [2] по:\n* дням;\n* неделям - в поле `date` соответствующей структуры будет первый день недели;\n* месяцам - в поле `date` соответствующей структуры будет первый день месяца.\n\n#### Период группировки\nПериод группировки передается в теле запроса в поле `periodGrouping`. Доступные значения этого поля:\n* \"day\" (по умолчанию) - без группировки;\n* \"week\" - суммирование счетчиков за неделю;\n* \"month\" - суммирование счетчиков за месяц.\n\n### Примечания\n* [1]: Под контактом понимаются: запросы телефона продавца, начатый чат с продавцом по конкретному объявлению, отклик на резюме и пр.\n* [2]: Группировка уникальных пользователей происходит только в рамках одного дня.",
  input: zod.zItemStatsShallowData,
  output: zod.zItemStatsShallowResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "itemStatsShallow",
    tags: ["avito", "items"],
  },
};

const itemStatsShallowHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.itemStatsShallow(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsItemStatsShallowProcedure: Procedure = {
  contract: AvitoItemsItemStatsShallowContract,
  handler: itemStatsShallowHandler,
};

export const AvitoItemsItemAnalyticsContract: Contract = {
  name: "avitoItems.item.analytics",
  description: "Получение статистических показателей по профилю\nПолучение статистических показателей по профилю.\n### Группировки показателей\nИспользуйте группировки, чтобы получать конкретную статистику.  Например, можете запросить только общие значения показателей, а если нужны подробности, — значения показателей по каждому объявлению или за определённый период. Доступные группировки:\n\n- **totals** — по общему значению показателя за определённый период, без детализации;\n- **item** — по объявлениям;\n- **day** — по дням;\n- **week** — по неделям;\n- **month** — по месяцам.\n\n\n### Доступные показатели по объявлениям\n#### Основные\n\n- **views** - Просмотры. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.\n- **contacts** - Контакты. Количество пользователей, которые посмотрели ваш номер, написали в чат или откликнулись на скидку после рассылки. Несколько контактов за сутки от одного пользователя считаются как один.\n- **contactsShowPhone** - Посмотрели телефон. Количество пользователей, которые посмотрели ваш телефон или нажали «Позвонить». Несколько таких действий за сутки от одного пользователя считаются как один.\n- **contactsMessenger** - Написали в чат. Количество пользователей, которые написали вам. Несколько чатов за сутки от одного пользователя считаются как один.\n- **contactsShowPhoneAndMessenger** - Посмотрели телефон и написали в чат. Количество пользователей, которые и посмотрели ваш телефон, и написали в чат. Несколько таких действий за сутки от одного пользователя считаются как один.\n- **contactsSbcDiscount** - Откликнулись на скидку в чате. Количество пользователей, которые приняли ваше спецпредложение после рассылки.\n- **viewsToContactsConversion** - Конверсия из просмотров в контакты. Процент пользователей, которые после перехода в объявление посмотрели ваш телефон или написали в чат.\n- **favorites** - Добавили в избранное. Сколько раз объявление добавили в избранное.\n- **averageViewCost** - Средняя цена просмотра. Расходы на размещение и продвижение объявлений делятся на число просмотров.\n- **averageContactCost** - Средняя цена контакта. Расходы на размещение и продвижение объявлений делятся на число контактов.\n- **impressions** - Показы. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.\n- **impressionsToViewsConversion** - Конверсия из показов в просмотры. Процент пользователей, которые перешли в объявление после того, как оно показалось в результатах поиска и рекомендациях.\n\n\n#### Целевые действия\n\n- **clickPackages**\t- Целевые просмотры. Просмотры, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).\n- **jobContacts** - Отклики на вакансии. Отклики, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).\n\n\n#### Заказы с Авито Доставкой\n\n- **viewsToOrderedItemsConversion** - Конверсия из просмотров в заказанные товары. Процент пользователей, которые после перехода в объявление заказали товар.\n- **orderedItems** - Заказано товаров. Количество товаров, которые заказали с Авито Доставкой.\n- **orderedItemsPrice** - Стоимость заказанных товаров в копейках. Общая стоимость заказов. Это сумма, которую вы получите на руки, если клиенты примут заказы.\n- **deliveredItems** - Доставлено товаров. Количество товаров, которые заказали с Авито Доставкой и уже приняли.\n- **deliveredItemsPrice** - Стоимость доставленных товаров в копейках. Общая стоимость заказов, которые покупатели приняли. Это сумма, которую вы получаете на руки.\n\n\n#### Посуточная аренда\n\n- **bookingPlacedCount** - Получено заявок. Общее количество заявок на бронирование\n- **bookingPlacedPrice** - Стоимость полученных заявок в копейках. Общая стоимость бронирований. Это сумма, которую вы получите на руки, если гости заселятся.\n- **bookingApprovedCount** - Подтверждено заявок. Количество заявок на бронирование, которые вы подтвердили.\n- **bookingApprovedPrice** - Стоимость подтвержденных заявок в копейках. Общая стоимость бронирований, которые вы подтвердили. Это сумма, которую вы получите на руки, если гости заселятся.\n- **bookingAcceptedCount** - Заявки с заселением. Количество бронирований, по которым заселились гости. Заселение засчитывается в 15:00 по Москве на следующий день после заезда.\n- **bookingAcceptedPrice** - Стоимость заявок с заселением в копейках. Общая стоимость бронирований, по которым заселились гости. Это сумма, которую вы получаете на руки.\n\n\n#### Расходы\n\n- **allSpending** - Все расходы в копейках. Сколько всего денег и бонусов вы потратили на объявления.\n- **spending** - Расходы на объявления в копейках. Сколько денег вы потратили на размещение, продвижение, целевые действия и комиссию.\n- **presenceSpending** - Расходы на размещение и целевые действия в копейках. Сколько денег вы потратили на размещения и целевые действия — просмотры, чаты, звонки и отклики.\n- **promoSpending** - Расходы на продвижение в копейках. Сколько денег вы потратили на продвижение и на услуги, которые влияют на внешний вид объявления.\n- **restSpending** - Остальные расходы в копейках. Сколько денег вы потратили на чат-ботов и услуги, которые система не смогла распознать.\n- **commission** - Комиссия в копейках. Какую комиссию вы заплатили за заказы с Авито Доставкой, которые приняли покупатели, а также за бронирования жилья.\n- **spendingBonus** - Списано бонусов на объявления. Сколько бонусов вы потратили на размещение, продвижение, целевые действия и комиссию.\n\n\n#### Количество объявлений за период\n\n- **activeItems** - Активные объявления. Объявления, которые прошли проверку и появились в поиске.\n- **newActiveItems** - Новые и опубликованные заново объявления. Сколько объявлений опубликовано впервые или повторно.\n- **oldActiveItems** - Активны с прошлого периода. Сколько объявлений остаются опубликованными с предыдущего периода.\n\n\n### Примечания\n\n* Из ручки возвращается не более чем по 1000 сущностей. Вы можете использовать поля запроса limit и offset для регулировки выбранного диапазона.\n* Глубина данных статистики такого запроса ограничена 270 днями.\n* В случае недоступности метрики для пользователя она не приходит в ответе.\n* Система позволяет делать не более одного запроса в минуту на данный метод.",
  input: zod.zItemAnalyticsData,
  output: zod.zItemAnalyticsResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoItems",
    operation: "itemAnalytics",
    tags: ["avito", "items"],
  },
};

const itemAnalyticsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoItems");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.itemAnalytics(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoItems",
    metadataTokenKey: "avitoItemsToken",
    envVar: "AVITO_ITEMS_TOKEN",
  })
);

export const AvitoItemsItemAnalyticsProcedure: Procedure = {
  contract: AvitoItemsItemAnalyticsContract,
  handler: itemAnalyticsHandler,
};

export const AvitoItemsProcedures: Procedure[] = [
  AvitoItemsVasPricesProcedure,
  AvitoItemsPostCallsStatsProcedure,
  AvitoItemsGetItemInfoProcedure,
  AvitoItemsPutItemVasProcedure,
  AvitoItemsGetItemsInfoProcedure,
  AvitoItemsUpdatePriceProcedure,
  AvitoItemsPutItemVasPackageV2Procedure,
  AvitoItemsApplyVasProcedure,
  AvitoItemsItemStatsShallowProcedure,
  AvitoItemsItemAnalyticsProcedure
];
