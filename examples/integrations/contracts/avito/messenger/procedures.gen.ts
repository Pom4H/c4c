// This file is auto-generated by scripts/generate-contracts.mjs
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@tsdev/core";
import { withOAuth, getOAuthHeaders } from "@tsdev/policies";
import * as sdk from "../../../generated/avito/messenger/sdk.gen.js";
import * as zod from "../../../generated/avito/messenger/zod.gen.js";

export const AvitoMessengerPostSendMessageContract: Contract = {
  name: "avitoMessenger.post.send.message",
  description: "Отправка сообщения\nНа данный момент можно отправить только текстовое сообщение",
  input: zod.zPostSendMessageData,
  output: zod.zPostSendMessageResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "postSendMessage",
    tags: ["avito", "messenger"],
  },
};

const postSendMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerPostSendMessageProcedure: Procedure = {
  contract: AvitoMessengerPostSendMessageContract,
  handler: postSendMessageHandler,
};

export const AvitoMessengerPostSendImageMessageContract: Contract = {
  name: "avitoMessenger.post.send.image.message",
  description: "Отправка сообщения с изображением\nМетод используется для отправки сообщения с изображением.\n\nДля отправки сообщения с изображением необходимо передать в запросе id изображения, полученного после загрузки.",
  input: zod.zPostSendImageMessageData,
  output: zod.zPostSendImageMessageResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "postSendImageMessage",
    tags: ["avito", "messenger"],
  },
};

const postSendImageMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendImageMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerPostSendImageMessageProcedure: Procedure = {
  contract: AvitoMessengerPostSendImageMessageContract,
  handler: postSendImageMessageHandler,
};

export const AvitoMessengerDeleteMessageContract: Contract = {
  name: "avitoMessenger.delete.message",
  description: "Удаление сообщения\nСообщение не пропадает из истории, а меняет свой тип на deleted.\nУдалять сообщения можно не позднее часа с момента их отправки.",
  input: zod.zDeleteMessageData,
  output: zod.zDeleteMessageResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "deleteMessage",
    tags: ["avito", "messenger"],
  },
};

const deleteMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.deleteMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerDeleteMessageProcedure: Procedure = {
  contract: AvitoMessengerDeleteMessageContract,
  handler: deleteMessageHandler,
};

export const AvitoMessengerChatReadContract: Contract = {
  name: "avitoMessenger.chat.read",
  description: "Прочитать чат\nПосле успешного получения списка сообщений необходимо вызвать этот метод для того, чтобы чат стал прочитанным.",
  input: zod.zChatReadData,
  output: zod.zChatReadResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "chatRead",
    tags: ["avito", "messenger"],
  },
};

const chatReadHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.chatRead(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerChatReadProcedure: Procedure = {
  contract: AvitoMessengerChatReadContract,
  handler: chatReadHandler,
};

export const AvitoMessengerGetVoiceFilesContract: Contract = {
  name: "avitoMessenger.get.voice.files",
  description: "Получение голосовых сообщений\nМетод используется для получения ссылки на файл с голосовым сообщением по идентификатору voice_id, получаемому из тела сообщения с типом voice.\n\nОсобенности работы с голосовыми сообщениями:\n- Голосовые сообщения Авито используют кодек **[opus](https://ru.wikipedia.org/wiki/Opus_(%D0%BA%D0%BE%D0%B4%D0%B5%D0%BA))** внутри **.mp4** контейнера;\n- Ссылка на голосовое сообщение доступна в течение **одного часа** с момента запроса. Попытка получить файл по ссылке спустя это время приведёт к ошибке. Для восстановления доступа необходимо получить новую ссылку на файл;\n- Как и с обычными сообщениями, получение ссылки на файл доступно только для пользователей, находящихся в беседе, где голосовое сообщение было отправлено;",
  input: zod.zGetVoiceFilesData,
  output: zod.zGetVoiceFilesResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "getVoiceFiles",
    tags: ["avito", "messenger"],
  },
};

const getVoiceFilesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getVoiceFiles(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerGetVoiceFilesProcedure: Procedure = {
  contract: AvitoMessengerGetVoiceFilesContract,
  handler: getVoiceFilesHandler,
};

export const AvitoMessengerUploadImagesContract: Contract = {
  name: "avitoMessenger.upload.images",
  description: "Загрузка изображений\nМетод используется для загрузки изображений в формате JPEG, HEIC, GIF, BMP или PNG.\n\nОсобенности работы с загрузкой изображений:\n- Метод поддерживает только одиночные изображения; для загрузки нескольких картинок необходимо сделать несколько запросов;\n- Максимальный размер файла — 24 МБ;\n- Максимальное разрешение — 75 мегапиксилей;",
  input: zod.zUploadImagesData,
  output: zod.zUploadImagesResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "uploadImages",
    tags: ["avito", "messenger"],
  },
};

const uploadImagesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.uploadImages(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerUploadImagesProcedure: Procedure = {
  contract: AvitoMessengerUploadImagesContract,
  handler: uploadImagesHandler,
};

export const AvitoMessengerGetSubscriptionsContract: Contract = {
  name: "avitoMessenger.get.subscriptions",
  description: "Получение подписок (webhooks)\nПолучение списка подписок",
  input: zod.zGetSubscriptionsData,
  output: zod.zGetSubscriptionsResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "getSubscriptions",
    tags: ["avito", "messenger"],
  },
};

const getSubscriptionsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getSubscriptions(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerGetSubscriptionsProcedure: Procedure = {
  contract: AvitoMessengerGetSubscriptionsContract,
  handler: getSubscriptionsHandler,
};

export const AvitoMessengerPostWebhookUnsubscribeContract: Contract = {
  name: "avitoMessenger.post.webhook.unsubscribe",
  description: "Отключение уведомлений (webhooks)\nОтключение уведомлений",
  input: zod.zPostWebhookUnsubscribeData,
  output: zod.zPostWebhookUnsubscribeResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "postWebhookUnsubscribe",
    tags: ["avito", "messenger"],
  },
};

const postWebhookUnsubscribeHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postWebhookUnsubscribe(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerPostWebhookUnsubscribeProcedure: Procedure = {
  contract: AvitoMessengerPostWebhookUnsubscribeContract,
  handler: postWebhookUnsubscribeHandler,
};

export const AvitoMessengerGetChatsV2Contract: Contract = {
  name: "avitoMessenger.get.chats.v2",
  description: "Получение информации по чатам\nВозвращает список чатов",
  input: zod.zGetChatsV2Data,
  output: zod.zGetChatsV2Response,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "getChatsV2",
    tags: ["avito", "messenger"],
  },
};

const getChatsV2Handler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getChatsV2(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerGetChatsV2Procedure: Procedure = {
  contract: AvitoMessengerGetChatsV2Contract,
  handler: getChatsV2Handler,
};

export const AvitoMessengerGetChatByIdV2Contract: Contract = {
  name: "avitoMessenger.get.chat.by.id.v2",
  description: "Получение информации по чату\nВозвращает данные чата и последнее сообщение в нем",
  input: zod.zGetChatByIdV2Data,
  output: zod.zGetChatByIdV2Response,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "getChatByIdV2",
    tags: ["avito", "messenger"],
  },
};

const getChatByIdV2Handler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getChatByIdV2(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerGetChatByIdV2Procedure: Procedure = {
  contract: AvitoMessengerGetChatByIdV2Contract,
  handler: getChatByIdV2Handler,
};

export const AvitoMessengerGetMessagesV3Contract: Contract = {
  name: "avitoMessenger.get.messages.v3",
  description: "Получение списка сообщений V3\nПолучение списка сообщений.  **Не помечает чат прочитанным.**\nПосле успешного получения списка сообщений необходимо вызвать [метод](https://api.avito.ru/docs/api.html#operation/chatRead), который сделает сообщения прочитанными.\nДля получения новых сообщений в реальном времени используйте [webhooks](https://api.avito.ru/docs/api.html#operation/postWebhookV3)",
  input: zod.zGetMessagesV3Data,
  output: zod.zGetMessagesV3Response,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "getMessagesV3",
    tags: ["avito", "messenger"],
  },
};

const getMessagesV3Handler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.getMessagesV3(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerGetMessagesV3Procedure: Procedure = {
  contract: AvitoMessengerGetMessagesV3Contract,
  handler: getMessagesV3Handler,
};

export const AvitoMessengerPostWebhookV3Contract: Contract = {
  name: "avitoMessenger.post.webhook.v3",
  description: "Включение уведомлений V3 (webhooks)\nВключение webhook-уведомлений.\n\nСхему JSON приходящего в webhook сообщения можно увидеть в примерах ответов.\n\nПосле регистрации url'а для получения веб-хуков, убедитесь, что он доступен, работает и возвращает статус 200 ОК соблюдая timeout 2s,\nнапример, выполнив запрос:\n\ncurl --connect-timeout 2 <url-вашего-вебхука> -i -d '{}'",
  input: zod.zPostWebhookV3Data,
  output: zod.zPostWebhookV3Response,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "avitoMessenger",
    operation: "postWebhookV3",
    tags: ["avito", "messenger"],
  },
};

const postWebhookV3Handler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoMessenger");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postWebhookV3(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoMessenger",
    metadataTokenKey: "avitoMessengerToken",
    envVar: "AVITO_MESSENGER_TOKEN",
  })
);

export const AvitoMessengerPostWebhookV3Procedure: Procedure = {
  contract: AvitoMessengerPostWebhookV3Contract,
  handler: postWebhookV3Handler,
};

export const AvitoMessengerProcedures: Procedure[] = [
  AvitoMessengerPostSendMessageProcedure,
  AvitoMessengerPostSendImageMessageProcedure,
  AvitoMessengerDeleteMessageProcedure,
  AvitoMessengerChatReadProcedure,
  AvitoMessengerGetVoiceFilesProcedure,
  AvitoMessengerUploadImagesProcedure,
  AvitoMessengerGetSubscriptionsProcedure,
  AvitoMessengerPostWebhookUnsubscribeProcedure,
  AvitoMessengerGetChatsV2Procedure,
  AvitoMessengerGetChatByIdV2Procedure,
  AvitoMessengerGetMessagesV3Procedure,
  AvitoMessengerPostWebhookV3Procedure
];
