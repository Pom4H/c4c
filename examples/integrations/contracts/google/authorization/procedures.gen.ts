// This file is auto-generated by scripts/generate-contracts.mjs
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/google/authorization/sdk.gen.js";
import * as zod from "../../../generated/google/authorization/zod.gen.js";

export const GoogleAuthorizationOauth2TokenContract: Contract = {
  name: "googleAuthorization.oauth2.token",
  description: "oauth2Token",
  input: zod.zOauth2TokenData,
  output: zod.zOauth2TokenResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "googleAuthorization",
    operation: "oauth2Token",
    tags: ["google", "authorization"],
  },
};

const oauth2TokenHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleAuthorization");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.oauth2Token(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleAuthorization",
    metadataTokenKey: "googleAuthorizationToken",
    envVar: "GOOGLE_AUTHORIZATION_TOKEN",
  })
);

export const GoogleAuthorizationOauth2TokenProcedure: Procedure = {
  contract: GoogleAuthorizationOauth2TokenContract,
  handler: oauth2TokenHandler,
};

export const GoogleAuthorizationOauth2TokeninfoContract: Contract = {
  name: "googleAuthorization.oauth2.tokeninfo",
  description: "oauth2Tokeninfo",
  input: zod.zOauth2TokeninfoData,
  output: zod.zOauth2TokeninfoResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "googleAuthorization",
    operation: "oauth2Tokeninfo",
    tags: ["google", "authorization"],
  },
};

const oauth2TokeninfoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleAuthorization");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.oauth2Tokeninfo(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleAuthorization",
    metadataTokenKey: "googleAuthorizationToken",
    envVar: "GOOGLE_AUTHORIZATION_TOKEN",
  })
);

export const GoogleAuthorizationOauth2TokeninfoProcedure: Procedure = {
  contract: GoogleAuthorizationOauth2TokeninfoContract,
  handler: oauth2TokeninfoHandler,
};

export const GoogleAuthorizationOauth2UserinfoGetContract: Contract = {
  name: "googleAuthorization.oauth2.userinfo.get",
  description: "oauth2UserinfoGet",
  input: zod.zOauth2UserinfoGetData,
  output: zod.zOauth2UserinfoGetResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "googleAuthorization",
    operation: "oauth2UserinfoGet",
    tags: ["google", "authorization"],
  },
};

const oauth2UserinfoGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleAuthorization");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.oauth2UserinfoGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleAuthorization",
    metadataTokenKey: "googleAuthorizationToken",
    envVar: "GOOGLE_AUTHORIZATION_TOKEN",
  })
);

export const GoogleAuthorizationOauth2UserinfoGetProcedure: Procedure = {
  contract: GoogleAuthorizationOauth2UserinfoGetContract,
  handler: oauth2UserinfoGetHandler,
};

export const GoogleAuthorizationOauth2UserinfoV2MeGetContract: Contract = {
  name: "googleAuthorization.oauth2.userinfo.v2.me.get",
  description: "oauth2UserinfoV2MeGet",
  input: zod.zOauth2UserinfoV2MeGetData,
  output: zod.zOauth2UserinfoV2MeGetResponse,
  metadata: {
    exposure: "internal",
    roles: ["workflow-node"],
    provider: "googleAuthorization",
    operation: "oauth2UserinfoV2MeGet",
    tags: ["google", "authorization"],
  },
};

const oauth2UserinfoV2MeGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleAuthorization");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.oauth2UserinfoV2MeGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleAuthorization",
    metadataTokenKey: "googleAuthorizationToken",
    envVar: "GOOGLE_AUTHORIZATION_TOKEN",
  })
);

export const GoogleAuthorizationOauth2UserinfoV2MeGetProcedure: Procedure = {
  contract: GoogleAuthorizationOauth2UserinfoV2MeGetContract,
  handler: oauth2UserinfoV2MeGetHandler,
};

export const GoogleAuthorizationProcedures: Procedure[] = [
  GoogleAuthorizationOauth2TokenProcedure,
  GoogleAuthorizationOauth2TokeninfoProcedure,
  GoogleAuthorizationOauth2UserinfoGetProcedure,
  GoogleAuthorizationOauth2UserinfoV2MeGetProcedure
];
