// This file is auto-generated by @hey-api/openapi-ts

export const AnalyticsRequestSchema = {
  properties: {
    dateFrom: {
      description: 'Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику',
      example: '2020-09-01',
      format: 'date',
      type: 'string'
    },
    dateTo: {
      description:
        'Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику',
      example: '2021-10-15',
      format: 'date',
      type: 'string'
    },
    filter: {
      description: 'Набор ограничений, по которым нужно отфильтровать данные',
      nullable: true,
      properties: {
        categoryIDs: {
          description:
            'Идентификаторы категорий</br> [ Справочник идентификаторов категорий ](https://www.avito.st/s/openapi/catalog-categories.xml)',
          example: [11, 12],
          items: {
            type: 'integer'
          },
          nullable: true,
          type: 'array'
        },
        employeeIDs: {
          description:
            'Идентификаторы сотрудников</br> [ Метод получения идентификаторов сотрудников ](https://developers.avito.ru/api-catalog/accounts-hierarchy/documentation#operation/getEmployeesV1)',
          example: [41042142, 41042143],
          items: {
            type: 'integer'
          },
          nullable: true,
          type: 'array'
        }
      },
      type: 'object'
    },
    grouping: {
      $ref: '#/components/schemas/Groupings'
    },
    limit: {
      description: 'Инструмент пагинации для ограничения количества сущностей в response;',
      example: 1000,
      maximum: 1000,
      minimum: 0,
      nullable: true,
      type: 'integer'
    },
    metrics: {
      description: 'Набор доступных показателей, которые должны присутствовать в ответе',
      example: ['views', 'contacts', 'presenceSpending'],
      items: {
        type: 'string'
      },
      type: 'array'
    },
    offset: {
      description: 'инструмент пагинации или смещение, с которого начинается выборка данных;',
      example: 0,
      minimum: 0,
      nullable: true,
      type: 'integer'
    },
    sort: {
      description: 'Сортировка по заданному показателю',
      nullable: true,
      properties: {
        key: {
          description: 'Показатель статистики, по которому нужно отсортировать;',
          type: 'string'
        },
        order: {
          description: 'Порядок сортировки (asc, desc);',
          enum: ['asc', 'desc'],
          type: 'string'
        }
      },
      required: ['key', 'order'],
      type: 'object'
    }
  },
  required: ['dateFrom', 'dateTo', 'metrics', 'grouping', 'limit', 'offset'],
  type: 'object'
} as const

export const AnalyticsResponseSchema = {
  properties: {
    result: {
      properties: {
        dataTotalCount: {
          example: 1,
          type: 'integer'
        },
        groupings: {
          example: [
            {
              id: 1742860800,
              metrics: [
                {
                  slug: 'views',
                  value: 100
                },
                {
                  slug: 'contacts',
                  value: 100
                },
                {
                  slug: 'presenceSpending',
                  value: 1000
                }
              ],
              type: 'dates'
            }
          ],
          items: {
            properties: {
              id: {
                type: 'integer'
              },
              metrics: {
                items: {
                  properties: {
                    slug: {
                      example: 'views',
                      type: 'string'
                    },
                    value: {
                      format: 'float',
                      type: 'number'
                    }
                  },
                  required: ['slug', 'value'],
                  type: 'object'
                },
                type: 'array'
              },
              type: {
                $ref: '#/components/schemas/Groupings'
              }
            },
            type: 'object'
          },
          type: 'array'
        },
        timestamp: {
          example: '2021-11-25 15:19:21',
          type: 'string'
        }
      },
      type: 'object'
    }
  },
  type: 'object'
} as const

export const ApplyVasRespSchema = {
  properties: {
    operationId: {
      title: 'Уникальный идентификатор операции покупки',
      type: 'integer'
    }
  },
  required: ['operationId'],
  type: 'object'
} as const

export const CallsStatsDaySchema = {
  properties: {
    answered: {
      description: 'Отвеченные звонки',
      type: 'integer'
    },
    calls: {
      description: 'Звонки всего',
      type: 'integer'
    },
    date: {
      description: 'Дата (YYYY-MM-DD)',
      type: 'string'
    },
    new: {
      description: 'Новые звонки',
      type: 'integer'
    },
    newAnswered: {
      description: 'Новые и одновременно отвеченные звонки',
      type: 'integer'
    }
  },
  type: 'object'
} as const

export const CallsStatsItemSchema = {
  properties: {
    days: {
      description: 'Массив статистики звонков объявления в разрезе дней',
      items: {
        $ref: '#/components/schemas/CallsStatsDay'
      },
      type: 'array'
    },
    employeeId: {
      description:
        'Идентификатор сотрудника в сервисе иерархии аккаунтов (0 означает, что звонок не аттрибуцирован до сотрудника)',
      type: 'integer'
    },
    itemId: {
      description:
        'Идентификатор объявления (0 означает, что звонок не аттрибуцирован до объявления)',
      type: 'integer'
    }
  },
  required: ['employeeId', 'itemId'],
  type: 'object'
} as const

export const CallsStatsRequestSchema = {
  properties: {
    dateFrom: {
      description: 'Начальная дата периода (YYYY-MM-DD)',
      type: 'string'
    },
    dateTo: {
      description: 'Конечная дата периода (YYYY-MM-DD)',
      type: 'string'
    },
    itemIds: {
      description: 'Идентификаторы объявлений',
      items: {
        type: 'integer'
      },
      type: 'array'
    }
  },
  required: ['dateFrom', 'dateTo'],
  type: 'object'
} as const

export const CallsStatsResponseSchema = {
  properties: {
    result: {
      properties: {
        items: {
          description: 'Массив статистики по объявлениям',
          items: {
            $ref: '#/components/schemas/CallsStatsItem'
          },
          type: 'array'
        }
      },
      required: ['items'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const ErrorItemsVasSchema = {
  description:
    'Список идентификаторов, которые не удалось обработать по разным причинам (например, они не принадлежат текущему пользователю)',
  items: {
    type: 'integer'
  },
  type: 'array'
} as const

export const ErrorResponseSchema = {
  properties: {
    error: {
      properties: {
        code: {
          example: 123,
          format: 'int32',
          type: 'integer'
        },
        message: {
          example: 'message about error occurred',
          type: 'string'
        }
      },
      required: ['message', 'code'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const FieldErrorSchema = {
  properties: {
    code: {
      description: 'Код ошибки',
      type: 'string'
    },
    message: {
      description: 'Описание ошибки',
      type: 'string'
    }
  },
  required: ['code', 'message'],
  type: 'object'
} as const

export const GroupingsSchema = {
  enum: ['day', 'week', 'month', 'item', 'totals'],
  type: 'string'
} as const

export const InfoVasSchema = {
  properties: {
    finish_time: {
      description: 'Дата завершения услуги',
      format: 'date-time',
      nullable: true,
      type: 'string'
    },
    schedule: {
      description: 'Информация о следующих применениях услуги',
      items: {
        description: 'Дата следующего применения услуги',
        format: 'date-time',
        type: 'string'
      },
      nullable: true,
      type: 'array'
    },
    vas_id: {
      description: 'Идентификатор услуги',
      enum: ['vip', 'highlight', 'pushup', 'premium', 'xl'],
      type: 'string'
    }
  },
  type: 'object'
} as const

export const ItemInfoAvitoSchema = {
  properties: {
    autoload_item_id: {
      description:
        '[Идентификатор объявления](https://autoload.avito.ru/format/realty/#Id) из файла автозагрузки',
      nullable: true,
      type: 'string'
    },
    finish_time: {
      description: 'Дата завершения объявления',
      format: 'date-time',
      nullable: true,
      type: 'string'
    },
    start_time: {
      description: 'Дата создания объявления',
      format: 'date-time',
      nullable: true,
      type: 'string'
    },
    status: {
      description: 'Статус объявления на сайте',
      enum: ['active', 'removed', 'old', 'blocked', 'rejected', 'not_found', 'another_user'],
      type: 'string'
    },
    url: {
      description: 'URL-адрес объявления',
      nullable: true,
      type: 'string'
    },
    vas: {
      description: 'Список примененных платных услуг',
      items: {
        $ref: '#/components/schemas/InfoVas'
      },
      nullable: true,
      type: 'array'
    }
  },
  type: 'object'
} as const

export const ItemVasPricesRespSchema = {
  properties: {
    itemId: {
      description: 'Идентификатор объявления на сайте',
      type: 'integer'
    },
    stickers: {
      items: {
        $ref: '#/components/schemas/StickerResp'
      },
      type: 'array'
    },
    vas: {
      items: {
        $ref: '#/components/schemas/VasResp'
      },
      type: 'array'
    }
  },
  required: ['vas'],
  type: 'object'
} as const

export const ItemsInfoWithCategoryAvitoSchema = {
  properties: {
    meta: {
      properties: {
        page: {
          description: 'Номер страницы',
          example: 1,
          type: 'integer'
        },
        per_page: {
          description: 'Количество записей на странице',
          example: 25,
          type: 'integer'
        }
      },
      type: 'object'
    },
    resources: {
      items: {
        properties: {
          address: {
            description: 'Адрес объявления',
            example: 'Москва, Лесная улица 7',
            type: 'string'
          },
          category: {
            properties: {
              id: {
                description: 'Идентификатор категории',
                example: 111,
                format: 'int32',
                type: 'integer'
              },
              name: {
                description: 'Наименование категории',
                example: 'Вакансии',
                type: 'string'
              }
            },
            type: 'object'
          },
          id: {
            description: 'Идентификатор объявления',
            example: 24122231,
            format: 'int32',
            type: 'integer'
          },
          price: {
            description: 'Цена объявления (null значение означает, что цена не указана)',
            example: 35000,
            nullable: true,
            type: 'integer'
          },
          status: {
            description: 'Статус объявления на сайте',
            enum: ['active', 'removed', 'old', 'blocked', 'rejected'],
            type: 'string'
          },
          title: {
            description: 'Наименование объявления',
            example: 'Продавец-кассир',
            type: 'string'
          },
          url: {
            description: 'URL-адрес объявления',
            example: 'https://www.avito.ru/rostov-na-donu/vakansii/prodavets_magazina_2142',
            nullable: true,
            type: 'string'
          }
        },
        type: 'object'
      },
      type: 'array'
    }
  },
  type: 'object'
} as const

export const StatisticsCountersSchema = {
  items: {
    properties: {
      itemId: {
        description: 'Идентификатор объявления',
        format: 'int64',
        type: 'integer'
      },
      stats: {
        items: {
          properties: {
            contacts: {
              deprecated: true,
              description: `__DEPRECATED (будет удалено в апреле 2021 г.).__
__Используйте поле uniqContacts.__
Запросы контактов объявления.
`,
              type: 'integer'
            },
            date: {
              description:
                'Дата (в формате YYYY-MM-DD), за которую посчитаны статистические счетчики. Для группировок по периодам - дата начала периода.',
              format: 'date',
              type: 'string'
            },
            favorites: {
              deprecated: true,
              description:
                '__DEPRECATED (будет удалено в апреле 2021 г.).__ __Используйте поле uniqFavorites.__ Добавления объявления в избранное',
              type: 'integer'
            },
            uniqContacts: {
              description: 'Уникальные пользователи, запрашивавшие контакты объявления',
              type: 'integer'
            },
            uniqFavorites: {
              description: 'Уникальные пользователи, добавившие объявление в избранное',
              type: 'integer'
            },
            uniqViews: {
              description: 'Уникальные пользователи, просматривавшие объявления',
              type: 'integer'
            },
            views: {
              deprecated: true,
              description: `__DEPRECATED (будет удалено в апреле 2021 г.).__
__Используйте поле uniqViews.__
Просмотры объявления.
`,
              type: 'integer'
            }
          },
          required: ['date'],
          type: 'object'
        },
        type: 'array'
      }
    },
    type: 'object'
  },
  type: 'array'
} as const

export const StatisticsDateFromSchema = {
  description: 'Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику',
  example: '2020-01-01',
  type: 'string'
} as const

export const StatisticsDateToSchema = {
  description: 'Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику',
  example: '2020-01-01',
  type: 'string'
} as const

export const StatisticsFieldsSchema = {
  description: 'Набор счетчиков, которые должны присутствовать в ответе',
  items: {
    enum: ['views', 'uniqViews', 'contacts', 'uniqContacts', 'favorites', 'uniqFavorites'],
    type: 'string'
  },
  type: 'array'
} as const

export const StatisticsItemIDsSchema = {
  description: 'Набор идентификаторов объявлений на сайте',
  example: [123456789, 987654321],
  items: {
    type: 'integer'
  },
  required: ['items'],
  type: 'array'
} as const

export const StatisticsPeriodGroupingSchema = {
  description: 'Период группировки',
  enum: ['day', 'week', 'month'],
  type: 'string'
} as const

export const StatisticsResponseSchema = {
  properties: {
    errors: {
      type: 'object'
    },
    result: {
      description: 'Статистические счетчики объявления',
      properties: {
        items: {
          $ref: '#/components/schemas/StatisticsCounters'
        }
      },
      type: 'object'
    }
  },
  type: 'object'
} as const

export const StatisticsShallowRequestBodySchema = {
  properties: {
    dateFrom: {
      $ref: '#/components/schemas/StatisticsDateFrom'
    },
    dateTo: {
      $ref: '#/components/schemas/StatisticsDateTo'
    },
    fields: {
      $ref: '#/components/schemas/StatisticsFields'
    },
    itemIds: {
      $ref: '#/components/schemas/StatisticsItemIDs'
    },
    periodGrouping: {
      $ref: '#/components/schemas/StatisticsPeriodGrouping'
    }
  },
  required: ['itemIds', 'dateFrom', 'dateTo'],
  type: 'object'
} as const

export const StickerRespSchema = {
  description: 'Информация о значках для переданного списка объявлений',
  properties: {
    description: {
      description: 'Описание значка',
      type: 'string'
    },
    id: {
      description: 'Идентификатор значка',
      type: 'integer'
    },
    title: {
      description: 'Название значка',
      type: 'string'
    }
  },
  required: ['id', 'title', 'description'],
  type: 'object'
} as const

export const UpdatePriceRequestSchema = {
  properties: {
    price: {
      description: 'Цена',
      example: 100,
      type: 'integer'
    }
  },
  required: ['price'],
  type: 'object'
} as const

export const UpdatePriceResponseSchema = {
  properties: {
    result: {
      properties: {
        success: {
          type: 'boolean'
        }
      },
      type: 'object'
    }
  },
  required: ['result'],
  type: 'object'
} as const

export const VasAmountAvitoSchema = {
  properties: {
    amount: {
      description: 'Сумма списания за применение услуги или пакета',
      format: 'float',
      type: 'number'
    }
  },
  type: 'object'
} as const

export const VasApplyAvitoSchema = {
  properties: {
    amount: {
      description: 'Сумма списания за применение услуги',
      format: 'float',
      type: 'number'
    },
    vas: {
      $ref: '#/components/schemas/InfoVas'
    }
  },
  type: 'object'
} as const

export const VasPricesRespSchema = {
  items: {
    $ref: '#/components/schemas/ItemVasPricesResp'
  },
  type: 'array'
} as const

export const VasRespSchema = {
  description:
    'Информация об услугах и пакетах дополнительных услуг для переданного списка объявлений',
  properties: {
    price: {
      description: 'Цена со скидкой',
      example: 200,
      type: 'integer'
    },
    priceOld: {
      description: 'Цена до применения скидки',
      example: 300,
      type: 'integer'
    },
    slug: {
      description: 'Идентификатор услуги или пакета услуг',
      example: 'x2_1',
      type: 'string'
    }
  },
  required: ['slug', 'price', 'priceOld'],
  type: 'object'
} as const

export const authErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 401,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Unauthorized',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const badRequestErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 400,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Bad Request',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const itemIdsRequestBodySchema = {
  properties: {
    item_ids: {
      description: 'Набор идентификаторов объявлений на сайте',
      items: {
        type: 'integer'
      },
      type: 'array'
    }
  },
  required: ['item_ids'],
  type: 'object'
} as const

export const notFoundErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 404,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Not found',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const packageIdRequestBodyV2Schema = {
  properties: {
    package_id: {
      description: `Идентификатор пакета услуг, возможные варианты значения:
- \`x2_1\` - применение пакета До 2 раз больше просмотров на 1 день
- \`x2_7\` - применение пакета До 2 раз больше просмотров на 7 дней
- \`x5_1\` - применение пакета До 5 раз больше просмотров на 1 день
- \`x5_7\` - применение пакета До 5 раз больше просмотров на 7 дней
- \`x10_1\` - применение пакета До 10 раз больше просмотров на 1 день
- \`x10_7\` - применение пакета До 10 раз больше просмотров на 7 дней

В некоторых регионах и категориях также доступны дополнительные варианты:
- \`x15_1\` - применение пакета До 15 раз больше просмотров на 1 день
- \`x15_7\` - применение пакета До 15 раз больше просмотров на 7 дней
- \`x20_1\` - применение пакета До 20 раз больше просмотров на 1 день
- \`x20_7\` - применение пакета До 20 раз больше просмотров на 7 дней

Если попытаться применить эти пакеты в недоступных для них регионе и категории, оплата не пройдёт.
`,
      enum: ['x2_1', 'x2_7', 'x5_1', 'x5_7', 'x10_1', 'x10_7', 'x15_1', 'x15_7', 'x20_1', 'x20_7'],
      type: 'string'
    }
  },
  required: ['package_id'],
  type: 'object'
} as const

export const pricesItemIdsRequestBodySchema = {
  properties: {
    itemIds: {
      description: 'Набор идентификаторов объявлений на сайте',
      items: {
        type: 'integer'
      },
      type: 'array'
    }
  },
  required: ['itemIds'],
  type: 'object'
} as const

export const serviceErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 500,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Описание ошибки',
          example: 'Error while processing request. Please, contact support',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const serviceUnavailableErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 503,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Описание ошибки',
          example: 'Service temporarily unavailable. Please, contact support',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const tooManyRequestsSchema = {
  type: 'object'
} as const

export const validatingErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 400,
          format: 'int32',
          type: 'integer'
        },
        fields: {
          description: 'Информация об ошибке валидации параметров в формате ключ-значение',
          nullable: true,
          type: 'object'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Validation error',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const vasIdRequestBodySchema = {
  properties: {
    vas_id: {
      description: `Идентификатор услуги, возможные его варианты значения:
- \`highlight\` — [выделение объявления](https://support.avito.ru/articles/200026858)
- \`xl\` – [XL-объявление](https://support.avito.ru/articles/685)
`,
      enum: ['highlight', 'xl'],
      type: 'string'
    }
  },
  required: ['vas_id'],
  type: 'object'
} as const
