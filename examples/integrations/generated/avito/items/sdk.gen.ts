// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client'
import type {
  VasPricesData,
  VasPricesResponses,
  VasPricesErrors,
  PostCallsStatsData,
  PostCallsStatsResponses,
  PostCallsStatsErrors,
  GetItemInfoData,
  GetItemInfoResponses,
  GetItemInfoErrors,
  PutItemVasData,
  PutItemVasResponses,
  PutItemVasErrors,
  GetItemsInfoData,
  GetItemsInfoResponses,
  GetItemsInfoErrors,
  UpdatePriceData,
  UpdatePriceResponses,
  UpdatePriceErrors,
  PutItemVasPackageV2Data,
  PutItemVasPackageV2Responses,
  PutItemVasPackageV2Errors,
  ApplyVasData,
  ApplyVasResponses,
  ApplyVasErrors,
  ItemStatsShallowData,
  ItemStatsShallowResponses,
  ItemStatsShallowErrors,
  ItemAnalyticsData,
  ItemAnalyticsResponses,
  ItemAnalyticsErrors
} from './types.gen'
import { client } from './client.gen'
import {
  getItemInfoResponseTransformer,
  putItemVasResponseTransformer,
  itemStatsShallowResponseTransformer
} from './transformers.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Получение информации о стоимости услуг продвижения и доступных значках
 * Возвращает в ответ список объектов со следующей структурой:
 * - `itemId` – идентификатор объявления
 * - `vas` – список объектов, которые содержат информацию о стоимости дополнительных услуг и пакетов дополнительных услуг для каждого объявления. Структура объекта:
 * - `slug` – идентификатор услуги или пакета услуг:
 * - `highlight` — [услуга продвижения "Выделить"](https://support.avito.ru/articles/200026858)
 * - `xl` – [услуга продвижения "XL-объявление"](https://support.avito.ru/articles/685)
 * - `stickerpack_x1` – [1 значок на XL-объявлении](https://support.avito.ru/articles/2450)
 * - `stickerpack_x2` – [2 значка на XL-объявлении](https://support.avito.ru/articles/2450)
 * - `stickerpack_x3` – [3 значка на XL-объявлении](https://support.avito.ru/articles/2450)
 *
 * - `x2_1` – [пакет "до 2 раз больше просмотров на 1 день"](https://support.avito.ru/articles/1398)
 * - `x2_7` – [пакет "до 2 раз больше просмотров на 7 дней"](https://support.avito.ru/articles/1398)
 * - `x5_1` – [пакет "до 5 раз больше просмотров на 1 день"](https://support.avito.ru/articles/1398)
 * - `x5_7` – [пакет "до 5 раз больше просмотров на 7 дней"](https://support.avito.ru/articles/1398)
 * - `x10_1` – [пакет "до 10 раз больше просмотров на 1 день"](https://support.avito.ru/articles/1398)
 * - `x10_7` – [пакет "до 10 раз больше просмотров на 7 дней"](https://support.avito.ru/articles/1398)
 * - `x15_1` – [пакет "до 15 раз больше просмотров на 1 день"](https://support.avito.ru/articles/1398)
 * - `x15_7` – [пакет "до 15 раз больше просмотров на 7 дней"](https://support.avito.ru/articles/1398)
 * - `x20_1` – [пакет "до 20 раз больше просмотров на 1 день"](https://support.avito.ru/articles/1398)
 * - `x20_7` – [пакет "до 20 раз больше просмотров на 7 дней"](https://support.avito.ru/articles/1398)
 *
 * - `price` – цена в рублях с учетом скидки
 *
 * - `priceOld` – цена в рублях до применения скидки
 *
 * - `stickers` – список объектов которые содержат доступные для объявления  [значки](https://support.avito.ru/articles/2450)
 * - `id` – идентификатор значка
 * - `title` – название значка
 * - `description` – описание значка
 *
 */
export const vasPrices = <ThrowOnError extends boolean = false>(
  options: Options<VasPricesData, ThrowOnError>
) => {
  return (options.client ?? client).post<VasPricesResponses, VasPricesErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/accounts/{userId}/vas/prices',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Получение статистики по звонкам
 * Получение агрегированной статистики звонков, полученных пользователем
 *
 */
export const postCallsStats = <ThrowOnError extends boolean = false>(
  options: Options<PostCallsStatsData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    PostCallsStatsResponses,
    PostCallsStatsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/accounts/{user_id}/calls/stats/',
    ...options
  })
}

/**
 * Получение информации по объявлению
 * Возвращает данные об объявлении - его статус, список примененных услуг Максимальное количество запросов в минуту - 500
 * **Внимание:** для получения статистики объявления должен использоваться метод:
 * [получение статистики по списку объявлений](#operation/itemStatsShallow)
 *
 */
export const getItemInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetItemInfoData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetItemInfoResponses, GetItemInfoErrors, ThrowOnError>({
    responseTransformer: getItemInfoResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/accounts/{user_id}/items/{item_id}/',
    ...options
  })
}

/**
 * Применение дополнительных услуг
 * **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`
 *
 * Применение дополнительной услуги к объявлению, в ответе возвращает данные о примененной услуге и сумму списания.
 * [Более подробная информация по дополнительным услугам](https://support.avito.ru/sections/200009758)
 *
 * **Внимание:** получение ошибки при выполнении этой операции не означает, что услуга точно не была куплена.
 * В этом случае рекомендуется подождать несколько минут и проверить, что услуга отсутствует в списке применённых, а только затем повторить попытку.
 *
 */
export const putItemVas = <ThrowOnError extends boolean = false>(
  options: Options<PutItemVasData, ThrowOnError>
) => {
  return (options.client ?? client).put<PutItemVasResponses, PutItemVasErrors, ThrowOnError>({
    responseTransformer: putItemVasResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/accounts/{user_id}/items/{item_id}/vas',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Получение информации по объявлениям
 * Возвращает список объявлений авторизованного пользователя - статус, категорию и ссылку на сайте.
 * **Внимание! В настоящий момент этот метод не работает с объявлениями [сотрудников](https://pro.avito.ru/employees).** Он позволяет получить объявления только для пользователя, который указан владельцем этого объявления. В случае сотрудника это будет главный аккаунт компании, для авторизованного сотрудника вернётся пустой список объявлений.
 *
 */
export const getItemsInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetItemsInfoData, ThrowOnError>
) => {
  return (options.client ?? client).get<GetItemsInfoResponses, GetItemsInfoErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/items',
    ...options
  })
}

/**
 * Обновление цены объявления
 *
 * Обновляет цену товара по id.
 * Максимальное количество запросов в минуту - 150.
 * **Внимание! Доступно для категорий Товары, Запчасти, Авто, Недвижимость (кроме краткосрочной)**
 *
 */
export const updatePrice = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePriceData, ThrowOnError>
) => {
  return (options.client ?? client).post<UpdatePriceResponses, UpdatePriceErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v1/items/{item_id}/update_price',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Применение пакета дополнительных услуг
 * **Внимание:** метод объявлен устаревшим и больше не поддерживается. Вместо него используйте метод `/core/v2/items/{itemId}/vas/`
 *
 * Применение пакета дополнительных услуг к объявлению, в ответе возвращает сумму списания.
 *
 * **Внимание:** получение ошибки при выполнении этой операции не означает, что пакет точно не была куплен.
 * В этом случае рекомендуется подождать несколько минут и проверить, что пакет отсутствует в списке применённых, а только затем повторить попытку.
 *
 */
export const putItemVasPackageV2 = <ThrowOnError extends boolean = false>(
  options: Options<PutItemVasPackageV2Data, ThrowOnError>
) => {
  return (options.client ?? client).put<
    PutItemVasPackageV2Responses,
    PutItemVasPackageV2Errors,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v2/accounts/{user_id}/items/{item_id}/vas_packages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Применение услуг продвижения
 * С помощью этого метода вы можете применить к опубликованному объявлению одну или несколько услуг продвижения (например, «XL-объявление», «Выделение цветом» и «До 10 раз больше просмотров на 7 дней»). В рамках одного запроса услуга может быть применена только один раз.
 *
 * Если для вашего объявления доступны значки (такие как «Без ДТП», «Срочно», «1 владелец»), при подключении услуги «XL-объявление» вы можете передать их список (не более трёх значков). В этом случае добавьте соответствующую услугу на 1, 2 или 3 значка.
 *
 * [Подробнее об услугах продвижения](https://support.avito.ru/partitions/131)
 *
 * Чтобы получить список доступных услуг и значков,  используйте метод `/core/v1/accounts/{userId}/vas/prices`.
 *
 * Если заказ сформирован успешно, в ответ вы получите уникальные идентификаторы операций покупки для каждой из применяемых услуг. Позже эти идентификаторы можно будет использовать, чтобы узнать статус выполнения заказа.
 *
 * В случае некорректного запроса метод вернет код ответа 400 и структуру, содержащую поле `code`. Возможные коды ошибок:
 * - **1001** – один или несколько заголовков неправильно передаются;
 * - **1002** – ошибка в URL;
 * - **1003** – неверный идентификатор объявления из запроса;
 * - **1004** – JSON из тела запроса не соответствует схеме или список идентификаторов услуг пустой;
 * - **1005** – объявление, к которому вы хотите применить услуги, неактивно;
 * - **1006** – неправильное количество выбранных значков для объявления.
 * Убедитесь, что в списке идентификаторов услуг есть услуга для покупки значков и она совпадает с количеством выбранных значков.
 * - stickerpack_x1 – 1 значок
 * - stickerpack_x2 – 2 значка
 * - stickerpack_x3 – 3 значка
 * - **1007** – некоторые из выбранных услуг не могут быть применены;
 * - **1008** – в объявлении появились обязательные поля, которые нужно заполнить.
 * Отредактируйте объявление и попробуйте применить услугу снова.
 * - **1009** – в кошельке не хватает средств для покупки услуг;
 * - **1010** – вы пытались купить больше одной услуги увеличения просмотров;
 * - **1011** – вы пытались купить значки, недоступные для выбранного объявления.
 *
 * В случае внутренней ошибки на стороне Авито вернётся код ответа 500 и структура, содержащая поле `code`. Возможные коды ошибок:
 * - **1000** – ошибка на стороне Авито, попробуйте позже или [напишите в поддержку](https://support.avito.ru/request/659?eventData[contextId]=117);
 *
 * **Важно:** если ответ пришёл без кода ошибки или его значения нет в списке выше — возможно, услуга всё-таки была куплена. Подождите несколько минут: услуга продвижения появится в списке применённых, а если нет — попробуйте оформить её снова.
 *
 */
export const applyVas = <ThrowOnError extends boolean = false>(
  options: Options<ApplyVasData, ThrowOnError>
) => {
  return (options.client ?? client).put<ApplyVasResponses, ApplyVasErrors, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/core/v2/items/{itemId}/vas/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Получение статистики по списку объявлений
 * Получение счетчиков по переданному списку объявлений пользователя.
 *
 * **Внимание:** в запросе может быть передано не более 200 идентификаторов объявлений.
 *
 * **Внимание:** глубина такого запроса ограничена 270 днями.
 *
 * ### Счетчики
 * * ~~views - общее число просмотров объявления;~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqViews.
 * * uniqViews - число уникальных пользователей, просмотревших объявление;
 * * ~~contacts - число контактов [1];~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqContacts.
 * * uniqContacts - число уникальных пользователей, совершивших контакты [1];
 * * ~~favorites - число добавлений объявления в "избранное";~~ __DEPRECATED (будет удалено в апреле 2021 г.).__ Используйте поле uniqFavorites.
 * * uniqFavorites - число уникальных пользователей, добавивших объявление в "избранное".
 *
 * ### Группировка счетчиков
 * Счетчики могут быть сгруппированы [2] по:
 * * дням;
 * * неделям - в поле `date` соответствующей структуры будет первый день недели;
 * * месяцам - в поле `date` соответствующей структуры будет первый день месяца.
 *
 * #### Период группировки
 * Период группировки передается в теле запроса в поле `periodGrouping`. Доступные значения этого поля:
 * * "day" (по умолчанию) - без группировки;
 * * "week" - суммирование счетчиков за неделю;
 * * "month" - суммирование счетчиков за месяц.
 *
 * ### Примечания
 * * [1]: Под контактом понимаются: запросы телефона продавца, начатый чат с продавцом по конкретному объявлению, отклик на резюме и пр.
 * * [2]: Группировка уникальных пользователей происходит только в рамках одного дня.
 *
 */
export const itemStatsShallow = <ThrowOnError extends boolean = false>(
  options: Options<ItemStatsShallowData, ThrowOnError>
) => {
  return (options.client ?? client).post<
    ItemStatsShallowResponses,
    ItemStatsShallowErrors,
    ThrowOnError
  >({
    responseTransformer: itemStatsShallowResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/stats/v1/accounts/{user_id}/items',
    ...options
  })
}

/**
 * Получение статистических показателей по профилю
 * Получение статистических показателей по профилю.
 * ### Группировки показателей
 * Используйте группировки, чтобы получать конкретную статистику.  Например, можете запросить только общие значения показателей, а если нужны подробности, — значения показателей по каждому объявлению или за определённый период. Доступные группировки:
 *
 * - **totals** — по общему значению показателя за определённый период, без детализации;
 * - **item** — по объявлениям;
 * - **day** — по дням;
 * - **week** — по неделям;
 * - **month** — по месяцам.
 *
 *
 * ### Доступные показатели по объявлениям
 * #### Основные
 *
 * - **views** - Просмотры. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.
 * - **contacts** - Контакты. Количество пользователей, которые посмотрели ваш номер, написали в чат или откликнулись на скидку после рассылки. Несколько контактов за сутки от одного пользователя считаются как один.
 * - **contactsShowPhone** - Посмотрели телефон. Количество пользователей, которые посмотрели ваш телефон или нажали «Позвонить». Несколько таких действий за сутки от одного пользователя считаются как один.
 * - **contactsMessenger** - Написали в чат. Количество пользователей, которые написали вам. Несколько чатов за сутки от одного пользователя считаются как один.
 * - **contactsShowPhoneAndMessenger** - Посмотрели телефон и написали в чат. Количество пользователей, которые и посмотрели ваш телефон, и написали в чат. Несколько таких действий за сутки от одного пользователя считаются как один.
 * - **contactsSbcDiscount** - Откликнулись на скидку в чате. Количество пользователей, которые приняли ваше спецпредложение после рассылки.
 * - **viewsToContactsConversion** - Конверсия из просмотров в контакты. Процент пользователей, которые после перехода в объявление посмотрели ваш телефон или написали в чат.
 * - **favorites** - Добавили в избранное. Сколько раз объявление добавили в избранное.
 * - **averageViewCost** - Средняя цена просмотра. Расходы на размещение и продвижение объявлений делятся на число просмотров.
 * - **averageContactCost** - Средняя цена контакта. Расходы на размещение и продвижение объявлений делятся на число контактов.
 * - **impressions** - Показы. Сколько раз объявление показывалось в результатах поиска и рекомендациях. Несколько показов за сутки одному пользователю считаются как один.
 * - **impressionsToViewsConversion** - Конверсия из показов в просмотры. Процент пользователей, которые перешли в объявление после того, как оно показалось в результатах поиска и рекомендациях.
 *
 *
 * #### Целевые действия
 *
 * - **clickPackages**	- Целевые просмотры. Просмотры, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).
 * - **jobContacts** - Отклики на вакансии. Отклики, которые оплачены из тарифа и считаются целевыми [по правилам Авито](https://www.avito.ru/legal/rules/paid_services/cost-per-action/#clicks).
 *
 *
 * #### Заказы с Авито Доставкой
 *
 * - **viewsToOrderedItemsConversion** - Конверсия из просмотров в заказанные товары. Процент пользователей, которые после перехода в объявление заказали товар.
 * - **orderedItems** - Заказано товаров. Количество товаров, которые заказали с Авито Доставкой.
 * - **orderedItemsPrice** - Стоимость заказанных товаров в копейках. Общая стоимость заказов. Это сумма, которую вы получите на руки, если клиенты примут заказы.
 * - **deliveredItems** - Доставлено товаров. Количество товаров, которые заказали с Авито Доставкой и уже приняли.
 * - **deliveredItemsPrice** - Стоимость доставленных товаров в копейках. Общая стоимость заказов, которые покупатели приняли. Это сумма, которую вы получаете на руки.
 *
 *
 * #### Посуточная аренда
 *
 * - **bookingPlacedCount** - Получено заявок. Общее количество заявок на бронирование
 * - **bookingPlacedPrice** - Стоимость полученных заявок в копейках. Общая стоимость бронирований. Это сумма, которую вы получите на руки, если гости заселятся.
 * - **bookingApprovedCount** - Подтверждено заявок. Количество заявок на бронирование, которые вы подтвердили.
 * - **bookingApprovedPrice** - Стоимость подтвержденных заявок в копейках. Общая стоимость бронирований, которые вы подтвердили. Это сумма, которую вы получите на руки, если гости заселятся.
 * - **bookingAcceptedCount** - Заявки с заселением. Количество бронирований, по которым заселились гости. Заселение засчитывается в 15:00 по Москве на следующий день после заезда.
 * - **bookingAcceptedPrice** - Стоимость заявок с заселением в копейках. Общая стоимость бронирований, по которым заселились гости. Это сумма, которую вы получаете на руки.
 *
 *
 * #### Расходы
 *
 * - **allSpending** - Все расходы в копейках. Сколько всего денег и бонусов вы потратили на объявления.
 * - **spending** - Расходы на объявления в копейках. Сколько денег вы потратили на размещение, продвижение, целевые действия и комиссию.
 * - **presenceSpending** - Расходы на размещение и целевые действия в копейках. Сколько денег вы потратили на размещения и целевые действия — просмотры, чаты, звонки и отклики.
 * - **promoSpending** - Расходы на продвижение в копейках. Сколько денег вы потратили на продвижение и на услуги, которые влияют на внешний вид объявления.
 * - **restSpending** - Остальные расходы в копейках. Сколько денег вы потратили на чат-ботов и услуги, которые система не смогла распознать.
 * - **commission** - Комиссия в копейках. Какую комиссию вы заплатили за заказы с Авито Доставкой, которые приняли покупатели, а также за бронирования жилья.
 * - **spendingBonus** - Списано бонусов на объявления. Сколько бонусов вы потратили на размещение, продвижение, целевые действия и комиссию.
 *
 *
 * #### Количество объявлений за период
 *
 * - **activeItems** - Активные объявления. Объявления, которые прошли проверку и появились в поиске.
 * - **newActiveItems** - Новые и опубликованные заново объявления. Сколько объявлений опубликовано впервые или повторно.
 * - **oldActiveItems** - Активны с прошлого периода. Сколько объявлений остаются опубликованными с предыдущего периода.
 *
 *
 * ### Примечания
 *
 * * Из ручки возвращается не более чем по 1000 сущностей. Вы можете использовать поля запроса limit и offset для регулировки выбранного диапазона.
 * * Глубина данных статистики такого запроса ограничена 270 днями.
 * * В случае недоступности метрики для пользователя она не приходит в ответе.
 * * Система позволяет делать не более одного запроса в минуту на данный метод.
 *
 */
export const itemAnalytics = <ThrowOnError extends boolean = false>(
  options: Options<ItemAnalyticsData, ThrowOnError>
) => {
  return (options.client ?? client).post<ItemAnalyticsResponses, ItemAnalyticsErrors, ThrowOnError>(
    {
      security: [
        {
          scheme: 'bearer',
          type: 'http'
        },
        {
          scheme: 'bearer',
          type: 'http'
        }
      ],
      url: '/stats/v2/accounts/{user_id}/items',
      ...options
    }
  )
}
