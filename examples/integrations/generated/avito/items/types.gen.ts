// This file is auto-generated by @hey-api/openapi-ts

export type AnalyticsRequest = {
  /**
   * Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику
   */
  dateFrom: Date
  /**
   * Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику
   */
  dateTo: Date
  /**
   * Набор ограничений, по которым нужно отфильтровать данные
   */
  filter?: {
    /**
     * Идентификаторы категорий</br> [ Справочник идентификаторов категорий ](https://www.avito.st/s/openapi/catalog-categories.xml)
     */
    categoryIDs?: Array<number> | null
    /**
     * Идентификаторы сотрудников</br> [ Метод получения идентификаторов сотрудников ](https://developers.avito.ru/api-catalog/accounts-hierarchy/documentation#operation/getEmployeesV1)
     */
    employeeIDs?: Array<number> | null
  } | null
  grouping: Groupings
  /**
   * Инструмент пагинации для ограничения количества сущностей в response;
   */
  limit: number | null
  /**
   * Набор доступных показателей, которые должны присутствовать в ответе
   */
  metrics: Array<string>
  /**
   * инструмент пагинации или смещение, с которого начинается выборка данных;
   */
  offset: number | null
  /**
   * Сортировка по заданному показателю
   */
  sort?: {
    /**
     * Показатель статистики, по которому нужно отсортировать;
     */
    key: string
    /**
     * Порядок сортировки (asc, desc);
     */
    order: 'asc' | 'desc'
  } | null
}

export type AnalyticsResponse = {
  result?: {
    dataTotalCount?: number
    groupings?: Array<{
      id?: number
      metrics?: Array<{
        slug: string
        value: number
      }>
      type?: Groupings
    }>
    timestamp?: string
  }
}

export type ApplyVasResp = {
  /**
   * Уникальный идентификатор операции покупки
   */
  operationId: number
}

export type CallsStatsDay = {
  /**
   * Отвеченные звонки
   */
  answered?: number
  /**
   * Звонки всего
   */
  calls?: number
  /**
   * Дата (YYYY-MM-DD)
   */
  date?: string
  /**
   * Новые звонки
   */
  new?: number
  /**
   * Новые и одновременно отвеченные звонки
   */
  newAnswered?: number
}

export type CallsStatsItem = {
  /**
   * Массив статистики звонков объявления в разрезе дней
   */
  days?: Array<CallsStatsDay>
  /**
   * Идентификатор сотрудника в сервисе иерархии аккаунтов (0 означает, что звонок не аттрибуцирован до сотрудника)
   */
  employeeId: number
  /**
   * Идентификатор объявления (0 означает, что звонок не аттрибуцирован до объявления)
   */
  itemId: number
}

export type CallsStatsRequest = {
  /**
   * Начальная дата периода (YYYY-MM-DD)
   */
  dateFrom: string
  /**
   * Конечная дата периода (YYYY-MM-DD)
   */
  dateTo: string
  /**
   * Идентификаторы объявлений
   */
  itemIds?: Array<number>
}

export type CallsStatsResponse = {
  result?: {
    /**
     * Массив статистики по объявлениям
     */
    items: Array<CallsStatsItem>
  }
}

/**
 * Список идентификаторов, которые не удалось обработать по разным причинам (например, они не принадлежат текущему пользователю)
 */
export type ErrorItemsVas = Array<number>

export type ErrorResponse = {
  error?: {
    code: number
    message: string
  }
}

export type FieldError = {
  /**
   * Код ошибки
   */
  code: string
  /**
   * Описание ошибки
   */
  message: string
}

export const Groupings = {
  DAY: 'day',
  WEEK: 'week',
  MONTH: 'month',
  ITEM: 'item',
  TOTALS: 'totals'
} as const

export type Groupings = (typeof Groupings)[keyof typeof Groupings]

export type InfoVas = {
  /**
   * Дата завершения услуги
   */
  finish_time?: Date | null
  /**
   * Информация о следующих применениях услуги
   */
  schedule?: Array<Date> | null
  /**
   * Идентификатор услуги
   */
  vas_id?: 'vip' | 'highlight' | 'pushup' | 'premium' | 'xl'
}

export type ItemInfoAvito = {
  /**
   * [Идентификатор объявления](https://autoload.avito.ru/format/realty/#Id) из файла автозагрузки
   */
  autoload_item_id?: string | null
  /**
   * Дата завершения объявления
   */
  finish_time?: Date | null
  /**
   * Дата создания объявления
   */
  start_time?: Date | null
  /**
   * Статус объявления на сайте
   */
  status?: 'active' | 'removed' | 'old' | 'blocked' | 'rejected' | 'not_found' | 'another_user'
  /**
   * URL-адрес объявления
   */
  url?: string | null
  /**
   * Список примененных платных услуг
   */
  vas?: Array<InfoVas> | null
}

export type ItemVasPricesResp = {
  /**
   * Идентификатор объявления на сайте
   */
  itemId?: number
  stickers?: Array<StickerResp>
  vas: Array<VasResp>
}

export type ItemsInfoWithCategoryAvito = {
  meta?: {
    /**
     * Номер страницы
     */
    page?: number
    /**
     * Количество записей на странице
     */
    per_page?: number
  }
  resources?: Array<{
    /**
     * Адрес объявления
     */
    address?: string
    category?: {
      /**
       * Идентификатор категории
       */
      id?: number
      /**
       * Наименование категории
       */
      name?: string
    }
    /**
     * Идентификатор объявления
     */
    id?: number
    /**
     * Цена объявления (null значение означает, что цена не указана)
     */
    price?: number | null
    /**
     * Статус объявления на сайте
     */
    status?: 'active' | 'removed' | 'old' | 'blocked' | 'rejected'
    /**
     * Наименование объявления
     */
    title?: string
    /**
     * URL-адрес объявления
     */
    url?: string | null
  }>
}

export type StatisticsCounters = Array<{
  /**
   * Идентификатор объявления
   */
  itemId?: bigint
  stats?: Array<{
    /**
     * __DEPRECATED (будет удалено в апреле 2021 г.).__
     * __Используйте поле uniqContacts.__
     * Запросы контактов объявления.
     *
     * @deprecated
     */
    contacts?: number
    /**
     * Дата (в формате YYYY-MM-DD), за которую посчитаны статистические счетчики. Для группировок по периодам - дата начала периода.
     */
    date: Date
    /**
     * __DEPRECATED (будет удалено в апреле 2021 г.).__ __Используйте поле uniqFavorites.__ Добавления объявления в избранное
     * @deprecated
     */
    favorites?: number
    /**
     * Уникальные пользователи, запрашивавшие контакты объявления
     */
    uniqContacts?: number
    /**
     * Уникальные пользователи, добавившие объявление в избранное
     */
    uniqFavorites?: number
    /**
     * Уникальные пользователи, просматривавшие объявления
     */
    uniqViews?: number
    /**
     * __DEPRECATED (будет удалено в апреле 2021 г.).__
     * __Используйте поле uniqViews.__
     * Просмотры объявления.
     *
     * @deprecated
     */
    views?: number
  }>
}>

/**
 * Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику
 */
export type StatisticsDateFrom = string

/**
 * Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику
 */
export type StatisticsDateTo = string

/**
 * Набор счетчиков, которые должны присутствовать в ответе
 */
export type StatisticsFields = Array<
  'views' | 'uniqViews' | 'contacts' | 'uniqContacts' | 'favorites' | 'uniqFavorites'
>

/**
 * Набор идентификаторов объявлений на сайте
 */
export type StatisticsItemIds = Array<number>

/**
 * Период группировки
 */
export const StatisticsPeriodGrouping = {
  DAY: 'day',
  WEEK: 'week',
  MONTH: 'month'
} as const

/**
 * Период группировки
 */
export type StatisticsPeriodGrouping =
  (typeof StatisticsPeriodGrouping)[keyof typeof StatisticsPeriodGrouping]

export type StatisticsResponse = {
  errors?: {
    [key: string]: unknown
  }
  /**
   * Статистические счетчики объявления
   */
  result?: {
    items?: StatisticsCounters
  }
}

export type StatisticsShallowRequestBody = {
  dateFrom: StatisticsDateFrom
  dateTo: StatisticsDateTo
  fields?: StatisticsFields
  itemIds: StatisticsItemIds
  periodGrouping?: StatisticsPeriodGrouping
}

/**
 * Информация о значках для переданного списка объявлений
 */
export type StickerResp = {
  /**
   * Описание значка
   */
  description: string
  /**
   * Идентификатор значка
   */
  id: number
  /**
   * Название значка
   */
  title: string
}

export type UpdatePriceRequest = {
  /**
   * Цена
   */
  price: number
}

export type UpdatePriceResponse = {
  result: {
    success?: boolean
  }
}

export type VasAmountAvito = {
  /**
   * Сумма списания за применение услуги или пакета
   */
  amount?: number
}

export type VasApplyAvito = {
  /**
   * Сумма списания за применение услуги
   */
  amount?: number
  vas?: InfoVas
}

export type VasPricesResp = Array<ItemVasPricesResp>

/**
 * Информация об услугах и пакетах дополнительных услуг для переданного списка объявлений
 */
export type VasResp = {
  /**
   * Цена со скидкой
   */
  price: number
  /**
   * Цена до применения скидки
   */
  priceOld: number
  /**
   * Идентификатор услуги или пакета услуг
   */
  slug: string
}

export type AuthError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type BadRequestError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type ItemIdsRequestBody = {
  /**
   * Набор идентификаторов объявлений на сайте
   */
  item_ids: Array<number>
}

export type NotFoundError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type PackageIdRequestBodyV2 = {
  /**
   * Идентификатор пакета услуг, возможные варианты значения:
   * - `x2_1` - применение пакета До 2 раз больше просмотров на 1 день
   * - `x2_7` - применение пакета До 2 раз больше просмотров на 7 дней
   * - `x5_1` - применение пакета До 5 раз больше просмотров на 1 день
   * - `x5_7` - применение пакета До 5 раз больше просмотров на 7 дней
   * - `x10_1` - применение пакета До 10 раз больше просмотров на 1 день
   * - `x10_7` - применение пакета До 10 раз больше просмотров на 7 дней
   *
   * В некоторых регионах и категориях также доступны дополнительные варианты:
   * - `x15_1` - применение пакета До 15 раз больше просмотров на 1 день
   * - `x15_7` - применение пакета До 15 раз больше просмотров на 7 дней
   * - `x20_1` - применение пакета До 20 раз больше просмотров на 1 день
   * - `x20_7` - применение пакета До 20 раз больше просмотров на 7 дней
   *
   * Если попытаться применить эти пакеты в недоступных для них регионе и категории, оплата не пройдёт.
   *
   */
  package_id:
    | 'x2_1'
    | 'x2_7'
    | 'x5_1'
    | 'x5_7'
    | 'x10_1'
    | 'x10_7'
    | 'x15_1'
    | 'x15_7'
    | 'x20_1'
    | 'x20_7'
}

export type PricesItemIdsRequestBody = {
  /**
   * Набор идентификаторов объявлений на сайте
   */
  itemIds: Array<number>
}

export type ServiceError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Описание ошибки
     */
    message: string
  }
}

export type ServiceUnavailableError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Описание ошибки
     */
    message: string
  }
}

export type TooManyRequests = {
  [key: string]: unknown
}

export type ValidatingError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Информация об ошибке валидации параметров в формате ключ-значение
     */
    fields?: {
      [key: string]: unknown
    } | null
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type VasIdRequestBody = {
  /**
   * Идентификатор услуги, возможные его варианты значения:
   * - `highlight` — [выделение объявления](https://support.avito.ru/articles/200026858)
   * - `xl` – [XL-объявление](https://support.avito.ru/articles/685)
   *
   */
  vas_id: 'highlight' | 'xl'
}

/**
 * Тип данных запроса
 */
export const ApplicationJsonHeader = {
  APPLICATION_JSON: 'application/json'
} as const

/**
 * Тип данных запроса
 */
export type ApplicationJsonHeader =
  (typeof ApplicationJsonHeader)[keyof typeof ApplicationJsonHeader]

/**
 * Токен для авторизации
 */
export type AuthHeader = string

/**
 * Идентификатор чата (клиента)
 */
export type ChatId = string

export type ItemIds = string

/**
 * Количество сообщений на странице (положительное число больше 0 и меньше 100)
 */
export type Limit = number

/**
 * Идентификатор сообщения
 */
export type MessageId = string

export type Offset = number

/**
 * Номер страницы
 */
export type Page = number

/**
 * Идентификатор объявления на сайте
 */
export type PathItemId = bigint

/**
 * Номер пользователя в Личном кабинете Авито
 */
export type PathUserId = bigint

/**
 * Идентификатор вакансии на сайте
 */
export type PathVacancyId = bigint

/**
 * Количество ресурсов на страницу
 */
export type PerPage = number

export type UnreadOnly = boolean

/**
 * Идентификатор пользователя (клиента)
 */
export type UserId = bigint

export type VasPricesData = {
  /**
   * Набор идентификаторов объявлений на сайте
   */
  body?: PricesItemIdsRequestBody
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path: {
    /**
     * Номер пользователя в Личном кабинете Авито
     */
    user_id: bigint
  }
  query?: never
  url: '/core/v1/accounts/{userId}/vas/prices'
}

export type VasPricesErrors = {
  /**
   * Информация об ошибке
   */
  default: ValidatingError
}

export type VasPricesError = VasPricesErrors[keyof VasPricesErrors]

export type VasPricesResponses = {
  /**
   * Успешный ответ
   */
  200: VasPricesResp | BadRequestError | AuthError
}

export type VasPricesResponse = VasPricesResponses[keyof VasPricesResponses]

export type PostCallsStatsData = {
  body: CallsStatsRequest
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
    /**
     * Тип данных запроса
     */
    'Content-Type': 'application/json'
  }
  path: {
    /**
     * Номер пользователя в Личном кабинете Авито
     */
    user_id: bigint
  }
  query?: never
  url: '/core/v1/accounts/{user_id}/calls/stats/'
}

export type PostCallsStatsErrors = {
  /**
   * Неверный запрос
   */
  400: BadRequestError
  /**
   * Требуется аутентификация
   */
  401: AuthError
  /**
   * Неверный user_id в запросе
   */
  404: NotFoundError
  /**
   * Внутренняя ошибка метода API
   */
  500: ServiceError
  /**
   * Метод API временно недоступен
   */
  503: ServiceUnavailableError
}

export type PostCallsStatsError = PostCallsStatsErrors[keyof PostCallsStatsErrors]

export type PostCallsStatsResponses = {
  /**
   * Успешный ответ
   */
  200: CallsStatsResponse
}

export type PostCallsStatsResponse = PostCallsStatsResponses[keyof PostCallsStatsResponses]

export type GetItemInfoData = {
  body?: never
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path: {
    /**
     * Номер пользователя в Личном кабинете Авито
     */
    user_id: bigint
    /**
     * Идентификатор объявления на сайте
     */
    item_id: bigint
  }
  query?: never
  url: '/core/v1/accounts/{user_id}/items/{item_id}/'
}

export type GetItemInfoErrors = {
  /**
   * Превышено допустимое количество запросов
   */
  429: TooManyRequests
  /**
   * Информация об ошибке
   */
  default: FieldError
}

export type GetItemInfoError = GetItemInfoErrors[keyof GetItemInfoErrors]

export type GetItemInfoResponses = {
  /**
   * Успешный ответ
   */
  200: ItemInfoAvito
}

export type GetItemInfoResponse = GetItemInfoResponses[keyof GetItemInfoResponses]

export type PutItemVasData = {
  body?: VasIdRequestBody
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path: {
    /**
     * Номер пользователя в Личном кабинете Авито
     */
    user_id: bigint
    /**
     * Идентификатор объявления на сайте
     */
    item_id: bigint
  }
  query?: never
  url: '/core/v1/accounts/{user_id}/items/{item_id}/vas'
}

export type PutItemVasErrors = {
  /**
   * Информация об ошибке
   */
  default: ValidatingError
}

export type PutItemVasError = PutItemVasErrors[keyof PutItemVasErrors]

export type PutItemVasResponses = {
  /**
   * Успешный ответ
   */
  200: VasApplyAvito
}

export type PutItemVasResponse = PutItemVasResponses[keyof PutItemVasResponses]

export type GetItemsInfoData = {
  body?: never
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path?: never
  query?: {
    /**
     * Количество записей на странице (целое число больше 0 и меньше 100)
     */
    per_page?: number
    /**
     * Номер страницы (целое число больше 0)
     */
    page?: number
    /**
     * Статус объявления на сайте (можно указать несколько значений через запятую)
     */
    status?: 'active' | 'removed' | 'old' | 'blocked' | 'rejected'
    /**
     * Фильтр больше либо равно по дате обновления/редактирования объявления в формате YYYY-MM-DD
     */
    updatedAtFrom?: string
    /**
     * Идентификатор категории объявления</br> см. возможные варианты категорий в [ справочнике ](https://www.avito.st/s/openapi/catalog-categories.xml)
     *
     */
    category?: number
  }
  url: '/core/v1/items'
}

export type GetItemsInfoErrors = {
  /**
   * Информация об ошибке
   */
  default: FieldError
}

export type GetItemsInfoError = GetItemsInfoErrors[keyof GetItemsInfoErrors]

export type GetItemsInfoResponses = {
  /**
   * Успешный ответ
   */
  200: ItemsInfoWithCategoryAvito
}

export type GetItemsInfoResponse = GetItemsInfoResponses[keyof GetItemsInfoResponses]

export type UpdatePriceData = {
  /**
   * Набор параметров в теле запроса.
   */
  body?: UpdatePriceRequest
  path: {
    /**
     * Идентификатор объявления на сайте
     */
    item_id: bigint
  }
  query?: never
  url: '/core/v1/items/{item_id}/update_price'
}

export type UpdatePriceErrors = {
  /**
   * Неверный запрос
   */
  400: BadRequestError
  /**
   * Требуется аутентификация
   */
  401: AuthError
  /**
   * Неверный user_id в запросе
   */
  404: NotFoundError
  /**
   * Превышено количество запросов
   */
  429: TooManyRequests
}

export type UpdatePriceError = UpdatePriceErrors[keyof UpdatePriceErrors]

export type UpdatePriceResponses = {
  /**
   * Успешный ответ
   */
  200: UpdatePriceResponse
}

export type UpdatePriceResponse2 = UpdatePriceResponses[keyof UpdatePriceResponses]

export type PutItemVasPackageV2Data = {
  body?: PackageIdRequestBodyV2
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path: {
    /**
     * Номер пользователя в Личном кабинете Авито
     */
    user_id: bigint
    /**
     * Идентификатор объявления на сайте
     */
    item_id: bigint
  }
  query?: never
  url: '/core/v2/accounts/{user_id}/items/{item_id}/vas_packages'
}

export type PutItemVasPackageV2Errors = {
  /**
   * Информация об ошибке
   */
  default: ValidatingError
}

export type PutItemVasPackageV2Error = PutItemVasPackageV2Errors[keyof PutItemVasPackageV2Errors]

export type PutItemVasPackageV2Responses = {
  /**
   * Успешный ответ
   */
  200: VasAmountAvito
}

export type PutItemVasPackageV2Response =
  PutItemVasPackageV2Responses[keyof PutItemVasPackageV2Responses]

export type ApplyVasData = {
  body?: {
    /**
     * Список идентификаторов услуг
     */
    slugs: Array<string>
    /**
     * Список значков
     */
    stickers?: Array<number>
  }
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
  }
  path: {
    /**
     * Идентификатор объявления на сайте
     */
    item_id: bigint
  }
  query?: never
  url: '/core/v2/items/{itemId}/vas/'
}

export type ApplyVasErrors = {
  /**
   * Ответ с ошибкой
   */
  500: {
    code: 1000 | 1001 | 1002 | 1003 | 1004 | 1005 | 1006 | 1007 | 1008 | 1009 | 1010 | 1011
  }
}

export type ApplyVasError = ApplyVasErrors[keyof ApplyVasErrors]

export type ApplyVasResponses = {
  /**
   * Успешный ответ
   */
  200: {
    [key: string]: ApplyVasResp
  }
}

export type ApplyVasResponse = ApplyVasResponses[keyof ApplyVasResponses]

export type ItemStatsShallowData = {
  /**
   * Набор параметров в теле запроса.
   */
  body?: StatisticsShallowRequestBody
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
    /**
     * Тип данных запроса
     */
    'Content-Type': 'application/json'
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query?: never
  url: '/stats/v1/accounts/{user_id}/items'
}

export type ItemStatsShallowErrors = {
  /**
   * Неверный запрос
   */
  400: BadRequestError
  /**
   * Требуется аутентификация
   */
  401: AuthError
  /**
   * Неверный user_id в запросе
   */
  404: NotFoundError
  /**
   * Внутренняя ошибка метода API
   */
  500: ServiceError
  /**
   * Метод API временно недоступен
   */
  503: ServiceUnavailableError
}

export type ItemStatsShallowError = ItemStatsShallowErrors[keyof ItemStatsShallowErrors]

export type ItemStatsShallowResponses = {
  /**
   * Успешный ответ
   */
  200: StatisticsResponse
}

export type ItemStatsShallowResponse = ItemStatsShallowResponses[keyof ItemStatsShallowResponses]

export type ItemAnalyticsData = {
  body: AnalyticsRequest
  headers: {
    /**
     * Токен для авторизации
     */
    Authorization: string
    /**
     * Тип данных запроса
     */
    'Content-Type': 'application/json'
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query?: never
  url: '/stats/v2/accounts/{user_id}/items'
}

export type ItemAnalyticsErrors = {
  /**
   * Неверный запрос
   */
  400: ErrorResponse
  /**
   * Требуется аутентификация
   */
  401: ErrorResponse
  /**
   * Доступ запрещен
   */
  403: ErrorResponse
  /**
   * Слишком много запросов
   */
  429: ErrorResponse
  /**
   * Error response
   */
  500: ErrorResponse
}

export type ItemAnalyticsError = ItemAnalyticsErrors[keyof ItemAnalyticsErrors]

export type ItemAnalyticsResponses = {
  /**
   * Successful response
   */
  200: AnalyticsResponse
}

export type ItemAnalyticsResponse = ItemAnalyticsResponses[keyof ItemAnalyticsResponses]

export type ClientOptions = {
  baseUrl: 'https://api.avito.ru/' | (string & {})
}
