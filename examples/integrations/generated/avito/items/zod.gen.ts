// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod'

export const zGroupings = z.enum(['day', 'week', 'month', 'item', 'totals'])

export const zAnalyticsRequest = z.object({
  dateFrom: z.iso.date(),
  dateTo: z.iso.date(),
  filter: z.optional(
    z.union([
      z.object({
        categoryIDs: z.optional(z.union([z.array(z.int()), z.null()])),
        employeeIDs: z.optional(z.union([z.array(z.int()), z.null()]))
      }),
      z.null()
    ])
  ),
  grouping: zGroupings,
  limit: z.union([z.int().gte(0).lte(1000), z.null()]),
  metrics: z.array(z.string()),
  offset: z.union([z.int().gte(0), z.null()]),
  sort: z.optional(
    z.union([
      z.object({
        key: z.string(),
        order: z.enum(['asc', 'desc'])
      }),
      z.null()
    ])
  )
})

export const zAnalyticsResponse = z.object({
  result: z.optional(
    z.object({
      dataTotalCount: z.optional(z.int()),
      groupings: z.optional(
        z.array(
          z.object({
            id: z.optional(z.int()),
            metrics: z.optional(
              z.array(
                z.object({
                  slug: z.string(),
                  value: z.number()
                })
              )
            ),
            type: z.optional(zGroupings)
          })
        )
      ),
      timestamp: z.optional(z.string())
    })
  )
})

export const zApplyVasResp = z.object({
  operationId: z.int()
})

export const zCallsStatsDay = z.object({
  answered: z.optional(z.int()),
  calls: z.optional(z.int()),
  date: z.optional(z.string()),
  new: z.optional(z.int()),
  newAnswered: z.optional(z.int())
})

export const zCallsStatsItem = z.object({
  days: z.optional(z.array(zCallsStatsDay)),
  employeeId: z.int(),
  itemId: z.int()
})

export const zCallsStatsRequest = z.object({
  dateFrom: z.string(),
  dateTo: z.string(),
  itemIds: z.optional(z.array(z.int()))
})

export const zCallsStatsResponse = z.object({
  result: z.optional(
    z.object({
      items: z.array(zCallsStatsItem)
    })
  )
})

/**
 * Список идентификаторов, которые не удалось обработать по разным причинам (например, они не принадлежат текущему пользователю)
 */
export const zErrorItemsVas = z.array(z.int())

export const zErrorResponse = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zFieldError = z.object({
  code: z.string(),
  message: z.string()
})

export const zInfoVas = z.object({
  finish_time: z.optional(z.union([z.iso.datetime(), z.null()])),
  schedule: z.optional(z.union([z.array(z.iso.datetime()), z.null()])),
  vas_id: z.optional(z.enum(['vip', 'highlight', 'pushup', 'premium', 'xl']))
})

export const zItemInfoAvito = z.object({
  autoload_item_id: z.optional(z.union([z.string(), z.null()])),
  finish_time: z.optional(z.union([z.iso.datetime(), z.null()])),
  start_time: z.optional(z.union([z.iso.datetime(), z.null()])),
  status: z.optional(
    z.enum(['active', 'removed', 'old', 'blocked', 'rejected', 'not_found', 'another_user'])
  ),
  url: z.optional(z.union([z.string(), z.null()])),
  vas: z.optional(z.union([z.array(zInfoVas), z.null()]))
})

/**
 * Информация о значках для переданного списка объявлений
 */
export const zStickerResp = z.object({
  description: z.string(),
  id: z.int(),
  title: z.string()
})

/**
 * Информация об услугах и пакетах дополнительных услуг для переданного списка объявлений
 */
export const zVasResp = z.object({
  price: z.int(),
  priceOld: z.int(),
  slug: z.string()
})

export const zItemVasPricesResp = z.object({
  itemId: z.optional(z.int()),
  stickers: z.optional(z.array(zStickerResp)),
  vas: z.array(zVasResp)
})

export const zItemsInfoWithCategoryAvito = z.object({
  meta: z.optional(
    z.object({
      page: z.optional(z.int()),
      per_page: z.optional(z.int())
    })
  ),
  resources: z.optional(
    z.array(
      z.object({
        address: z.optional(z.string()),
        category: z.optional(
          z.object({
            id: z.optional(z.int()),
            name: z.optional(z.string())
          })
        ),
        id: z.optional(z.int()),
        price: z.optional(z.union([z.int(), z.null()])),
        status: z.optional(z.enum(['active', 'removed', 'old', 'blocked', 'rejected'])),
        title: z.optional(z.string()),
        url: z.optional(z.union([z.string(), z.null()]))
      })
    )
  )
})

export const zStatisticsCounters = z.array(
  z.object({
    itemId: z.optional(z.coerce.bigint()),
    stats: z.optional(
      z.array(
        z.object({
          contacts: z.optional(z.int()),
          date: z.iso.date(),
          favorites: z.optional(z.int()),
          uniqContacts: z.optional(z.int()),
          uniqFavorites: z.optional(z.int()),
          uniqViews: z.optional(z.int()),
          views: z.optional(z.int())
        })
      )
    )
  })
)

/**
 * Дата (в формате YYYY-MM-DD), с которой (включительно) надо получить статистику
 */
export const zStatisticsDateFrom = z.string()

/**
 * Дата (в формате YYYY-MM-DD), по которую (включительно) надо получить статистику
 */
export const zStatisticsDateTo = z.string()

/**
 * Набор счетчиков, которые должны присутствовать в ответе
 */
export const zStatisticsFields = z.array(
  z.enum(['views', 'uniqViews', 'contacts', 'uniqContacts', 'favorites', 'uniqFavorites'])
)

/**
 * Набор идентификаторов объявлений на сайте
 */
export const zStatisticsItemIds = z.array(z.int())

/**
 * Период группировки
 */
export const zStatisticsPeriodGrouping = z.enum(['day', 'week', 'month'])

export const zStatisticsResponse = z.object({
  errors: z.optional(z.record(z.string(), z.unknown())),
  result: z.optional(
    z.object({
      items: z.optional(zStatisticsCounters)
    })
  )
})

export const zStatisticsShallowRequestBody = z.object({
  dateFrom: zStatisticsDateFrom,
  dateTo: zStatisticsDateTo,
  fields: z.optional(zStatisticsFields),
  itemIds: zStatisticsItemIds,
  periodGrouping: z.optional(zStatisticsPeriodGrouping)
})

export const zUpdatePriceRequest = z.object({
  price: z.int()
})

export const zUpdatePriceResponse = z.object({
  result: z.object({
    success: z.optional(z.boolean())
  })
})

export const zVasAmountAvito = z.object({
  amount: z.optional(z.number())
})

export const zVasApplyAvito = z.object({
  amount: z.optional(z.number()),
  vas: z.optional(zInfoVas)
})

export const zVasPricesResp = z.array(zItemVasPricesResp)

export const zAuthError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zBadRequestError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zItemIdsRequestBody = z.object({
  item_ids: z.array(z.int())
})

export const zNotFoundError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zPackageIdRequestBodyV2 = z.object({
  package_id: z.enum([
    'x2_1',
    'x2_7',
    'x5_1',
    'x5_7',
    'x10_1',
    'x10_7',
    'x15_1',
    'x15_7',
    'x20_1',
    'x20_7'
  ])
})

export const zPricesItemIdsRequestBody = z.object({
  itemIds: z.array(z.int())
})

export const zServiceError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zServiceUnavailableError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      message: z.string()
    })
  )
})

export const zTooManyRequests = z.record(z.string(), z.unknown())

export const zValidatingError = z.object({
  error: z.optional(
    z.object({
      code: z.int(),
      fields: z.optional(z.union([z.record(z.string(), z.unknown()), z.null()])),
      message: z.string()
    })
  )
})

export const zVasIdRequestBody = z.object({
  vas_id: z.enum(['highlight', 'xl'])
})

/**
 * Тип данных запроса
 */
export const zApplicationJsonHeader = z.enum(['application/json'])

/**
 * Токен для авторизации
 */
export const zAuthHeader = z.string()

/**
 * Идентификатор чата (клиента)
 */
export const zChatId = z.string()

export const zItemIds = z.string()

/**
 * Количество сообщений на странице (положительное число больше 0 и меньше 100)
 */
export const zLimit = z.int().default(100)

/**
 * Идентификатор сообщения
 */
export const zMessageId = z.string()

export const zOffset = z.int().default(0)

/**
 * Номер страницы
 */
export const zPage = z.int()

/**
 * Идентификатор объявления на сайте
 */
export const zPathItemId = z.coerce.bigint()

/**
 * Номер пользователя в Личном кабинете Авито
 */
export const zPathUserId = z.coerce.bigint()

/**
 * Идентификатор вакансии на сайте
 */
export const zPathVacancyId = z.coerce.bigint()

/**
 * Количество ресурсов на страницу
 */
export const zPerPage = z.int()

export const zUnreadOnly = z.boolean()

/**
 * Идентификатор пользователя (клиента)
 */
export const zUserId = z.coerce.bigint()

export const zVasPricesData = z.object({
  body: z.optional(zPricesItemIdsRequestBody),
  path: z.object({
    user_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zVasPricesResponse = z.union([zVasPricesResp, zBadRequestError, zAuthError])

export const zPostCallsStatsData = z.object({
  body: zCallsStatsRequest,
  path: z.object({
    user_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string(),
    'Content-Type': z.enum(['application/json'])
  })
})

/**
 * Успешный ответ
 */
export const zPostCallsStatsResponse = zCallsStatsResponse

export const zGetItemInfoData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    user_id: z.coerce.bigint(),
    item_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zGetItemInfoResponse = zItemInfoAvito

export const zPutItemVasData = z.object({
  body: z.optional(zVasIdRequestBody),
  path: z.object({
    user_id: z.coerce.bigint(),
    item_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zPutItemVasResponse = zVasApplyAvito

export const zGetItemsInfoData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      per_page: z.optional(z.int()).default(25),
      page: z.optional(z.int()).default(1),
      status: z.optional(z.enum(['active', 'removed', 'old', 'blocked', 'rejected'])),
      updatedAtFrom: z.optional(z.string()),
      category: z.optional(z.int())
    })
  ),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zGetItemsInfoResponse = zItemsInfoWithCategoryAvito

export const zUpdatePriceData = z.object({
  body: z.optional(zUpdatePriceRequest),
  path: z.object({
    item_id: z.coerce.bigint()
  }),
  query: z.optional(z.never())
})

/**
 * Успешный ответ
 */
export const zUpdatePriceResponse2 = zUpdatePriceResponse

export const zPutItemVasPackageV2Data = z.object({
  body: z.optional(zPackageIdRequestBodyV2),
  path: z.object({
    user_id: z.coerce.bigint(),
    item_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zPutItemVasPackageV2Response = zVasAmountAvito

export const zApplyVasData = z.object({
  body: z.optional(
    z.object({
      slugs: z.array(z.string()),
      stickers: z.optional(z.array(z.int()))
    })
  ),
  path: z.object({
    item_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string()
  })
})

/**
 * Успешный ответ
 */
export const zApplyVasResponse = z.record(z.string(), zApplyVasResp)

export const zItemStatsShallowData = z.object({
  body: z.optional(zStatisticsShallowRequestBody),
  path: z.object({
    user_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string(),
    'Content-Type': z.enum(['application/json'])
  })
})

/**
 * Успешный ответ
 */
export const zItemStatsShallowResponse = zStatisticsResponse

export const zItemAnalyticsData = z.object({
  body: zAnalyticsRequest,
  path: z.object({
    user_id: z.coerce.bigint()
  }),
  query: z.optional(z.never()),
  headers: z.object({
    Authorization: z.string(),
    'Content-Type': z.enum(['application/json'])
  })
})

/**
 * Successful response
 */
export const zItemAnalyticsResponse = zAnalyticsResponse
