// This file is auto-generated by @hey-api/openapi-ts

export const ChatSchema = {
  properties: {
    context: {
      properties: {
        type: {
          example: 'item',
          type: 'string'
        },
        value: {
          properties: {
            id: {
              description: 'ID объявления, если чат по объявлению',
              example: 1768287444,
              format: 'int32',
              type: 'integer'
            },
            images: {
              properties: {
                count: {
                  example: 4,
                  format: 'int32',
                  type: 'integer'
                },
                main: {
                  properties: {
                    '140x105': {
                      example: 'https://01-img-staging-proxy.k.avito.ru/140x105/5815183159.jpg',
                      type: 'string'
                    }
                  },
                  type: 'object'
                }
              },
              type: 'object'
            },
            price_string: {
              example: '300 000 ₽',
              type: 'string'
            },
            status_id: {
              example: 10,
              format: 'int32',
              type: 'integer'
            },
            title: {
              example: 'Mazda 3 2008',
              type: 'string'
            },
            url: {
              example: 'https://avito.ru/moskva/avtomobili/mazda_3_2008_1768287444',
              type: 'string'
            },
            user_id: {
              description: 'ID автора объявления, если чат по объявлению',
              example: 141906442,
              format: 'int32',
              type: 'integer'
            }
          },
          type: 'object'
        }
      },
      type: 'object'
    },
    created: {
      example: 1571412836,
      format: 'int32',
      type: 'integer'
    },
    id: {
      type: 'string'
    },
    last_message: {
      properties: {
        author_id: {
          example: 94235311,
          format: 'int32',
          type: 'integer'
        },
        content: {
          properties: {
            link: {
              properties: {
                text: {
                  example: 'habr.com',
                  type: 'string'
                },
                url: {
                  example: 'habr.com',
                  type: 'string'
                }
              },
              type: 'object'
            }
          },
          type: 'object'
        },
        created: {
          example: 1571654040,
          format: 'int32',
          type: 'integer'
        },
        direction: {
          example: 'out',
          type: 'string'
        },
        id: {
          type: 'string'
        },
        type: {
          example: 'link',
          type: 'string'
        }
      },
      type: 'object'
    },
    updated: {
      example: 1571654040,
      format: 'int32',
      type: 'integer'
    },
    users: {
      items: {
        properties: {
          id: {
            example: 94235311,
            format: 'int32',
            type: 'integer'
          },
          name: {
            example: 'Guldan',
            type: 'string'
          },
          public_user_profile: {
            properties: {
              avatar: {
                properties: {
                  default: {
                    example: 'https://www.avito.st/stub_avatars/_/14_256x256.png',
                    type: 'string'
                  },
                  images: {
                    properties: {
                      '128x128': {
                        example: 'https://www.avito.st/stub_avatars/_/14_128x128.png',
                        type: 'string'
                      },
                      '192x192': {
                        example: 'https://www.avito.st/stub_avatars/_/14_192x192.png',
                        type: 'string'
                      },
                      '24x24': {
                        example: 'https://www.avito.st/stub_avatars/_/14_24x24.png',
                        type: 'string'
                      },
                      '256x256': {
                        example: 'https://www.avito.st/stub_avatars/_/14_256x256.png',
                        type: 'string'
                      },
                      '36x36': {
                        example: 'https://www.avito.st/stub_avatars/_/14_36x36.png',
                        type: 'string'
                      },
                      '48x48': {
                        example: 'https://www.avito.st/stub_avatars/_/14_48x48.png',
                        type: 'string'
                      },
                      '64x64': {
                        example: 'https://www.avito.st/stub_avatars/_/14_64x64.png',
                        type: 'string'
                      },
                      '72x72': {
                        example: 'https://www.avito.st/stub_avatars/_/14_72x72.png',
                        type: 'string'
                      },
                      '96x96': {
                        example: 'https://www.avito.st/stub_avatars/_/14_96x96.png',
                        type: 'string'
                      }
                    },
                    type: 'object'
                  }
                },
                type: 'object'
              },
              item_id: {
                example: 1768287444,
                format: 'int32',
                type: 'integer'
              },
              url: {
                example:
                  'https://avito.ru/user/db65c00c946dc404e11f14755465453b/profile?id=1768287444&src=messenger',
                type: 'string'
              },
              user_id: {
                example: 94235311,
                format: 'int32',
                type: 'integer'
              }
            },
            type: 'object'
          }
        },
        type: 'object'
      },
      type: 'array'
    }
  },
  type: 'object'
} as const

export const ChatsSchema = {
  properties: {
    chats: {
      items: {
        $ref: '#/components/schemas/Chat'
      },
      type: 'array'
    }
  },
  type: 'object'
} as const

export const MessageContentSchema = {
  description:
    'Для сообщений типов "appCall" "file" "video" возвращается empty object (данные типы не поддерживаются)',
  properties: {
    call: {
      nullable: true,
      properties: {
        status: {
          enum: ['missed'],
          type: 'string'
        },
        target_user_id: {
          example: 94235311,
          format: 'int64',
          type: 'integer'
        }
      },
      type: 'object'
    },
    flow_id: {
      example: 'flower_167071',
      nullable: true,
      type: 'string'
    },
    image: {
      nullable: true,
      properties: {
        sizes: {
          description:
            'объект ключ-значение, где ключи - строки в формате "ШxВ" (ширина, высота), а значения - ссылки на изображения',
          example: {
            '1280x960':
              'https://img.k.avito.ru/chat/1280x960/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
            '140x105':
              'https://img.k.avito.ru/chat/140x105/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
            '32x32':
              'https://img.k.avito.ru/chat/32x32/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
            '640x480':
              'https://img.k.avito.ru/chat/640x480/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg'
          },
          type: 'object'
        }
      },
      type: 'object'
    },
    item: {
      nullable: true,
      properties: {
        image_url: {
          example: 'https://avito.ru/image_url.webp',
          type: 'string'
        },
        item_url: {
          example: 'https://avito.ru/item_url',
          type: 'string'
        },
        price_string: {
          example: '1 232 323 ₽',
          nullable: true,
          type: 'string'
        },
        title: {
          example: 'Объявление',
          type: 'string'
        }
      },
      type: 'object'
    },
    link: {
      nullable: true,
      properties: {
        preview: {
          nullable: true,
          properties: {
            description: {
              example: 'Лучшие публикации за последние 24 часа',
              type: 'string'
            },
            domain: {
              example: 'habr.com',
              type: 'string'
            },
            images: {
              description:
                'объект ключ-значение, где ключи - строки в формате "ШxВ" (ширина, высота), а значения - ссылки на изображения',
              example: {
                '1280x960':
                  'https://img.k.avito.ru/chat/1280x960/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
                '140x105':
                  'https://img.k.avito.ru/chat/140x105/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
                '32x32':
                  'https://img.k.avito.ru/chat/32x32/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg',
                '640x480':
                  'https://img.k.avito.ru/chat/640x480/5083651369.3e798a9bf88345ae8fe85ff891266b24.jpg'
              },
              nullable: true,
              type: 'object'
            },
            title: {
              example: 'Лучшие публикации за сутки / Хабр',
              type: 'string'
            },
            url: {
              example: 'https://habr.com/ru/',
              type: 'string'
            }
          },
          type: 'object'
        },
        text: {
          example: 'habr.com',
          type: 'string'
        },
        url: {
          example: 'habr.com',
          type: 'string'
        }
      },
      type: 'object'
    },
    location: {
      nullable: true,
      properties: {
        kind: {
          enum: ['house', 'street', 'area', '...'],
          example: 'street',
          type: 'string'
        },
        lat: {
          example: 55.599799,
          format: 'float',
          type: 'number'
        },
        lon: {
          example: 37.603954,
          format: 'float',
          type: 'number'
        },
        text: {
          example: 'Москва, Варшавское шоссе',
          type: 'string'
        },
        title: {
          example: 'Москва, Варшавское шоссе',
          type: 'string'
        }
      },
      type: 'object'
    },
    text: {
      example: 'привет!',
      nullable: true,
      type: 'string'
    },
    voice: {
      nullable: true,
      properties: {
        voice_id: {
          type: 'string'
        }
      },
      type: 'object'
    }
  },
  type: 'object'
} as const

export const MessageQuoteSchema = {
  description: 'цитируемое сообщение',
  properties: {
    author_id: {
      example: 94235311,
      format: 'int64',
      type: 'integer'
    },
    content: {
      $ref: '#/components/schemas/MessageContent'
    },
    created: {
      example: 1571654040,
      format: 'int64',
      type: 'integer'
    },
    id: {
      type: 'string'
    },
    type: {
      enum: ['text', 'image', 'link', 'item', 'location', 'call', 'deleted', 'voice'],
      type: 'string'
    }
  },
  type: 'object'
} as const

export const MessagesSchema = {
  items: {
    properties: {
      author_id: {
        example: 94235311,
        format: 'int64',
        type: 'integer'
      },
      content: {
        $ref: '#/components/schemas/MessageContent'
      },
      created: {
        example: 1571654040,
        format: 'int64',
        type: 'integer'
      },
      direction: {
        enum: ['in', 'out'],
        example: 'out',
        type: 'string'
      },
      id: {
        type: 'string'
      },
      is_read: {
        description: 'прочитано ли сообщение',
        example: true,
        type: 'boolean'
      },
      quote: {
        $ref: '#/components/schemas/MessageQuote'
      },
      read: {
        description: 'timestamp прочтения, если прочитано',
        example: 123,
        nullable: true,
        type: 'integer'
      },
      type: {
        enum: ['text', 'image', 'link', 'item', 'location', 'call', 'deleted', 'voice'],
        type: 'string'
      }
    },
    type: 'object'
  },
  type: 'array'
} as const

export const VoiceFilesSchema = {
  properties: {
    voices_urls: {
      additionalProperties: {
        example: 'https://avito.ru/voice_url',
        format: 'uri',
        type: 'string'
      },
      type: 'object'
    }
  },
  type: 'object'
} as const

export const WebhookMessageSchema = {
  properties: {
    id: {
      example: '68df3c53-2b03-40e2-8a3f-85232e386e1b',
      type: 'string'
    },
    version: {
      example: 'v3.0.0',
      type: 'string'
    },
    timestamp: {
      description: 'timestamp отправки сообщения',
      example: 1745311350,
      type: 'integer'
    },
    payload: {
      properties: {
        type: {
          description: 'Тип события',
          example: 'message',
          type: 'string'
        },
        value: {
          properties: {
            id: {
              example: 'e6e4d654c8177be20f1c332aa33a3817',
              type: 'string'
            },
            chat_id: {
              example: 'u2i-vfm2AigtnbtFB0q_vXjlYQ',
              type: 'string'
            },
            user_id: {
              description: 'id получателя (текущий аккаунт)',
              example: 115665232,
              type: 'integer'
            },
            author_id: {
              description: 'id отправителя (ваш или собеседник)',
              example: 255510721,
              type: 'integer'
            },
            created: {
              description: 'timestamp отправки сообщения',
              example: 1745311350,
              type: 'integer'
            },
            type: {
              description: 'Тип сообщения',
              enum: [
                'text',
                'image',
                'system',
                'item',
                'call',
                'link',
                'location',
                'deleted',
                'appCall',
                'file',
                'video',
                'voice'
              ],
              example: 'text',
              type: 'string'
            },
            chat_type: {
              description: 'Тип чата (u2i - чат по объявлению, u2u - чат по профилю пользователя)',
              enum: ['u2i', 'u2u'],
              example: 'u2i',
              type: 'string'
            },
            content: {
              $ref: '#/components/schemas/MessageContent'
            },
            item_id: {
              description: 'id объявления в u2i-чате по которому пришло сообщение',
              example: 943251642,
              type: 'integer'
            },
            published_at: {
              description: 'Время публикации сообщения в формате ISO 8601',
              example: '2025-04-22T08:42:30Z',
              type: 'string'
            },
            read: {
              description: 'timestamp прочтения, если прочитано',
              example: 123,
              nullable: true,
              type: 'integer'
            }
          },
          type: 'object'
        }
      },
      type: 'object'
    }
  },
  type: 'object'
} as const

export const addBlacklistRequestBodySchema = {
  properties: {
    users: {
      items: {
        properties: {
          context: {
            properties: {
              item_id: {
                format: 'int64',
                type: 'integer'
              },
              reason_id: {
                description:
                  'причина, по которой блокируем пользователя, 1 - спам, 2 - мошенничество, 3 - оскорбления и хамство, 4 - другая причина',
                enum: [1, 2, 3, 4],
                type: 'integer'
              }
            },
            type: 'object'
          },
          user_id: {
            description: 'id пользователя которого хотим заблокировать',
            example: 94235311,
            format: 'int64',
            type: 'integer'
          }
        },
        type: 'object'
      },
      type: 'array'
    }
  },
  type: 'object'
} as const

export const authErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 401,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Unauthorized',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const badRequestErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 400,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Bad Request',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const forbiddenErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 403,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Forbidden',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const notFoundErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 404,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Not found',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const purchasingErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 402,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Payment required',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const sendImageMessageRequestBodySchema = {
  properties: {
    image_id: {
      description: 'Идентификатор загруженного изображения',
      type: 'string'
    }
  },
  required: ['image_id'],
  type: 'object'
} as const

export const sendMessageRequestBodySchema = {
  properties: {
    message: {
      properties: {
        text: {
          description: 'Текст сообщения',
          type: 'string'
        }
      },
      type: 'object'
    },
    type: {
      description: 'Тип сообщения',
      enum: ['text'],
      type: 'string'
    }
  },
  required: ['url'],
  type: 'object'
} as const

export const serviceErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 500,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Описание ошибки',
          example: 'Error while processing request. Please, contact support',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const serviceUnavailableErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 503,
          format: 'int32',
          type: 'integer'
        },
        message: {
          description: 'Описание ошибки',
          example: 'Service temporarily unavailable. Please, contact support',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const validatingErrorSchema = {
  properties: {
    error: {
      properties: {
        code: {
          description: 'Код ошибки',
          example: 400,
          format: 'int32',
          type: 'integer'
        },
        fields: {
          description: 'Информация об ошибке валидации параметров в формате ключ-значение',
          nullable: true,
          type: 'object'
        },
        message: {
          description: 'Сообщение об ошибке',
          example: 'Validation error',
          type: 'string'
        }
      },
      required: ['code', 'message'],
      type: 'object'
    }
  },
  type: 'object'
} as const

export const webhookSubscribeRequestBodySchema = {
  properties: {
    url: {
      description: 'Url на который будут отправляться нотификации',
      type: 'string'
    }
  },
  required: ['url'],
  type: 'object'
} as const
