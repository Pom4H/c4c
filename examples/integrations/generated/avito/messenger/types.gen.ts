// This file is auto-generated by @hey-api/openapi-ts

export type Chat = {
  context?: {
    type?: string
    value?: {
      /**
       * ID объявления, если чат по объявлению
       */
      id?: number
      images?: {
        count?: number
        main?: {
          '140x105'?: string
        }
      }
      price_string?: string
      status_id?: number
      title?: string
      url?: string
      /**
       * ID автора объявления, если чат по объявлению
       */
      user_id?: number
    }
  }
  created?: number
  id?: string
  last_message?: {
    author_id?: number
    content?: {
      link?: {
        text?: string
        url?: string
      }
    }
    created?: number
    direction?: string
    id?: string
    type?: string
  }
  updated?: number
  users?: Array<{
    id?: number
    name?: string
    public_user_profile?: {
      avatar?: {
        default?: string
        images?: {
          '128x128'?: string
          '192x192'?: string
          '24x24'?: string
          '256x256'?: string
          '36x36'?: string
          '48x48'?: string
          '64x64'?: string
          '72x72'?: string
          '96x96'?: string
        }
      }
      item_id?: number
      url?: string
      user_id?: number
    }
  }>
}

export type Chats = {
  chats?: Array<Chat>
}

/**
 * Для сообщений типов "appCall" "file" "video" возвращается empty object (данные типы не поддерживаются)
 */
export type MessageContent = {
  call?: {
    status?: 'missed'
    target_user_id?: bigint
  } | null
  flow_id?: string | null
  image?: {
    /**
     * объект ключ-значение, где ключи - строки в формате "ШxВ" (ширина, высота), а значения - ссылки на изображения
     */
    sizes?: {
      [key: string]: unknown
    }
  } | null
  item?: {
    image_url?: string
    item_url?: string
    price_string?: string | null
    title?: string
  } | null
  link?: {
    preview?: {
      description?: string
      domain?: string
      /**
       * объект ключ-значение, где ключи - строки в формате "ШxВ" (ширина, высота), а значения - ссылки на изображения
       */
      images?: {
        [key: string]: unknown
      } | null
      title?: string
      url?: string
    } | null
    text?: string
    url?: string
  } | null
  location?: {
    kind?: 'house' | 'street' | 'area' | '...'
    lat?: number
    lon?: number
    text?: string
    title?: string
  } | null
  text?: string | null
  voice?: {
    voice_id?: string
  } | null
}

/**
 * цитируемое сообщение
 */
export type MessageQuote = {
  author_id?: bigint
  content?: MessageContent
  created?: bigint
  id?: string
  type?: 'text' | 'image' | 'link' | 'item' | 'location' | 'call' | 'deleted' | 'voice'
}

export type Messages = Array<{
  author_id?: bigint
  content?: MessageContent
  created?: bigint
  direction?: 'in' | 'out'
  id?: string
  /**
   * прочитано ли сообщение
   */
  is_read?: boolean
  quote?: MessageQuote
  /**
   * timestamp прочтения, если прочитано
   */
  read?: number | null
  type?: 'text' | 'image' | 'link' | 'item' | 'location' | 'call' | 'deleted' | 'voice'
}>

export type VoiceFiles = {
  voices_urls?: {
    [key: string]: string
  }
}

export type WebhookMessage = {
  id?: string
  version?: string
  /**
   * timestamp отправки сообщения
   */
  timestamp?: number
  payload?: {
    /**
     * Тип события
     */
    type?: string
    value?: {
      id?: string
      chat_id?: string
      /**
       * id получателя (текущий аккаунт)
       */
      user_id?: number
      /**
       * id отправителя (ваш или собеседник)
       */
      author_id?: number
      /**
       * timestamp отправки сообщения
       */
      created?: number
      /**
       * Тип сообщения
       */
      type?:
        | 'text'
        | 'image'
        | 'system'
        | 'item'
        | 'call'
        | 'link'
        | 'location'
        | 'deleted'
        | 'appCall'
        | 'file'
        | 'video'
        | 'voice'
      /**
       * Тип чата (u2i - чат по объявлению, u2u - чат по профилю пользователя)
       */
      chat_type?: 'u2i' | 'u2u'
      content?: MessageContent
      /**
       * id объявления в u2i-чате по которому пришло сообщение
       */
      item_id?: number
      /**
       * Время публикации сообщения в формате ISO 8601
       */
      published_at?: string
      /**
       * timestamp прочтения, если прочитано
       */
      read?: number | null
    }
  }
}

export type AddBlacklistRequestBody = {
  users?: Array<{
    context?: {
      item_id?: bigint
      /**
       * причина, по которой блокируем пользователя, 1 - спам, 2 - мошенничество, 3 - оскорбления и хамство, 4 - другая причина
       */
      reason_id?: 1 | 2 | 3 | 4
    }
    /**
     * id пользователя которого хотим заблокировать
     */
    user_id?: bigint
  }>
}

export type AuthError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type BadRequestError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type ForbiddenError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type NotFoundError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type PurchasingError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type SendImageMessageRequestBody = {
  /**
   * Идентификатор загруженного изображения
   */
  image_id: string
}

export type SendMessageRequestBody = {
  message?: {
    /**
     * Текст сообщения
     */
    text?: string
  }
  /**
   * Тип сообщения
   */
  type?: 'text'
}

export type ServiceError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Описание ошибки
     */
    message: string
  }
}

export type ServiceUnavailableError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Описание ошибки
     */
    message: string
  }
}

export type ValidatingError = {
  error?: {
    /**
     * Код ошибки
     */
    code: number
    /**
     * Информация об ошибке валидации параметров в формате ключ-значение
     */
    fields?: {
      [key: string]: unknown
    } | null
    /**
     * Сообщение об ошибке
     */
    message: string
  }
}

export type WebhookSubscribeRequestBody = {
  /**
   * Url на который будут отправляться нотификации
   */
  url: string
}

/**
 * Токен для авторизации
 */
export type AuthHeader = string

/**
 * Идентификатор чата (клиента)
 */
export type ChatId = string

/**
 * Фильтрация возвращаемых чатов.
 * * u2i — чаты по объявлениям;
 * * u2u — чаты между пользователями;
 *
 */
export type ChatTypes = Array<'u2i' | 'u2u'>

/**
 * Идентификатор загруженного изображения
 */
export type ImageId = string

/**
 * Получение чатов только по объявлениям с указанными item_id
 */
export type ItemIds = Array<bigint>

/**
 * Количество сообщений / чатов для запроса
 */
export type Limit = number

/**
 * Идентификатор сообщения
 */
export type MessageId = string

/**
 * Сдвиг сообщений / чатов для запроса
 */
export type Offset = number

/**
 * При значении true метод возвращает только непрочитанные чаты
 */
export type UnreadOnly = boolean

/**
 * Идентификатор пользователя (клиента)
 */
export type UserId = bigint

/**
 * Получение файлов голосовых сообщений с указанными voice_id
 */
export type VoiceIds = Array<string>

export type PostSendMessageData = {
  /**
   * Отправление сообщения
   */
  body?: SendMessageRequestBody
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
  }
  query?: never
  url: '/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages'
}

export type PostSendMessageResponses = {
  /**
   * Успешный ответ
   */
  200: {
    content?: {
      text?: string
    }
    created?: number
    direction?: string
    id?: string
    type?: string
  }
}

export type PostSendMessageResponse = PostSendMessageResponses[keyof PostSendMessageResponses]

export type PostSendImageMessageData = {
  /**
   * Вложение с изображением
   */
  body?: SendImageMessageRequestBody
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
  }
  query?: never
  url: '/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages/image'
}

export type PostSendImageMessageResponses = {
  /**
   * Успешный ответ
   */
  200: {
    author_id?: number
    content?: {
      image?: {
        sizes?: {
          [key: string]: string
        }
      }
    }
    created?: number
    direction?: string
    id?: string
    type?: string
  }
}

export type PostSendImageMessageResponse =
  PostSendImageMessageResponses[keyof PostSendImageMessageResponses]

export type DeleteMessageData = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
    /**
     * Идентификатор сообщения
     */
    message_id: string
  }
  query?: never
  url: '/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages/{message_id}'
}

export type DeleteMessageResponses = {
  /**
   * Успешный ответ
   */
  200: {
    [key: string]: unknown
  }
}

export type DeleteMessageResponse = DeleteMessageResponses[keyof DeleteMessageResponses]

export type ChatReadData = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
  }
  query?: never
  url: '/messenger/v1/accounts/{user_id}/chats/{chat_id}/read'
}

export type ChatReadResponses = {
  /**
   * Успешный ответ
   */
  200: {
    ok?: boolean
  }
}

export type ChatReadResponse = ChatReadResponses[keyof ChatReadResponses]

export type GetVoiceFilesData = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query: {
    /**
     * Получение файлов голосовых сообщений с указанными voice_id
     */
    voice_ids: Array<string>
  }
  url: '/messenger/v1/accounts/{user_id}/getVoiceFiles'
}

export type GetVoiceFilesResponses = {
  /**
   * Успешный ответ
   */
  200: VoiceFiles
}

export type GetVoiceFilesResponse = GetVoiceFilesResponses[keyof GetVoiceFilesResponses]

export type UploadImagesData = {
  body?: {
    'uploadfile[]': Blob | File
  }
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query?: never
  url: '/messenger/v1/accounts/{user_id}/uploadImages'
}

export type UploadImagesResponses = {
  /**
   * Успешный ответ
   */
  200: {
    [key: string]: {
      [key: string]: string
    }
  }
}

export type UploadImagesResponse = UploadImagesResponses[keyof UploadImagesResponses]

export type GetSubscriptionsData = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/messenger/v1/subscriptions'
}

export type GetSubscriptionsResponses = {
  /**
   * Успешный ответ
   */
  200: {
    subscriptions: Array<{
      url: string
      /**
       * Версия метода, через который вебхук добавлен. Влияет на формат получаемых данных
       */
      version: string
    }>
  }
}

export type GetSubscriptionsResponse = GetSubscriptionsResponses[keyof GetSubscriptionsResponses]

export type PostWebhookUnsubscribeData = {
  /**
   * Url, на который необходимо перестать слать уведомления
   */
  body?: WebhookSubscribeRequestBody
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/messenger/v1/webhook/unsubscribe'
}

export type PostWebhookUnsubscribeResponses = {
  /**
   * Успешный ответ
   */
  200: {
    ok?: boolean
  }
}

export type PostWebhookUnsubscribeResponse =
  PostWebhookUnsubscribeResponses[keyof PostWebhookUnsubscribeResponses]

export type PostBlacklistV2Data = {
  /**
   * Добавление пользователя в blacklist
   */
  body?: AddBlacklistRequestBody
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query?: never
  url: '/messenger/v2/accounts/{user_id}/blacklist'
}

export type PostBlacklistV2Responses = {
  /**
   * Успешный ответ
   */
  200: unknown
}

export type GetChatsV2Data = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
  }
  query?: {
    /**
     * Получение чатов только по объявлениям с указанными item_id
     */
    item_ids?: Array<bigint>
    /**
     * При значении true метод возвращает только непрочитанные чаты
     */
    unread_only?: boolean
    /**
     * Фильтрация возвращаемых чатов.
     * * u2i — чаты по объявлениям;
     * * u2u — чаты между пользователями;
     *
     */
    chat_types?: Array<'u2i' | 'u2u'>
    /**
     * Количество сообщений / чатов для запроса
     */
    limit?: number
    /**
     * Сдвиг сообщений / чатов для запроса
     */
    offset?: number
  }
  url: '/messenger/v2/accounts/{user_id}/chats'
}

export type GetChatsV2Responses = {
  /**
   * Успешный ответ
   */
  200: Chats
}

export type GetChatsV2Response = GetChatsV2Responses[keyof GetChatsV2Responses]

export type GetChatByIdV2Data = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
  }
  query?: never
  url: '/messenger/v2/accounts/{user_id}/chats/{chat_id}'
}

export type GetChatByIdV2Responses = {
  /**
   * Успешный ответ
   */
  200: Chat
}

export type GetChatByIdV2Response = GetChatByIdV2Responses[keyof GetChatByIdV2Responses]

export type GetMessagesV3Data = {
  body?: never
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path: {
    /**
     * Идентификатор пользователя (клиента)
     */
    user_id: bigint
    /**
     * Идентификатор чата (клиента)
     */
    chat_id: string
  }
  query?: {
    /**
     * Количество сообщений / чатов для запроса
     */
    limit?: number
    /**
     * Сдвиг сообщений / чатов для запроса
     */
    offset?: number
  }
  url: '/messenger/v3/accounts/{user_id}/chats/{chat_id}/messages/'
}

export type GetMessagesV3Responses = {
  /**
   * Успешный ответ
   */
  200: Messages
}

export type GetMessagesV3Response = GetMessagesV3Responses[keyof GetMessagesV3Responses]

export type PostWebhookV3Data = {
  /**
   * Url на который будут отправляться уведомления
   */
  body?: WebhookSubscribeRequestBody
  headers?: {
    /**
     * Токен для авторизации
     */
    Authorization?: string
  }
  path?: never
  query?: never
  url: '/messenger/v3/webhook'
}

export type PostWebhookV3Responses = {
  /**
   * Успешный ответ
   */
  200: {
    ok?: boolean
  }
  /**
   * JSON сообщения, который будет приходить в webhook
   */
  201: WebhookMessage
}

export type PostWebhookV3Response = PostWebhookV3Responses[keyof PostWebhookV3Responses]

export type ClientOptions = {
  baseUrl: 'https://api.avito.ru/' | (string & {})
}
