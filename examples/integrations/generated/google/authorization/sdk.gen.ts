// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type Client,
  type TDataShape,
  urlSearchParamsBodySerializer
} from './client'
import type {
  Oauth2TokenData,
  Oauth2TokenResponses,
  Oauth2TokenErrors,
  Oauth2TokeninfoData,
  Oauth2TokeninfoResponses,
  Oauth2UserinfoGetData,
  Oauth2UserinfoGetResponses,
  Oauth2UserinfoV2MeGetData,
  Oauth2UserinfoV2MeGetResponses
} from './types.gen'
import { client } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const oauth2Token = <ThrowOnError extends boolean = false>(
  options?: Options<Oauth2TokenData, ThrowOnError>
) => {
  return (options?.client ?? client).post<Oauth2TokenResponses, Oauth2TokenErrors, ThrowOnError>({
    ...urlSearchParamsBodySerializer,
    url: '/oauth2/v4/token',
    ...options,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      ...options?.headers
    }
  })
}

export const oauth2Tokeninfo = <ThrowOnError extends boolean = false>(
  options?: Options<Oauth2TokeninfoData, ThrowOnError>
) => {
  return (options?.client ?? client).post<Oauth2TokeninfoResponses, unknown, ThrowOnError>({
    url: '/oauth2/v2/tokeninfo',
    ...options
  })
}

export const oauth2UserinfoGet = <ThrowOnError extends boolean = false>(
  options?: Options<Oauth2UserinfoGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<Oauth2UserinfoGetResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/oauth2/v2/userinfo',
    ...options
  })
}

export const oauth2UserinfoV2MeGet = <ThrowOnError extends boolean = false>(
  options?: Options<Oauth2UserinfoV2MeGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<Oauth2UserinfoV2MeGetResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/userinfo/v2/me',
    ...options
  })
}
