// This file is auto-generated by @hey-api/openapi-ts

export type TokenResponse = {
  /**
   * The access token issued by the authorization server
   */
  access_token: string
  /**
   * The type of the token issued
   */
  token_type: string
  /**
   * The lifetime in seconds of the access token
   */
  expires_in: number
  /**
   * The refresh token issued by the authorization server
   */
  refresh_token?: string
  /**
   * The scope of the access token
   */
  scope?: string
}

export type Tokeninfo = {
  /**
   * Who is the intended audience for this token. In general the same as issued_to.
   */
  audience?: string
  /**
   * The email address of the user. Present only if the email scope is present in the request.
   */
  email?: string
  /**
   * The expiry time of the token, as number of seconds left until expiry.
   */
  expires_in?: number
  /**
   * To whom was the token issued to. In general the same as audience.
   */
  issued_to?: string
  /**
   * The space separated list of scopes granted to this token.
   */
  scope?: string
  /**
   * The obfuscated user id.
   */
  user_id?: string
  /**
   * Boolean flag which is true if the email address is verified. Present only if the email scope is present in the request.
   */
  verified_email?: boolean
}

export type Userinfo = {
  /**
   * The user's email address.
   */
  email?: string
  /**
   * The user's last name.
   */
  family_name?: string
  /**
   * The user's gender.
   */
  gender?: string
  /**
   * The user's first name.
   */
  given_name?: string
  /**
   * The hosted domain e.g. example.com if the user is Google apps user.
   */
  hd?: string
  /**
   * The obfuscated ID of the user.
   */
  id?: string
  /**
   * URL of the profile page.
   */
  link?: string
  /**
   * The user's preferred locale.
   */
  locale?: string
  /**
   * The user's full name.
   */
  name?: string
  /**
   * URL of the user's picture image.
   */
  picture?: string
  /**
   * Boolean flag which is true if the email address is verified. Always verified because we only return the user's primary email address.
   */
  verified_email?: boolean
}

/**
 * Data format for the response.
 */
export const Alt = {
  JSON: 'json'
} as const

/**
 * Data format for the response.
 */
export type Alt = (typeof Alt)[keyof typeof Alt]

/**
 * Selector specifying which fields to include in a partial response.
 */
export type Fields = string

/**
 * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
 */
export type Key = string

/**
 * OAuth 2.0 token for the current user.
 */
export type OauthToken = string

/**
 * Returns response with indentations and line breaks.
 */
export type PrettyPrint = boolean

/**
 * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
 */
export type QuotaUser = string

/**
 * Deprecated. Please use quotaUser instead.
 */
export type UserIp = string

export type Oauth2TokenData = {
  body?: {
    /**
     * Authorization code obtained from the authorization server
     */
    code?: string
    /**
     * The client ID obtained from the Google API Console
     */
    client_id: string
    /**
     * The client secret obtained from the Google API Console
     */
    client_secret: string
    /**
     * The URI to redirect to after authorization
     */
    redirect_uri?: string
    /**
     * The grant type for the request
     */
    grant_type: 'authorization_code' | 'refresh_token'
    /**
     * The refresh token obtained from the authorization server
     */
    refresh_token?: string
  }
  path?: never
  query?: never
  url: '/oauth2/v4/token'
}

export type Oauth2TokenErrors = {
  /**
   * Bad Request
   */
  400: unknown
}

export type Oauth2TokenResponses = {
  /**
   * Successful token response
   */
  200: TokenResponse
}

export type Oauth2TokenResponse = Oauth2TokenResponses[keyof Oauth2TokenResponses]

export type Oauth2TokeninfoData = {
  body?: never
  path?: never
  query?: {
    /**
     * Data format for the response.
     */
    alt?: 'json'
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string
    access_token?: string
    id_token?: string
  }
  url: '/oauth2/v2/tokeninfo'
}

export type Oauth2TokeninfoResponses = {
  /**
   * Successful response
   */
  200: Tokeninfo
}

export type Oauth2TokeninfoResponse = Oauth2TokeninfoResponses[keyof Oauth2TokeninfoResponses]

export type Oauth2UserinfoGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Data format for the response.
     */
    alt?: 'json'
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string
  }
  url: '/oauth2/v2/userinfo'
}

export type Oauth2UserinfoGetResponses = {
  /**
   * Successful response
   */
  200: Userinfo
}

export type Oauth2UserinfoGetResponse = Oauth2UserinfoGetResponses[keyof Oauth2UserinfoGetResponses]

export type Oauth2UserinfoV2MeGetData = {
  body?: never
  path?: never
  query?: {
    /**
     * Data format for the response.
     */
    alt?: 'json'
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string
  }
  url: '/userinfo/v2/me'
}

export type Oauth2UserinfoV2MeGetResponses = {
  /**
   * Successful response
   */
  200: Userinfo
}

export type Oauth2UserinfoV2MeGetResponse =
  Oauth2UserinfoV2MeGetResponses[keyof Oauth2UserinfoV2MeGetResponses]

export type ClientOptions = {
  baseUrl: 'https://www.googleapis.com/' | (string & {})
}
