// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod'

export const zTokenResponse = z.object({
  access_token: z.string(),
  token_type: z.string(),
  expires_in: z.int(),
  refresh_token: z.optional(z.string()),
  scope: z.optional(z.string())
})

export const zTokeninfo = z.object({
  audience: z.optional(z.string()),
  email: z.optional(z.string()),
  expires_in: z.optional(z.int()),
  issued_to: z.optional(z.string()),
  scope: z.optional(z.string()),
  user_id: z.optional(z.string()),
  verified_email: z.optional(z.boolean())
})

export const zUserinfo = z.object({
  email: z.optional(z.string()),
  family_name: z.optional(z.string()),
  gender: z.optional(z.string()),
  given_name: z.optional(z.string()),
  hd: z.optional(z.string()),
  id: z.optional(z.string()),
  link: z.optional(z.string()),
  locale: z.optional(z.string()),
  name: z.optional(z.string()),
  picture: z.optional(z.string()),
  verified_email: z.optional(z.boolean()).default(true)
})

/**
 * Data format for the response.
 */
export const zAlt = z.enum(['json'])

/**
 * Selector specifying which fields to include in a partial response.
 */
export const zFields = z.string()

/**
 * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
 */
export const zKey = z.string()

/**
 * OAuth 2.0 token for the current user.
 */
export const zOauthToken = z.string()

/**
 * Returns response with indentations and line breaks.
 */
export const zPrettyPrint = z.boolean()

/**
 * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
 */
export const zQuotaUser = z.string()

/**
 * Deprecated. Please use quotaUser instead.
 */
export const zUserIp = z.string()

export const zOauth2TokenData = z.object({
  body: z.optional(
    z.object({
      code: z.optional(z.string()),
      client_id: z.string(),
      client_secret: z.string(),
      redirect_uri: z.optional(z.string()),
      grant_type: z.enum(['authorization_code', 'refresh_token']),
      refresh_token: z.optional(z.string())
    })
  ),
  path: z.optional(z.never()),
  query: z.optional(z.never())
})

/**
 * Successful token response
 */
export const zOauth2TokenResponse = zTokenResponse

export const zOauth2TokeninfoData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      access_token: z.optional(z.string()),
      id_token: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zOauth2TokeninfoResponse = zTokeninfo

export const zOauth2UserinfoGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zOauth2UserinfoGetResponse = zUserinfo

export const zOauth2UserinfoV2MeGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zOauth2UserinfoV2MeGetResponse = zUserinfo
