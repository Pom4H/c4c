// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client'
import type {
  DriveAboutGetData,
  DriveAboutGetResponses,
  DriveChangesListData,
  DriveChangesListResponses,
  DriveChangesGetStartPageTokenData,
  DriveChangesGetStartPageTokenResponses,
  DriveChangesWatchData,
  DriveChangesWatchResponses,
  DriveChannelsStopData,
  DriveChannelsStopResponses,
  DriveDrivesListData,
  DriveDrivesListResponses,
  DriveDrivesCreateData,
  DriveDrivesCreateResponses,
  DriveDrivesDeleteData,
  DriveDrivesDeleteResponses,
  DriveDrivesGetData,
  DriveDrivesGetResponses,
  DriveDrivesUpdateData,
  DriveDrivesUpdateResponses,
  DriveDrivesHideData,
  DriveDrivesHideResponses,
  DriveDrivesUnhideData,
  DriveDrivesUnhideResponses,
  DriveFilesListData,
  DriveFilesListResponses,
  DriveFilesCreateData,
  DriveFilesCreateResponses,
  DriveFilesGenerateIdsData,
  DriveFilesGenerateIdsResponses,
  DriveFilesEmptyTrashData,
  DriveFilesEmptyTrashResponses,
  DriveFilesDeleteData,
  DriveFilesDeleteResponses,
  DriveFilesGetData,
  DriveFilesGetResponses,
  DriveFilesUpdateData,
  DriveFilesUpdateResponses,
  DriveCommentsListData,
  DriveCommentsListResponses,
  DriveCommentsCreateData,
  DriveCommentsCreateResponses,
  DriveCommentsDeleteData,
  DriveCommentsDeleteResponses,
  DriveCommentsGetData,
  DriveCommentsGetResponses,
  DriveCommentsUpdateData,
  DriveCommentsUpdateResponses,
  DriveRepliesListData,
  DriveRepliesListResponses,
  DriveRepliesCreateData,
  DriveRepliesCreateResponses,
  DriveRepliesDeleteData,
  DriveRepliesDeleteResponses,
  DriveRepliesGetData,
  DriveRepliesGetResponses,
  DriveRepliesUpdateData,
  DriveRepliesUpdateResponses,
  DriveFilesCopyData,
  DriveFilesCopyResponses,
  DriveFilesExportData,
  DriveFilesExportResponses,
  DriveFilesListLabelsData,
  DriveFilesListLabelsResponses,
  DriveFilesModifyLabelsData,
  DriveFilesModifyLabelsResponses,
  DrivePermissionsListData,
  DrivePermissionsListResponses,
  DrivePermissionsCreateData,
  DrivePermissionsCreateResponses,
  DrivePermissionsDeleteData,
  DrivePermissionsDeleteResponses,
  DrivePermissionsGetData,
  DrivePermissionsGetResponses,
  DrivePermissionsUpdateData,
  DrivePermissionsUpdateResponses,
  DriveRevisionsListData,
  DriveRevisionsListResponses,
  DriveRevisionsDeleteData,
  DriveRevisionsDeleteResponses,
  DriveRevisionsGetData,
  DriveRevisionsGetResponses,
  DriveRevisionsUpdateData,
  DriveRevisionsUpdateResponses,
  DriveFilesWatchData,
  DriveFilesWatchResponses,
  DriveTeamdrivesListData,
  DriveTeamdrivesListResponses,
  DriveTeamdrivesCreateData,
  DriveTeamdrivesCreateResponses,
  DriveTeamdrivesDeleteData,
  DriveTeamdrivesDeleteResponses,
  DriveTeamdrivesGetData,
  DriveTeamdrivesGetResponses,
  DriveTeamdrivesUpdateData,
  DriveTeamdrivesUpdateResponses
} from './types.gen'
import { client } from './client.gen'
import {
  driveChangesListResponseTransformer,
  driveDrivesListResponseTransformer,
  driveDrivesCreateResponseTransformer,
  driveDrivesGetResponseTransformer,
  driveDrivesUpdateResponseTransformer,
  driveDrivesHideResponseTransformer,
  driveDrivesUnhideResponseTransformer,
  driveFilesListResponseTransformer,
  driveFilesCreateResponseTransformer,
  driveFilesGetResponseTransformer,
  driveFilesUpdateResponseTransformer,
  driveCommentsListResponseTransformer,
  driveCommentsCreateResponseTransformer,
  driveCommentsGetResponseTransformer,
  driveCommentsUpdateResponseTransformer,
  driveRepliesListResponseTransformer,
  driveRepliesCreateResponseTransformer,
  driveRepliesGetResponseTransformer,
  driveRepliesUpdateResponseTransformer,
  driveFilesCopyResponseTransformer,
  drivePermissionsListResponseTransformer,
  drivePermissionsCreateResponseTransformer,
  drivePermissionsGetResponseTransformer,
  drivePermissionsUpdateResponseTransformer,
  driveRevisionsListResponseTransformer,
  driveRevisionsGetResponseTransformer,
  driveRevisionsUpdateResponseTransformer,
  driveTeamdrivesListResponseTransformer,
  driveTeamdrivesCreateResponseTransformer,
  driveTeamdrivesGetResponseTransformer,
  driveTeamdrivesUpdateResponseTransformer
} from './transformers.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Gets information about the user, the user's Drive, and system capabilities.
 */
export const driveAboutGet = <ThrowOnError extends boolean = false>(
  options?: Options<DriveAboutGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<DriveAboutGetResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/about',
    ...options
  })
}

/**
 * Lists the changes for a user or shared drive.
 */
export const driveChangesList = <ThrowOnError extends boolean = false>(
  options: Options<DriveChangesListData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveChangesListResponses, unknown, ThrowOnError>({
    responseTransformer: driveChangesListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/changes',
    ...options
  })
}

/**
 * Gets the starting pageToken for listing future changes.
 */
export const driveChangesGetStartPageToken = <ThrowOnError extends boolean = false>(
  options?: Options<DriveChangesGetStartPageTokenData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DriveChangesGetStartPageTokenResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/changes/startPageToken',
    ...options
  })
}

/**
 * Subscribes to changes for a user. To use this method, you must include the pageToken query parameter.
 */
export const driveChangesWatch = <ThrowOnError extends boolean = false>(
  options: Options<DriveChangesWatchData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveChangesWatchResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/changes/watch',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Stop watching resources through this channel
 */
export const driveChannelsStop = <ThrowOnError extends boolean = false>(
  options?: Options<DriveChannelsStopData, ThrowOnError>
) => {
  return (options?.client ?? client).post<DriveChannelsStopResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/channels/stop',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  })
}

/**
 * Lists the user's shared drives.
 */
export const driveDrivesList = <ThrowOnError extends boolean = false>(
  options?: Options<DriveDrivesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<DriveDrivesListResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives',
    ...options
  })
}

/**
 * Creates a shared drive.
 */
export const driveDrivesCreate = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveDrivesCreateResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items.
 */
export const driveDrivesDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveDrivesDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives/{driveId}',
    ...options
  })
}

/**
 * Gets a shared drive's metadata by ID.
 */
export const driveDrivesGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveDrivesGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives/{driveId}',
    ...options
  })
}

/**
 * Updates the metadata for a shared drive.
 */
export const driveDrivesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveDrivesUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives/{driveId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Hides a shared drive from the default view.
 */
export const driveDrivesHide = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesHideData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveDrivesHideResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesHideResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives/{driveId}/hide',
    ...options
  })
}

/**
 * Restores a shared drive to the default view.
 */
export const driveDrivesUnhide = <ThrowOnError extends boolean = false>(
  options: Options<DriveDrivesUnhideData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveDrivesUnhideResponses, unknown, ThrowOnError>({
    responseTransformer: driveDrivesUnhideResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/drives/{driveId}/unhide',
    ...options
  })
}

/**
 * Lists or searches files.
 */
export const driveFilesList = <ThrowOnError extends boolean = false>(
  options?: Options<DriveFilesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<DriveFilesListResponses, unknown, ThrowOnError>({
    responseTransformer: driveFilesListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files',
    ...options
  })
}

/**
 * Creates a file.
 */
export const driveFilesCreate = <ThrowOnError extends boolean = false>(
  options?: Options<DriveFilesCreateData, ThrowOnError>
) => {
  return (options?.client ?? client).post<DriveFilesCreateResponses, unknown, ThrowOnError>({
    bodySerializer: null,
    responseTransformer: driveFilesCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options?.headers
    }
  })
}

/**
 * Generates a set of file IDs which can be provided in create or copy requests.
 */
export const driveFilesGenerateIds = <ThrowOnError extends boolean = false>(
  options?: Options<DriveFilesGenerateIdsData, ThrowOnError>
) => {
  return (options?.client ?? client).get<DriveFilesGenerateIdsResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/generateIds',
    ...options
  })
}

/**
 * Permanently deletes all of the user's trashed files.
 */
export const driveFilesEmptyTrash = <ThrowOnError extends boolean = false>(
  options?: Options<DriveFilesEmptyTrashData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<DriveFilesEmptyTrashResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/trash',
    ...options
  })
}

/**
 * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a shared drive the user must be an organizer on the parent. If the target is a folder, all descendants owned by the user are also deleted.
 */
export const driveFilesDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveFilesDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}',
    ...options
  })
}

/**
 * Gets a file's metadata or content by ID.
 */
export const driveFilesGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveFilesGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveFilesGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}',
    ...options
  })
}

/**
 * Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.
 */
export const driveFilesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveFilesUpdateResponses, unknown, ThrowOnError>({
    bodySerializer: null,
    responseTransformer: driveFilesUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}',
    ...options,
    headers: {
      'Content-Type': 'application/octet-stream',
      ...options.headers
    }
  })
}

/**
 * Lists a file's comments.
 */
export const driveCommentsList = <ThrowOnError extends boolean = false>(
  options: Options<DriveCommentsListData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveCommentsListResponses, unknown, ThrowOnError>({
    responseTransformer: driveCommentsListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments',
    ...options
  })
}

/**
 * Creates a comment on a file.
 */
export const driveCommentsCreate = <ThrowOnError extends boolean = false>(
  options: Options<DriveCommentsCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveCommentsCreateResponses, unknown, ThrowOnError>({
    responseTransformer: driveCommentsCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Deletes a comment.
 */
export const driveCommentsDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveCommentsDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveCommentsDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}',
    ...options
  })
}

/**
 * Gets a comment by ID.
 */
export const driveCommentsGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveCommentsGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveCommentsGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveCommentsGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}',
    ...options
  })
}

/**
 * Updates a comment with patch semantics.
 */
export const driveCommentsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveCommentsUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveCommentsUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: driveCommentsUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Lists a comment's replies.
 */
export const driveRepliesList = <ThrowOnError extends boolean = false>(
  options: Options<DriveRepliesListData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveRepliesListResponses, unknown, ThrowOnError>({
    responseTransformer: driveRepliesListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}/replies',
    ...options
  })
}

/**
 * Creates a reply to a comment.
 */
export const driveRepliesCreate = <ThrowOnError extends boolean = false>(
  options: Options<DriveRepliesCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveRepliesCreateResponses, unknown, ThrowOnError>({
    responseTransformer: driveRepliesCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}/replies',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Deletes a reply.
 */
export const driveRepliesDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveRepliesDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveRepliesDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}/replies/{replyId}',
    ...options
  })
}

/**
 * Gets a reply by ID.
 */
export const driveRepliesGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveRepliesGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveRepliesGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveRepliesGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}/replies/{replyId}',
    ...options
  })
}

/**
 * Updates a reply with patch semantics.
 */
export const driveRepliesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveRepliesUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveRepliesUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: driveRepliesUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/comments/{commentId}/replies/{replyId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot be copied.
 */
export const driveFilesCopy = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesCopyData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveFilesCopyResponses, unknown, ThrowOnError>({
    responseTransformer: driveFilesCopyResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/copy',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.
 */
export const driveFilesExport = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesExportData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveFilesExportResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/export',
    ...options
  })
}

/**
 * Lists the labels on a file.
 */
export const driveFilesListLabels = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesListLabelsData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveFilesListLabelsResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/listLabels',
    ...options
  })
}

/**
 * Modifies the set of labels on a file.
 */
export const driveFilesModifyLabels = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesModifyLabelsData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveFilesModifyLabelsResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/modifyLabels',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Lists a file's or shared drive's permissions.
 */
export const drivePermissionsList = <ThrowOnError extends boolean = false>(
  options: Options<DrivePermissionsListData, ThrowOnError>
) => {
  return (options.client ?? client).get<DrivePermissionsListResponses, unknown, ThrowOnError>({
    responseTransformer: drivePermissionsListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/permissions',
    ...options
  })
}

/**
 * Creates a permission for a file or shared drive. For more information on creating permissions, see Share files, folders & drives.
 */
export const drivePermissionsCreate = <ThrowOnError extends boolean = false>(
  options: Options<DrivePermissionsCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<DrivePermissionsCreateResponses, unknown, ThrowOnError>({
    responseTransformer: drivePermissionsCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/permissions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Deletes a permission.
 */
export const drivePermissionsDelete = <ThrowOnError extends boolean = false>(
  options: Options<DrivePermissionsDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DrivePermissionsDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/permissions/{permissionId}',
    ...options
  })
}

/**
 * Gets a permission by ID.
 */
export const drivePermissionsGet = <ThrowOnError extends boolean = false>(
  options: Options<DrivePermissionsGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DrivePermissionsGetResponses, unknown, ThrowOnError>({
    responseTransformer: drivePermissionsGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/permissions/{permissionId}',
    ...options
  })
}

/**
 * Updates a permission with patch semantics.
 */
export const drivePermissionsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DrivePermissionsUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DrivePermissionsUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: drivePermissionsUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/permissions/{permissionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Lists a file's revisions.
 */
export const driveRevisionsList = <ThrowOnError extends boolean = false>(
  options: Options<DriveRevisionsListData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveRevisionsListResponses, unknown, ThrowOnError>({
    responseTransformer: driveRevisionsListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/revisions',
    ...options
  })
}

/**
 * Permanently deletes a file version. You can only delete revisions for files with binary content in Google Drive, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.
 */
export const driveRevisionsDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveRevisionsDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveRevisionsDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/revisions/{revisionId}',
    ...options
  })
}

/**
 * Gets a revision's metadata or content by ID.
 */
export const driveRevisionsGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveRevisionsGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveRevisionsGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveRevisionsGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/revisions/{revisionId}',
    ...options
  })
}

/**
 * Updates a revision with patch semantics.
 */
export const driveRevisionsUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveRevisionsUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveRevisionsUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: driveRevisionsUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/revisions/{revisionId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Subscribes to changes to a file.
 */
export const driveFilesWatch = <ThrowOnError extends boolean = false>(
  options: Options<DriveFilesWatchData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveFilesWatchResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/watch',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Deprecated use drives.list instead.
 */
export const driveTeamdrivesList = <ThrowOnError extends boolean = false>(
  options?: Options<DriveTeamdrivesListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<DriveTeamdrivesListResponses, unknown, ThrowOnError>({
    responseTransformer: driveTeamdrivesListResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teamdrives',
    ...options
  })
}

/**
 * Deprecated use drives.create instead.
 */
export const driveTeamdrivesCreate = <ThrowOnError extends boolean = false>(
  options: Options<DriveTeamdrivesCreateData, ThrowOnError>
) => {
  return (options.client ?? client).post<DriveTeamdrivesCreateResponses, unknown, ThrowOnError>({
    responseTransformer: driveTeamdrivesCreateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teamdrives',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}

/**
 * Deprecated use drives.delete instead.
 */
export const driveTeamdrivesDelete = <ThrowOnError extends boolean = false>(
  options: Options<DriveTeamdrivesDeleteData, ThrowOnError>
) => {
  return (options.client ?? client).delete<DriveTeamdrivesDeleteResponses, unknown, ThrowOnError>({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teamdrives/{teamDriveId}',
    ...options
  })
}

/**
 * Deprecated use drives.get instead.
 */
export const driveTeamdrivesGet = <ThrowOnError extends boolean = false>(
  options: Options<DriveTeamdrivesGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<DriveTeamdrivesGetResponses, unknown, ThrowOnError>({
    responseTransformer: driveTeamdrivesGetResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teamdrives/{teamDriveId}',
    ...options
  })
}

/**
 * Deprecated use drives.update instead
 */
export const driveTeamdrivesUpdate = <ThrowOnError extends boolean = false>(
  options: Options<DriveTeamdrivesUpdateData, ThrowOnError>
) => {
  return (options.client ?? client).patch<DriveTeamdrivesUpdateResponses, unknown, ThrowOnError>({
    responseTransformer: driveTeamdrivesUpdateResponseTransformer,
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      },
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/teamdrives/{teamDriveId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    }
  })
}
