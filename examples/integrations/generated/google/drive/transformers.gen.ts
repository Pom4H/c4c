// This file is auto-generated by @hey-api/openapi-ts

import type {
  DriveChangesListResponse,
  DriveDrivesListResponse,
  DriveDrivesCreateResponse,
  DriveDrivesGetResponse,
  DriveDrivesUpdateResponse,
  DriveDrivesHideResponse,
  DriveDrivesUnhideResponse,
  DriveFilesListResponse,
  DriveFilesCreateResponse,
  DriveFilesGetResponse,
  DriveFilesUpdateResponse,
  DriveCommentsListResponse,
  DriveCommentsCreateResponse,
  DriveCommentsGetResponse,
  DriveCommentsUpdateResponse,
  DriveRepliesListResponse,
  DriveRepliesCreateResponse,
  DriveRepliesGetResponse,
  DriveRepliesUpdateResponse,
  DriveFilesCopyResponse,
  DrivePermissionsListResponse,
  DrivePermissionsCreateResponse,
  DrivePermissionsGetResponse,
  DrivePermissionsUpdateResponse,
  DriveRevisionsListResponse,
  DriveRevisionsGetResponse,
  DriveRevisionsUpdateResponse,
  DriveTeamdrivesListResponse,
  DriveTeamdrivesCreateResponse,
  DriveTeamdrivesGetResponse,
  DriveTeamdrivesUpdateResponse
} from './types.gen'

const driveSchemaResponseTransformer = (data: any) => {
  if (data.createdTime) {
    data.createdTime = new Date(data.createdTime)
  }
  return data
}

const contentRestrictionSchemaResponseTransformer = (data: any) => {
  if (data.restrictionTime) {
    data.restrictionTime = new Date(data.restrictionTime)
  }
  return data
}

const permissionSchemaResponseTransformer = (data: any) => {
  if (data.expirationTime) {
    data.expirationTime = new Date(data.expirationTime)
  }
  return data
}

const fileSchemaResponseTransformer = (data: any) => {
  if (data.contentRestrictions) {
    data.contentRestrictions = data.contentRestrictions.map((item: any) => {
      return contentRestrictionSchemaResponseTransformer(item)
    })
  }
  if (data.createdTime) {
    data.createdTime = new Date(data.createdTime)
  }
  if (data.modifiedByMeTime) {
    data.modifiedByMeTime = new Date(data.modifiedByMeTime)
  }
  if (data.modifiedTime) {
    data.modifiedTime = new Date(data.modifiedTime)
  }
  if (data.permissions) {
    data.permissions = data.permissions.map((item: any) => {
      return permissionSchemaResponseTransformer(item)
    })
  }
  if (data.sharedWithMeTime) {
    data.sharedWithMeTime = new Date(data.sharedWithMeTime)
  }
  if (data.trashedTime) {
    data.trashedTime = new Date(data.trashedTime)
  }
  if (data.viewedByMeTime) {
    data.viewedByMeTime = new Date(data.viewedByMeTime)
  }
  return data
}

const teamDriveSchemaResponseTransformer = (data: any) => {
  if (data.createdTime) {
    data.createdTime = new Date(data.createdTime)
  }
  return data
}

const changeSchemaResponseTransformer = (data: any) => {
  if (data.drive) {
    data.drive = driveSchemaResponseTransformer(data.drive)
  }
  if (data.file) {
    data.file = fileSchemaResponseTransformer(data.file)
  }
  if (data.teamDrive) {
    data.teamDrive = teamDriveSchemaResponseTransformer(data.teamDrive)
  }
  if (data.time) {
    data.time = new Date(data.time)
  }
  return data
}

const changeListSchemaResponseTransformer = (data: any) => {
  if (data.changes) {
    data.changes = data.changes.map((item: any) => {
      return changeSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveChangesListResponseTransformer = async (
  data: any
): Promise<DriveChangesListResponse> => {
  data = changeListSchemaResponseTransformer(data)
  return data
}

const driveListSchemaResponseTransformer = (data: any) => {
  if (data.drives) {
    data.drives = data.drives.map((item: any) => {
      return driveSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveDrivesListResponseTransformer = async (
  data: any
): Promise<DriveDrivesListResponse> => {
  data = driveListSchemaResponseTransformer(data)
  return data
}

export const driveDrivesCreateResponseTransformer = async (
  data: any
): Promise<DriveDrivesCreateResponse> => {
  data = driveSchemaResponseTransformer(data)
  return data
}

export const driveDrivesGetResponseTransformer = async (
  data: any
): Promise<DriveDrivesGetResponse> => {
  data = driveSchemaResponseTransformer(data)
  return data
}

export const driveDrivesUpdateResponseTransformer = async (
  data: any
): Promise<DriveDrivesUpdateResponse> => {
  data = driveSchemaResponseTransformer(data)
  return data
}

export const driveDrivesHideResponseTransformer = async (
  data: any
): Promise<DriveDrivesHideResponse> => {
  data = driveSchemaResponseTransformer(data)
  return data
}

export const driveDrivesUnhideResponseTransformer = async (
  data: any
): Promise<DriveDrivesUnhideResponse> => {
  data = driveSchemaResponseTransformer(data)
  return data
}

const fileListSchemaResponseTransformer = (data: any) => {
  if (data.files) {
    data.files = data.files.map((item: any) => {
      return fileSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveFilesListResponseTransformer = async (
  data: any
): Promise<DriveFilesListResponse> => {
  data = fileListSchemaResponseTransformer(data)
  return data
}

export const driveFilesCreateResponseTransformer = async (
  data: any
): Promise<DriveFilesCreateResponse> => {
  data = fileSchemaResponseTransformer(data)
  return data
}

export const driveFilesGetResponseTransformer = async (
  data: any
): Promise<DriveFilesGetResponse> => {
  data = fileSchemaResponseTransformer(data)
  return data
}

export const driveFilesUpdateResponseTransformer = async (
  data: any
): Promise<DriveFilesUpdateResponse> => {
  data = fileSchemaResponseTransformer(data)
  return data
}

const replySchemaResponseTransformer = (data: any) => {
  if (data.createdTime) {
    data.createdTime = new Date(data.createdTime)
  }
  if (data.modifiedTime) {
    data.modifiedTime = new Date(data.modifiedTime)
  }
  return data
}

const commentSchemaResponseTransformer = (data: any) => {
  if (data.createdTime) {
    data.createdTime = new Date(data.createdTime)
  }
  if (data.modifiedTime) {
    data.modifiedTime = new Date(data.modifiedTime)
  }
  if (data.replies) {
    data.replies = data.replies.map((item: any) => {
      return replySchemaResponseTransformer(item)
    })
  }
  return data
}

const commentListSchemaResponseTransformer = (data: any) => {
  if (data.comments) {
    data.comments = data.comments.map((item: any) => {
      return commentSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveCommentsListResponseTransformer = async (
  data: any
): Promise<DriveCommentsListResponse> => {
  data = commentListSchemaResponseTransformer(data)
  return data
}

export const driveCommentsCreateResponseTransformer = async (
  data: any
): Promise<DriveCommentsCreateResponse> => {
  data = commentSchemaResponseTransformer(data)
  return data
}

export const driveCommentsGetResponseTransformer = async (
  data: any
): Promise<DriveCommentsGetResponse> => {
  data = commentSchemaResponseTransformer(data)
  return data
}

export const driveCommentsUpdateResponseTransformer = async (
  data: any
): Promise<DriveCommentsUpdateResponse> => {
  data = commentSchemaResponseTransformer(data)
  return data
}

const replyListSchemaResponseTransformer = (data: any) => {
  if (data.replies) {
    data.replies = data.replies.map((item: any) => {
      return replySchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveRepliesListResponseTransformer = async (
  data: any
): Promise<DriveRepliesListResponse> => {
  data = replyListSchemaResponseTransformer(data)
  return data
}

export const driveRepliesCreateResponseTransformer = async (
  data: any
): Promise<DriveRepliesCreateResponse> => {
  data = replySchemaResponseTransformer(data)
  return data
}

export const driveRepliesGetResponseTransformer = async (
  data: any
): Promise<DriveRepliesGetResponse> => {
  data = replySchemaResponseTransformer(data)
  return data
}

export const driveRepliesUpdateResponseTransformer = async (
  data: any
): Promise<DriveRepliesUpdateResponse> => {
  data = replySchemaResponseTransformer(data)
  return data
}

export const driveFilesCopyResponseTransformer = async (
  data: any
): Promise<DriveFilesCopyResponse> => {
  data = fileSchemaResponseTransformer(data)
  return data
}

const permissionListSchemaResponseTransformer = (data: any) => {
  if (data.permissions) {
    data.permissions = data.permissions.map((item: any) => {
      return permissionSchemaResponseTransformer(item)
    })
  }
  return data
}

export const drivePermissionsListResponseTransformer = async (
  data: any
): Promise<DrivePermissionsListResponse> => {
  data = permissionListSchemaResponseTransformer(data)
  return data
}

export const drivePermissionsCreateResponseTransformer = async (
  data: any
): Promise<DrivePermissionsCreateResponse> => {
  data = permissionSchemaResponseTransformer(data)
  return data
}

export const drivePermissionsGetResponseTransformer = async (
  data: any
): Promise<DrivePermissionsGetResponse> => {
  data = permissionSchemaResponseTransformer(data)
  return data
}

export const drivePermissionsUpdateResponseTransformer = async (
  data: any
): Promise<DrivePermissionsUpdateResponse> => {
  data = permissionSchemaResponseTransformer(data)
  return data
}

const revisionSchemaResponseTransformer = (data: any) => {
  if (data.modifiedTime) {
    data.modifiedTime = new Date(data.modifiedTime)
  }
  return data
}

const revisionListSchemaResponseTransformer = (data: any) => {
  if (data.revisions) {
    data.revisions = data.revisions.map((item: any) => {
      return revisionSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveRevisionsListResponseTransformer = async (
  data: any
): Promise<DriveRevisionsListResponse> => {
  data = revisionListSchemaResponseTransformer(data)
  return data
}

export const driveRevisionsGetResponseTransformer = async (
  data: any
): Promise<DriveRevisionsGetResponse> => {
  data = revisionSchemaResponseTransformer(data)
  return data
}

export const driveRevisionsUpdateResponseTransformer = async (
  data: any
): Promise<DriveRevisionsUpdateResponse> => {
  data = revisionSchemaResponseTransformer(data)
  return data
}

const teamDriveListSchemaResponseTransformer = (data: any) => {
  if (data.teamDrives) {
    data.teamDrives = data.teamDrives.map((item: any) => {
      return teamDriveSchemaResponseTransformer(item)
    })
  }
  return data
}

export const driveTeamdrivesListResponseTransformer = async (
  data: any
): Promise<DriveTeamdrivesListResponse> => {
  data = teamDriveListSchemaResponseTransformer(data)
  return data
}

export const driveTeamdrivesCreateResponseTransformer = async (
  data: any
): Promise<DriveTeamdrivesCreateResponse> => {
  data = teamDriveSchemaResponseTransformer(data)
  return data
}

export const driveTeamdrivesGetResponseTransformer = async (
  data: any
): Promise<DriveTeamdrivesGetResponse> => {
  data = teamDriveSchemaResponseTransformer(data)
  return data
}

export const driveTeamdrivesUpdateResponseTransformer = async (
  data: any
): Promise<DriveTeamdrivesUpdateResponse> => {
  data = teamDriveSchemaResponseTransformer(data)
  return data
}
