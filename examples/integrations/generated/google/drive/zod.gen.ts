// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod'

/**
 * Information about a Drive user.
 */
export const zUser = z.object({
  displayName: z.optional(z.string()),
  emailAddress: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#user'),
  me: z.optional(z.boolean()),
  permissionId: z.optional(z.string()),
  photoLink: z.optional(z.string())
})

/**
 * Information about the user, the user's Drive, and system capabilities.
 */
export const zAbout = z.object({
  appInstalled: z.optional(z.boolean()),
  canCreateDrives: z.optional(z.boolean()),
  canCreateTeamDrives: z.optional(z.boolean()),
  driveThemes: z.optional(
    z.array(
      z.object({
        backgroundImageLink: z.optional(z.string()),
        colorRgb: z.optional(z.string()),
        id: z.optional(z.string())
      })
    )
  ),
  exportFormats: z.optional(z.record(z.string(), z.array(z.string()))),
  folderColorPalette: z.optional(z.array(z.string())),
  importFormats: z.optional(z.record(z.string(), z.array(z.string()))),
  kind: z.optional(z.string()).default('drive#about'),
  maxImportSizes: z.optional(z.record(z.string(), z.string())),
  maxUploadSize: z.optional(z.string()),
  storageQuota: z.optional(
    z.object({
      limit: z.optional(z.string()),
      usage: z.optional(z.string()),
      usageInDrive: z.optional(z.string()),
      usageInDriveTrash: z.optional(z.string())
    })
  ),
  teamDriveThemes: z.optional(
    z.array(
      z.object({
        backgroundImageLink: z.optional(z.string()),
        colorRgb: z.optional(z.string()),
        id: z.optional(z.string())
      })
    )
  ),
  user: z.optional(zUser)
})

/**
 * Representation of a shared drive.
 */
export const zDrive = z.object({
  backgroundImageFile: z.optional(
    z.object({
      id: z.optional(z.string()),
      width: z.optional(z.number()),
      xCoordinate: z.optional(z.number()),
      yCoordinate: z.optional(z.number())
    })
  ),
  backgroundImageLink: z.optional(z.string()),
  capabilities: z.optional(
    z.object({
      canAddChildren: z.optional(z.boolean()),
      canChangeCopyRequiresWriterPermissionRestriction: z.optional(z.boolean()),
      canChangeDomainUsersOnlyRestriction: z.optional(z.boolean()),
      canChangeDriveBackground: z.optional(z.boolean()),
      canChangeDriveMembersOnlyRestriction: z.optional(z.boolean()),
      canChangeSharingFoldersRequiresOrganizerPermissionRestriction: z.optional(z.boolean()),
      canComment: z.optional(z.boolean()),
      canCopy: z.optional(z.boolean()),
      canDeleteChildren: z.optional(z.boolean()),
      canDeleteDrive: z.optional(z.boolean()),
      canDownload: z.optional(z.boolean()),
      canEdit: z.optional(z.boolean()),
      canListChildren: z.optional(z.boolean()),
      canManageMembers: z.optional(z.boolean()),
      canReadRevisions: z.optional(z.boolean()),
      canRename: z.optional(z.boolean()),
      canRenameDrive: z.optional(z.boolean()),
      canResetDriveRestrictions: z.optional(z.boolean()),
      canShare: z.optional(z.boolean()),
      canTrashChildren: z.optional(z.boolean())
    })
  ),
  colorRgb: z.optional(z.string()),
  createdTime: z.optional(z.iso.datetime()),
  hidden: z.optional(z.boolean()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#drive'),
  name: z.optional(z.string()),
  orgUnitId: z.optional(z.string()),
  restrictions: z.optional(
    z.object({
      adminManagedRestrictions: z.optional(z.boolean()),
      copyRequiresWriterPermission: z.optional(z.boolean()),
      domainUsersOnly: z.optional(z.boolean()),
      driveMembersOnly: z.optional(z.boolean()),
      sharingFoldersRequiresOrganizerPermission: z.optional(z.boolean())
    })
  ),
  themeId: z.optional(z.string())
})

/**
 * A restriction for accessing the content of the file.
 */
export const zContentRestriction = z.object({
  readOnly: z.optional(z.boolean()),
  reason: z.optional(z.string()),
  restrictingUser: z.optional(zUser),
  restrictionTime: z.optional(z.iso.datetime()),
  type: z.optional(z.string())
})

/**
 * Representation of a label field.
 */
export const zLabelField = z.object({
  dateString: z.optional(z.array(z.iso.date())),
  id: z.optional(z.string()),
  integer: z.optional(z.array(z.string())),
  kind: z.optional(z.string()).default('drive#labelField'),
  selection: z.optional(z.array(z.string())),
  text: z.optional(z.array(z.string())),
  user: z.optional(z.array(zUser)),
  valueType: z.optional(z.string())
})

/**
 * Representation of a label and its fields.
 */
export const zLabel = z.object({
  fields: z.optional(z.record(z.string(), zLabelField)),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#label'),
  revisionId: z.optional(z.string())
})

/**
 * A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy.
 */
export const zPermission = z.object({
  allowFileDiscovery: z.optional(z.boolean()),
  deleted: z.optional(z.boolean()),
  displayName: z.optional(z.string()),
  domain: z.optional(z.string()),
  emailAddress: z.optional(z.string()),
  expirationTime: z.optional(z.iso.datetime()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#permission'),
  pendingOwner: z.optional(z.boolean()),
  permissionDetails: z.optional(
    z
      .array(
        z.object({
          inherited: z.optional(z.boolean()),
          inheritedFrom: z.optional(z.string()),
          permissionType: z.optional(z.string()),
          role: z.optional(z.string())
        })
      )
      .readonly()
  ),
  photoLink: z.optional(z.string()),
  role: z.optional(z.string()),
  teamDrivePermissionDetails: z.optional(
    z
      .array(
        z.object({
          inherited: z.optional(z.boolean()),
          inheritedFrom: z.optional(z.string()),
          role: z.optional(z.string()),
          teamDrivePermissionType: z.optional(z.string())
        })
      )
      .readonly()
  ),
  type: z.optional(z.string()),
  view: z.optional(z.string())
})

/**
 * The metadata for a file.
 */
export const zFile = z.object({
  appProperties: z.optional(z.record(z.string(), z.string())),
  capabilities: z.optional(
    z.object({
      canAcceptOwnership: z.optional(z.boolean()),
      canAddChildren: z.optional(z.boolean()),
      canAddFolderFromAnotherDrive: z.optional(z.boolean()),
      canAddMyDriveParent: z.optional(z.boolean()),
      canChangeCopyRequiresWriterPermission: z.optional(z.boolean()),
      canChangeSecurityUpdateEnabled: z.optional(z.boolean()),
      canChangeViewersCanCopyContent: z.optional(z.boolean()),
      canComment: z.optional(z.boolean()),
      canCopy: z.optional(z.boolean()),
      canDelete: z.optional(z.boolean()),
      canDeleteChildren: z.optional(z.boolean()),
      canDownload: z.optional(z.boolean()),
      canEdit: z.optional(z.boolean()),
      canListChildren: z.optional(z.boolean()),
      canModifyContent: z.optional(z.boolean()),
      canModifyContentRestriction: z.optional(z.boolean()),
      canModifyLabels: z.optional(z.boolean()),
      canMoveChildrenOutOfDrive: z.optional(z.boolean()),
      canMoveChildrenOutOfTeamDrive: z.optional(z.boolean()),
      canMoveChildrenWithinDrive: z.optional(z.boolean()),
      canMoveChildrenWithinTeamDrive: z.optional(z.boolean()),
      canMoveItemIntoTeamDrive: z.optional(z.boolean()),
      canMoveItemOutOfDrive: z.optional(z.boolean()),
      canMoveItemOutOfTeamDrive: z.optional(z.boolean()),
      canMoveItemWithinDrive: z.optional(z.boolean()),
      canMoveItemWithinTeamDrive: z.optional(z.boolean()),
      canMoveTeamDriveItem: z.optional(z.boolean()),
      canReadDrive: z.optional(z.boolean()),
      canReadLabels: z.optional(z.boolean()),
      canReadRevisions: z.optional(z.boolean()),
      canReadTeamDrive: z.optional(z.boolean()),
      canRemoveChildren: z.optional(z.boolean()),
      canRemoveMyDriveParent: z.optional(z.boolean()),
      canRename: z.optional(z.boolean()),
      canShare: z.optional(z.boolean()),
      canTrash: z.optional(z.boolean()),
      canTrashChildren: z.optional(z.boolean()),
      canUntrash: z.optional(z.boolean())
    })
  ),
  contentHints: z.optional(
    z.object({
      indexableText: z.optional(z.string()),
      thumbnail: z.optional(
        z.object({
          image: z.optional(z.string()),
          mimeType: z.optional(z.string())
        })
      )
    })
  ),
  contentRestrictions: z.optional(z.array(zContentRestriction)),
  copyRequiresWriterPermission: z.optional(z.boolean()),
  createdTime: z.optional(z.iso.datetime()),
  description: z.optional(z.string()),
  driveId: z.optional(z.string()),
  explicitlyTrashed: z.optional(z.boolean()),
  exportLinks: z.optional(z.record(z.string(), z.string()).readonly()),
  fileExtension: z.optional(z.string()),
  folderColorRgb: z.optional(z.string()),
  fullFileExtension: z.optional(z.string()),
  hasAugmentedPermissions: z.optional(z.boolean()),
  hasThumbnail: z.optional(z.boolean()),
  headRevisionId: z.optional(z.string()),
  iconLink: z.optional(z.string()),
  id: z.optional(z.string()),
  imageMediaMetadata: z.optional(
    z.object({
      aperture: z.optional(z.number()),
      cameraMake: z.optional(z.string()),
      cameraModel: z.optional(z.string()),
      colorSpace: z.optional(z.string()),
      exposureBias: z.optional(z.number()),
      exposureMode: z.optional(z.string()),
      exposureTime: z.optional(z.number()),
      flashUsed: z.optional(z.boolean()),
      focalLength: z.optional(z.number()),
      height: z.optional(z.int()),
      isoSpeed: z.optional(z.int()),
      lens: z.optional(z.string()),
      location: z.optional(
        z.object({
          altitude: z.optional(z.number()),
          latitude: z.optional(z.number()),
          longitude: z.optional(z.number())
        })
      ),
      maxApertureValue: z.optional(z.number()),
      meteringMode: z.optional(z.string()),
      rotation: z.optional(z.int()),
      sensor: z.optional(z.string()),
      subjectDistance: z.optional(z.int()),
      time: z.optional(z.string()),
      whiteBalance: z.optional(z.string()),
      width: z.optional(z.int())
    })
  ),
  isAppAuthorized: z.optional(z.boolean()),
  kind: z.optional(z.string()).default('drive#file'),
  labelInfo: z.optional(
    z.object({
      labels: z.optional(z.array(zLabel))
    })
  ),
  lastModifyingUser: z.optional(zUser),
  linkShareMetadata: z.optional(
    z.object({
      securityUpdateEligible: z.optional(z.boolean()),
      securityUpdateEnabled: z.optional(z.boolean())
    })
  ),
  md5Checksum: z.optional(z.string()),
  mimeType: z.optional(z.string()),
  modifiedByMe: z.optional(z.boolean()),
  modifiedByMeTime: z.optional(z.iso.datetime()),
  modifiedTime: z.optional(z.iso.datetime()),
  name: z.optional(z.string()),
  originalFilename: z.optional(z.string()),
  ownedByMe: z.optional(z.boolean()),
  owners: z.optional(z.array(zUser)),
  parents: z.optional(z.array(z.string())),
  permissionIds: z.optional(z.array(z.string())),
  permissions: z.optional(z.array(zPermission)),
  properties: z.optional(z.record(z.string(), z.string())),
  quotaBytesUsed: z.optional(z.string()),
  resourceKey: z.optional(z.string()),
  sha1Checksum: z.optional(z.string()),
  sha256Checksum: z.optional(z.string()),
  shared: z.optional(z.boolean()),
  sharedWithMeTime: z.optional(z.iso.datetime()),
  sharingUser: z.optional(zUser),
  shortcutDetails: z.optional(
    z.object({
      targetId: z.optional(z.string()),
      targetMimeType: z.optional(z.string()),
      targetResourceKey: z.optional(z.string())
    })
  ),
  size: z.optional(z.string()),
  spaces: z.optional(z.array(z.string())),
  starred: z.optional(z.boolean()),
  teamDriveId: z.optional(z.string()),
  thumbnailLink: z.optional(z.string()),
  thumbnailVersion: z.optional(z.string()),
  trashed: z.optional(z.boolean()),
  trashedTime: z.optional(z.iso.datetime()),
  trashingUser: z.optional(zUser),
  version: z.optional(z.string()),
  videoMediaMetadata: z.optional(
    z.object({
      durationMillis: z.optional(z.string()),
      height: z.optional(z.int()),
      width: z.optional(z.int())
    })
  ),
  viewedByMe: z.optional(z.boolean()),
  viewedByMeTime: z.optional(z.iso.datetime()),
  viewersCanCopyContent: z.optional(z.boolean()),
  webContentLink: z.optional(z.string()),
  webViewLink: z.optional(z.string()),
  writersCanShare: z.optional(z.boolean())
})

/**
 * Deprecated: use the drive collection instead.
 */
export const zTeamDrive = z.object({
  backgroundImageFile: z.optional(
    z.object({
      id: z.optional(z.string()),
      width: z.optional(z.number()),
      xCoordinate: z.optional(z.number()),
      yCoordinate: z.optional(z.number())
    })
  ),
  backgroundImageLink: z.optional(z.string()),
  capabilities: z.optional(
    z.object({
      canAddChildren: z.optional(z.boolean()),
      canChangeCopyRequiresWriterPermissionRestriction: z.optional(z.boolean()),
      canChangeDomainUsersOnlyRestriction: z.optional(z.boolean()),
      canChangeSharingFoldersRequiresOrganizerPermissionRestriction: z.optional(z.boolean()),
      canChangeTeamDriveBackground: z.optional(z.boolean()),
      canChangeTeamMembersOnlyRestriction: z.optional(z.boolean()),
      canComment: z.optional(z.boolean()),
      canCopy: z.optional(z.boolean()),
      canDeleteChildren: z.optional(z.boolean()),
      canDeleteTeamDrive: z.optional(z.boolean()),
      canDownload: z.optional(z.boolean()),
      canEdit: z.optional(z.boolean()),
      canListChildren: z.optional(z.boolean()),
      canManageMembers: z.optional(z.boolean()),
      canReadRevisions: z.optional(z.boolean()),
      canRemoveChildren: z.optional(z.boolean()),
      canRename: z.optional(z.boolean()),
      canRenameTeamDrive: z.optional(z.boolean()),
      canResetTeamDriveRestrictions: z.optional(z.boolean()),
      canShare: z.optional(z.boolean()),
      canTrashChildren: z.optional(z.boolean())
    })
  ),
  colorRgb: z.optional(z.string()),
  createdTime: z.optional(z.iso.datetime()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#teamDrive'),
  name: z.optional(z.string()),
  orgUnitId: z.optional(z.string()),
  restrictions: z.optional(
    z.object({
      adminManagedRestrictions: z.optional(z.boolean()),
      copyRequiresWriterPermission: z.optional(z.boolean()),
      domainUsersOnly: z.optional(z.boolean()),
      sharingFoldersRequiresOrganizerPermission: z.optional(z.boolean()),
      teamMembersOnly: z.optional(z.boolean())
    })
  ),
  themeId: z.optional(z.string())
})

/**
 * A change to a file or shared drive.
 */
export const zChange = z.object({
  changeType: z.optional(z.string()),
  drive: z.optional(zDrive),
  driveId: z.optional(z.string()),
  file: z.optional(zFile),
  fileId: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#change'),
  removed: z.optional(z.boolean()),
  teamDrive: z.optional(zTeamDrive),
  teamDriveId: z.optional(z.string()),
  time: z.optional(z.iso.datetime()),
  type: z.optional(z.string())
})

/**
 * A list of changes for a user.
 */
export const zChangeList = z.object({
  changes: z.optional(z.array(zChange)),
  kind: z.optional(z.string()).default('drive#changeList'),
  newStartPageToken: z.optional(z.string()),
  nextPageToken: z.optional(z.string())
})

/**
 * An notification channel used to watch for resource changes.
 */
export const zChannel = z.object({
  address: z.optional(z.string()),
  expiration: z.optional(z.string()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('api#channel'),
  params: z.optional(z.record(z.string(), z.string())),
  payload: z.optional(z.boolean()),
  resourceId: z.optional(z.string()),
  resourceUri: z.optional(z.string()),
  token: z.optional(z.string()),
  type: z.optional(z.string())
})

/**
 * A reply to a comment on a file.
 */
export const zReply = z.object({
  action: z.optional(z.string()),
  author: z.optional(zUser),
  content: z.optional(z.string()),
  createdTime: z.optional(z.iso.datetime()),
  deleted: z.optional(z.boolean()),
  htmlContent: z.optional(z.string()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#reply'),
  modifiedTime: z.optional(z.iso.datetime())
})

/**
 * A comment on a file.
 */
export const zComment = z.object({
  anchor: z.optional(z.string()),
  author: z.optional(zUser),
  content: z.optional(z.string()),
  createdTime: z.optional(z.iso.datetime()),
  deleted: z.optional(z.boolean()),
  htmlContent: z.optional(z.string()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#comment'),
  modifiedTime: z.optional(z.iso.datetime()),
  quotedFileContent: z.optional(
    z.object({
      mimeType: z.optional(z.string()),
      value: z.optional(z.string())
    })
  ),
  replies: z.optional(z.array(zReply)),
  resolved: z.optional(z.boolean())
})

/**
 * A list of comments on a file.
 */
export const zCommentList = z.object({
  comments: z.optional(z.array(zComment)),
  kind: z.optional(z.string()).default('drive#commentList'),
  nextPageToken: z.optional(z.string())
})

/**
 * A list of shared drives.
 */
export const zDriveList = z.object({
  drives: z.optional(z.array(zDrive)),
  kind: z.optional(z.string()).default('drive#driveList'),
  nextPageToken: z.optional(z.string())
})

/**
 * A list of files.
 */
export const zFileList = z.object({
  files: z.optional(z.array(zFile)),
  incompleteSearch: z.optional(z.boolean()),
  kind: z.optional(z.string()).default('drive#fileList'),
  nextPageToken: z.optional(z.string())
})

/**
 * A list of generated file IDs which can be provided in create requests.
 */
export const zGeneratedIds = z.object({
  ids: z.optional(z.array(z.string())),
  kind: z.optional(z.string()).default('drive#generatedIds'),
  space: z.optional(z.string())
})

/**
 * A modification to a label's field.
 */
export const zLabelFieldModification = z.object({
  fieldId: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#labelFieldModification'),
  setDateValues: z.optional(z.array(z.iso.date())),
  setIntegerValues: z.optional(z.array(z.string())),
  setSelectionValues: z.optional(z.array(z.string())),
  setTextValues: z.optional(z.array(z.string())),
  setUserValues: z.optional(z.array(z.string())),
  unsetValues: z.optional(z.boolean())
})

/**
 * A list of labels.
 */
export const zLabelList = z.object({
  kind: z.optional(z.string()).default('drive#labelList'),
  labels: z.optional(z.array(zLabel)),
  nextPageToken: z.optional(z.string())
})

/**
 * A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
 */
export const zLabelModification = z.object({
  fieldModifications: z.optional(z.array(zLabelFieldModification)),
  kind: z.optional(z.string()).default('drive#labelModification'),
  labelId: z.optional(z.string()),
  removeLabel: z.optional(z.boolean())
})

/**
 * A request to modify the set of labels on a file. This request may contain many modifications that will either all succeed or all fail transactionally.
 */
export const zModifyLabelsRequest = z.object({
  kind: z.optional(z.string()).default('drive#modifyLabelsRequest'),
  labelModifications: z.optional(z.array(zLabelModification))
})

/**
 * Response to a ModifyLabels request. This contains only those labels which were added or updated by the request.
 */
export const zModifyLabelsResponse = z.object({
  kind: z.optional(z.string()).default('drive#modifyLabelsResponse'),
  modifiedLabels: z.optional(z.array(zLabel))
})

/**
 * A list of permissions for a file.
 */
export const zPermissionList = z.object({
  kind: z.optional(z.string()).default('drive#permissionList'),
  nextPageToken: z.optional(z.string()),
  permissions: z.optional(z.array(zPermission))
})

/**
 * A list of replies to a comment on a file.
 */
export const zReplyList = z.object({
  kind: z.optional(z.string()).default('drive#replyList'),
  nextPageToken: z.optional(z.string()),
  replies: z.optional(z.array(zReply))
})

/**
 * The metadata for a revision to a file.
 */
export const zRevision = z.object({
  exportLinks: z.optional(z.record(z.string(), z.string())),
  id: z.optional(z.string()),
  keepForever: z.optional(z.boolean()),
  kind: z.optional(z.string()).default('drive#revision'),
  lastModifyingUser: z.optional(zUser),
  md5Checksum: z.optional(z.string()),
  mimeType: z.optional(z.string()),
  modifiedTime: z.optional(z.iso.datetime()),
  originalFilename: z.optional(z.string()),
  publishAuto: z.optional(z.boolean()),
  published: z.optional(z.boolean()),
  publishedLink: z.optional(z.string()),
  publishedOutsideDomain: z.optional(z.boolean()),
  size: z.optional(z.string())
})

/**
 * A list of revisions of a file.
 */
export const zRevisionList = z.object({
  kind: z.optional(z.string()).default('drive#revisionList'),
  nextPageToken: z.optional(z.string()),
  revisions: z.optional(z.array(zRevision))
})

export const zStartPageToken = z.object({
  kind: z.optional(z.string()).default('drive#startPageToken'),
  startPageToken: z.optional(z.string())
})

/**
 * A list of Team Drives.
 */
export const zTeamDriveList = z.object({
  kind: z.optional(z.string()).default('drive#teamDriveList'),
  nextPageToken: z.optional(z.string()),
  teamDrives: z.optional(z.array(zTeamDrive))
})

/**
 * A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy.
 */
export const zPermissionWritable = z.object({
  allowFileDiscovery: z.optional(z.boolean()),
  deleted: z.optional(z.boolean()),
  displayName: z.optional(z.string()),
  domain: z.optional(z.string()),
  emailAddress: z.optional(z.string()),
  expirationTime: z.optional(z.iso.datetime()),
  id: z.optional(z.string()),
  kind: z.optional(z.string()).default('drive#permission'),
  pendingOwner: z.optional(z.boolean()),
  photoLink: z.optional(z.string()),
  role: z.optional(z.string()),
  type: z.optional(z.string()),
  view: z.optional(z.string())
})

/**
 * The metadata for a file.
 */
export const zFileWritable = z.object({
  appProperties: z.optional(z.record(z.string(), z.string())),
  capabilities: z.optional(
    z.object({
      canAcceptOwnership: z.optional(z.boolean()),
      canAddChildren: z.optional(z.boolean()),
      canAddFolderFromAnotherDrive: z.optional(z.boolean()),
      canAddMyDriveParent: z.optional(z.boolean()),
      canChangeCopyRequiresWriterPermission: z.optional(z.boolean()),
      canChangeSecurityUpdateEnabled: z.optional(z.boolean()),
      canChangeViewersCanCopyContent: z.optional(z.boolean()),
      canComment: z.optional(z.boolean()),
      canCopy: z.optional(z.boolean()),
      canDelete: z.optional(z.boolean()),
      canDeleteChildren: z.optional(z.boolean()),
      canDownload: z.optional(z.boolean()),
      canEdit: z.optional(z.boolean()),
      canListChildren: z.optional(z.boolean()),
      canModifyContent: z.optional(z.boolean()),
      canModifyContentRestriction: z.optional(z.boolean()),
      canModifyLabels: z.optional(z.boolean()),
      canMoveChildrenOutOfDrive: z.optional(z.boolean()),
      canMoveChildrenOutOfTeamDrive: z.optional(z.boolean()),
      canMoveChildrenWithinDrive: z.optional(z.boolean()),
      canMoveChildrenWithinTeamDrive: z.optional(z.boolean()),
      canMoveItemIntoTeamDrive: z.optional(z.boolean()),
      canMoveItemOutOfDrive: z.optional(z.boolean()),
      canMoveItemOutOfTeamDrive: z.optional(z.boolean()),
      canMoveItemWithinDrive: z.optional(z.boolean()),
      canMoveItemWithinTeamDrive: z.optional(z.boolean()),
      canMoveTeamDriveItem: z.optional(z.boolean()),
      canReadDrive: z.optional(z.boolean()),
      canReadLabels: z.optional(z.boolean()),
      canReadRevisions: z.optional(z.boolean()),
      canReadTeamDrive: z.optional(z.boolean()),
      canRemoveChildren: z.optional(z.boolean()),
      canRemoveMyDriveParent: z.optional(z.boolean()),
      canRename: z.optional(z.boolean()),
      canShare: z.optional(z.boolean()),
      canTrash: z.optional(z.boolean()),
      canTrashChildren: z.optional(z.boolean()),
      canUntrash: z.optional(z.boolean())
    })
  ),
  contentHints: z.optional(
    z.object({
      indexableText: z.optional(z.string()),
      thumbnail: z.optional(
        z.object({
          image: z.optional(z.string()),
          mimeType: z.optional(z.string())
        })
      )
    })
  ),
  contentRestrictions: z.optional(z.array(zContentRestriction)),
  copyRequiresWriterPermission: z.optional(z.boolean()),
  createdTime: z.optional(z.iso.datetime()),
  description: z.optional(z.string()),
  driveId: z.optional(z.string()),
  explicitlyTrashed: z.optional(z.boolean()),
  fileExtension: z.optional(z.string()),
  folderColorRgb: z.optional(z.string()),
  fullFileExtension: z.optional(z.string()),
  hasAugmentedPermissions: z.optional(z.boolean()),
  hasThumbnail: z.optional(z.boolean()),
  headRevisionId: z.optional(z.string()),
  iconLink: z.optional(z.string()),
  id: z.optional(z.string()),
  imageMediaMetadata: z.optional(
    z.object({
      aperture: z.optional(z.number()),
      cameraMake: z.optional(z.string()),
      cameraModel: z.optional(z.string()),
      colorSpace: z.optional(z.string()),
      exposureBias: z.optional(z.number()),
      exposureMode: z.optional(z.string()),
      exposureTime: z.optional(z.number()),
      flashUsed: z.optional(z.boolean()),
      focalLength: z.optional(z.number()),
      height: z.optional(z.int()),
      isoSpeed: z.optional(z.int()),
      lens: z.optional(z.string()),
      location: z.optional(
        z.object({
          altitude: z.optional(z.number()),
          latitude: z.optional(z.number()),
          longitude: z.optional(z.number())
        })
      ),
      maxApertureValue: z.optional(z.number()),
      meteringMode: z.optional(z.string()),
      rotation: z.optional(z.int()),
      sensor: z.optional(z.string()),
      subjectDistance: z.optional(z.int()),
      time: z.optional(z.string()),
      whiteBalance: z.optional(z.string()),
      width: z.optional(z.int())
    })
  ),
  isAppAuthorized: z.optional(z.boolean()),
  kind: z.optional(z.string()).default('drive#file'),
  labelInfo: z.optional(
    z.object({
      labels: z.optional(z.array(zLabel))
    })
  ),
  lastModifyingUser: z.optional(zUser),
  linkShareMetadata: z.optional(
    z.object({
      securityUpdateEligible: z.optional(z.boolean()),
      securityUpdateEnabled: z.optional(z.boolean())
    })
  ),
  md5Checksum: z.optional(z.string()),
  mimeType: z.optional(z.string()),
  modifiedByMe: z.optional(z.boolean()),
  modifiedByMeTime: z.optional(z.iso.datetime()),
  modifiedTime: z.optional(z.iso.datetime()),
  name: z.optional(z.string()),
  originalFilename: z.optional(z.string()),
  ownedByMe: z.optional(z.boolean()),
  owners: z.optional(z.array(zUser)),
  parents: z.optional(z.array(z.string())),
  permissionIds: z.optional(z.array(z.string())),
  permissions: z.optional(z.array(zPermissionWritable)),
  properties: z.optional(z.record(z.string(), z.string())),
  quotaBytesUsed: z.optional(z.string()),
  resourceKey: z.optional(z.string()),
  sha1Checksum: z.optional(z.string()),
  sha256Checksum: z.optional(z.string()),
  shared: z.optional(z.boolean()),
  sharedWithMeTime: z.optional(z.iso.datetime()),
  sharingUser: z.optional(zUser),
  shortcutDetails: z.optional(
    z.object({
      targetId: z.optional(z.string()),
      targetMimeType: z.optional(z.string()),
      targetResourceKey: z.optional(z.string())
    })
  ),
  size: z.optional(z.string()),
  spaces: z.optional(z.array(z.string())),
  starred: z.optional(z.boolean()),
  teamDriveId: z.optional(z.string()),
  thumbnailLink: z.optional(z.string()),
  thumbnailVersion: z.optional(z.string()),
  trashed: z.optional(z.boolean()),
  trashedTime: z.optional(z.iso.datetime()),
  trashingUser: z.optional(zUser),
  version: z.optional(z.string()),
  videoMediaMetadata: z.optional(
    z.object({
      durationMillis: z.optional(z.string()),
      height: z.optional(z.int()),
      width: z.optional(z.int())
    })
  ),
  viewedByMe: z.optional(z.boolean()),
  viewedByMeTime: z.optional(z.iso.datetime()),
  viewersCanCopyContent: z.optional(z.boolean()),
  webContentLink: z.optional(z.string()),
  webViewLink: z.optional(z.string()),
  writersCanShare: z.optional(z.boolean())
})

/**
 * Data format for the response.
 */
export const zAlt = z.enum(['json'])

/**
 * Selector specifying which fields to include in a partial response.
 */
export const zFields = z.string()

/**
 * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
 */
export const zKey = z.string()

/**
 * OAuth 2.0 token for the current user.
 */
export const zOauthToken = z.string()

/**
 * Returns response with indentations and line breaks.
 */
export const zPrettyPrint = z.boolean()

/**
 * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
 */
export const zQuotaUser = z.string()

/**
 * Deprecated. Please use quotaUser instead.
 */
export const zUserIp = z.string()

export const zDriveAboutGetData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveAboutGetResponse = zAbout

export const zDriveChangesListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    alt: z.optional(z.enum(['json'])),
    fields: z.optional(z.string()),
    key: z.optional(z.string()),
    oauth_token: z.optional(z.string()),
    prettyPrint: z.optional(z.boolean()),
    quotaUser: z.optional(z.string()),
    userIp: z.optional(z.string()),
    pageToken: z.string(),
    driveId: z.optional(z.string()),
    includeCorpusRemovals: z.optional(z.boolean()),
    includeItemsFromAllDrives: z.optional(z.boolean()),
    includeLabels: z.optional(z.string()),
    includePermissionsForView: z.optional(z.string()),
    includeRemoved: z.optional(z.boolean()),
    includeTeamDriveItems: z.optional(z.boolean()),
    pageSize: z.optional(z.int().gte(1).lte(1000)),
    restrictToMyDrive: z.optional(z.boolean()),
    spaces: z.optional(z.string()),
    supportsAllDrives: z.optional(z.boolean()),
    supportsTeamDrives: z.optional(z.boolean()),
    teamDriveId: z.optional(z.string())
  })
})

/**
 * Successful response
 */
export const zDriveChangesListResponse = zChangeList

export const zDriveChangesGetStartPageTokenData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      driveId: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      teamDriveId: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveChangesGetStartPageTokenResponse = zStartPageToken

export const zDriveChangesWatchData = z.object({
  body: z.optional(zChannel),
  path: z.optional(z.never()),
  query: z.object({
    alt: z.optional(z.enum(['json'])),
    fields: z.optional(z.string()),
    key: z.optional(z.string()),
    oauth_token: z.optional(z.string()),
    prettyPrint: z.optional(z.boolean()),
    quotaUser: z.optional(z.string()),
    userIp: z.optional(z.string()),
    pageToken: z.string(),
    driveId: z.optional(z.string()),
    includeCorpusRemovals: z.optional(z.boolean()),
    includeItemsFromAllDrives: z.optional(z.boolean()),
    includeLabels: z.optional(z.string()),
    includePermissionsForView: z.optional(z.string()),
    includeRemoved: z.optional(z.boolean()),
    includeTeamDriveItems: z.optional(z.boolean()),
    pageSize: z.optional(z.int().gte(1).lte(1000)),
    restrictToMyDrive: z.optional(z.boolean()),
    spaces: z.optional(z.string()),
    supportsAllDrives: z.optional(z.boolean()),
    supportsTeamDrives: z.optional(z.boolean()),
    teamDriveId: z.optional(z.string())
  })
})

/**
 * Successful response
 */
export const zDriveChangesWatchResponse = zChannel

export const zDriveChannelsStopData = z.object({
  body: z.optional(zChannel),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

export const zDriveDrivesListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      pageSize: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string()),
      q: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveDrivesListResponse = zDriveList

export const zDriveDrivesCreateData = z.object({
  body: z.optional(zDrive),
  path: z.optional(z.never()),
  query: z.object({
    alt: z.optional(z.enum(['json'])),
    fields: z.optional(z.string()),
    key: z.optional(z.string()),
    oauth_token: z.optional(z.string()),
    prettyPrint: z.optional(z.boolean()),
    quotaUser: z.optional(z.string()),
    userIp: z.optional(z.string()),
    requestId: z.string()
  })
})

/**
 * Successful response
 */
export const zDriveDrivesCreateResponse = zDrive

export const zDriveDrivesDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    driveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      allowItemDeletion: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

export const zDriveDrivesGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    driveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveDrivesGetResponse = zDrive

export const zDriveDrivesUpdateData = z.object({
  body: z.optional(zDrive),
  path: z.object({
    driveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveDrivesUpdateResponse = zDrive

export const zDriveDrivesHideData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    driveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveDrivesHideResponse = zDrive

export const zDriveDrivesUnhideData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    driveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveDrivesUnhideResponse = zDrive

export const zDriveFilesListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      corpora: z.optional(z.string()),
      corpus: z.optional(z.enum(['domain', 'user'])),
      driveId: z.optional(z.string()),
      includeItemsFromAllDrives: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      includeTeamDriveItems: z.optional(z.boolean()),
      orderBy: z.optional(z.string()),
      pageSize: z.optional(z.int().gte(1).lte(1000)),
      pageToken: z.optional(z.string()),
      q: z.optional(z.string()),
      spaces: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      teamDriveId: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesListResponse = zFileList

export const zDriveFilesCreateData = z.object({
  body: z.optional(zFileWritable),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean()),
      ignoreDefaultVisibility: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      keepRevisionForever: z.optional(z.boolean()),
      ocrLanguage: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      useContentAsIndexableText: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesCreateResponse = zFile

export const zDriveFilesGenerateIdsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      count: z.optional(z.int().gte(1).lte(1000)),
      space: z.optional(z.string()),
      type: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesGenerateIdsResponse = zGeneratedIds

export const zDriveFilesEmptyTrashData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      driveId: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean())
    })
  )
})

export const zDriveFilesDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean())
    })
  )
})

export const zDriveFilesGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      acknowledgeAbuse: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesGetResponse = zFile

export const zDriveFilesUpdateData = z.object({
  body: z.optional(zFileWritable),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      addParents: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      keepRevisionForever: z.optional(z.boolean()),
      ocrLanguage: z.optional(z.string()),
      removeParents: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      useContentAsIndexableText: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesUpdateResponse = zFile

export const zDriveCommentsListData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      includeDeleted: z.optional(z.boolean()),
      pageSize: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string()),
      startModifiedTime: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveCommentsListResponse = zCommentList

export const zDriveCommentsCreateData = z.object({
  body: z.optional(zComment),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveCommentsCreateResponse = zComment

export const zDriveCommentsDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    commentId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

export const zDriveCommentsGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    commentId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      includeDeleted: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveCommentsGetResponse = zComment

export const zDriveCommentsUpdateData = z.object({
  body: z.optional(zComment),
  path: z.object({
    fileId: z.string(),
    commentId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveCommentsUpdateResponse = zComment

export const zDriveRepliesListData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    commentId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      includeDeleted: z.optional(z.boolean()),
      pageSize: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRepliesListResponse = zReplyList

export const zDriveRepliesCreateData = z.object({
  body: z.optional(zReply),
  path: z.object({
    fileId: z.string(),
    commentId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRepliesCreateResponse = zReply

export const zDriveRepliesDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    commentId: z.string(),
    replyId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

export const zDriveRepliesGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    commentId: z.string(),
    replyId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      includeDeleted: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRepliesGetResponse = zReply

export const zDriveRepliesUpdateData = z.object({
  body: z.optional(zReply),
  path: z.object({
    fileId: z.string(),
    commentId: z.string(),
    replyId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRepliesUpdateResponse = zReply

export const zDriveFilesCopyData = z.object({
  body: z.optional(zFileWritable),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean()),
      ignoreDefaultVisibility: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      keepRevisionForever: z.optional(z.boolean()),
      ocrLanguage: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesCopyResponse = zFile

export const zDriveFilesExportData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.object({
    alt: z.optional(z.enum(['json'])),
    fields: z.optional(z.string()),
    key: z.optional(z.string()),
    oauth_token: z.optional(z.string()),
    prettyPrint: z.optional(z.boolean()),
    quotaUser: z.optional(z.string()),
    userIp: z.optional(z.string()),
    mimeType: z.string()
  })
})

export const zDriveFilesListLabelsData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      maxResults: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesListLabelsResponse = zLabelList

export const zDriveFilesModifyLabelsData = z.object({
  body: z.optional(zModifyLabelsRequest),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesModifyLabelsResponse = zModifyLabelsResponse

export const zDrivePermissionsListData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      pageSize: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDrivePermissionsListResponse = zPermissionList

export const zDrivePermissionsCreateData = z.object({
  body: z.optional(zPermissionWritable),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      emailMessage: z.optional(z.string()),
      enforceSingleParent: z.optional(z.boolean()),
      moveToNewOwnersRoot: z.optional(z.boolean()),
      sendNotificationEmail: z.optional(z.boolean()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      transferOwnership: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDrivePermissionsCreateResponse = zPermission

export const zDrivePermissionsDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    permissionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

export const zDrivePermissionsGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    permissionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDrivePermissionsGetResponse = zPermission

export const zDrivePermissionsUpdateData = z.object({
  body: z.optional(zPermissionWritable),
  path: z.object({
    fileId: z.string(),
    permissionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      removeExpiration: z.optional(z.boolean()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean()),
      transferOwnership: z.optional(z.boolean()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDrivePermissionsUpdateResponse = zPermission

export const zDriveRevisionsListData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      pageSize: z.optional(z.int().gte(1).lte(1000)),
      pageToken: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRevisionsListResponse = zRevisionList

export const zDriveRevisionsDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    revisionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

export const zDriveRevisionsGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    fileId: z.string(),
    revisionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      acknowledgeAbuse: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRevisionsGetResponse = zRevision

export const zDriveRevisionsUpdateData = z.object({
  body: z.optional(zRevision),
  path: z.object({
    fileId: z.string(),
    revisionId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

/**
 * Successful response
 */
export const zDriveRevisionsUpdateResponse = zRevision

export const zDriveFilesWatchData = z.object({
  body: z.optional(zChannel),
  path: z.object({
    fileId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      acknowledgeAbuse: z.optional(z.boolean()),
      includeLabels: z.optional(z.string()),
      includePermissionsForView: z.optional(z.string()),
      supportsAllDrives: z.optional(z.boolean()),
      supportsTeamDrives: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveFilesWatchResponse = zChannel

export const zDriveTeamdrivesListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      pageSize: z.optional(z.int().gte(1).lte(100)),
      pageToken: z.optional(z.string()),
      q: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveTeamdrivesListResponse = zTeamDriveList

export const zDriveTeamdrivesCreateData = z.object({
  body: z.optional(zTeamDrive),
  path: z.optional(z.never()),
  query: z.object({
    alt: z.optional(z.enum(['json'])),
    fields: z.optional(z.string()),
    key: z.optional(z.string()),
    oauth_token: z.optional(z.string()),
    prettyPrint: z.optional(z.boolean()),
    quotaUser: z.optional(z.string()),
    userIp: z.optional(z.string()),
    requestId: z.string()
  })
})

/**
 * Successful response
 */
export const zDriveTeamdrivesCreateResponse = zTeamDrive

export const zDriveTeamdrivesDeleteData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    teamDriveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string())
    })
  )
})

export const zDriveTeamdrivesGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    teamDriveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveTeamdrivesGetResponse = zTeamDrive

export const zDriveTeamdrivesUpdateData = z.object({
  body: z.optional(zTeamDrive),
  path: z.object({
    teamDriveId: z.string()
  }),
  query: z.optional(
    z.object({
      alt: z.optional(z.enum(['json'])),
      fields: z.optional(z.string()),
      key: z.optional(z.string()),
      oauth_token: z.optional(z.string()),
      prettyPrint: z.optional(z.boolean()),
      quotaUser: z.optional(z.string()),
      userIp: z.optional(z.string()),
      useDomainAdminAccess: z.optional(z.boolean())
    })
  )
})

/**
 * Successful response
 */
export const zDriveTeamdrivesUpdateResponse = zTeamDrive
