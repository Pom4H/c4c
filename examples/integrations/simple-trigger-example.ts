/**
 * Simple Trigger Example - Simplified Approach
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.
 * –ù–∏–∫–∞–∫–∏—Ö pause/resume, –Ω–∏–∫–∞–∫–æ–≥–æ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
 */

import { collectRegistry } from "@c4c/core";
import { createTriggerWorkflowManager, type WorkflowDefinition } from "@c4c/workflow";
import { WebhookRegistry, createHttpServer } from "@c4c/adapters";

/**
 * 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º workflow —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
 */
const googleDriveMonitor: WorkflowDefinition = {
	id: "drive-monitor",
	name: "Google Drive Monitor",
	version: "1.0.0",
	
	// –≠—Ç–æ trigger-based workflow
	isTriggered: true,
	
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
	trigger: {
		provider: "googleDrive",
		triggerProcedure: "googleDrive.drive.changes.watch",
		eventType: "change", // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ "change" —Å–æ–±—ã—Ç–∏—è
	},
	
	startNode: "on-file-change",
	
	nodes: [
		// Trigger node - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
		{
			id: "on-file-change",
			type: "trigger",
			procedureName: "googleDrive.drive.changes.watch",
			next: "log-event",
		},
		
		// –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
		{
			id: "log-event",
			type: "procedure",
			procedureName: "custom.log",
			config: {
				message: "üìÅ File changed: {{ trigger.payload.file.name }}",
			},
			next: "process-file",
		},
		
		// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª
		{
			id: "process-file",
			type: "procedure",
			procedureName: "custom.processFile",
			config: {
				fileId: "{{ trigger.payload.fileId }}",
				fileName: "{{ trigger.payload.file.name }}",
			},
		},
	],
};

/**
 * 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
 */
async function main() {
	console.log("üöÄ Starting trigger example...\n");
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º registry —Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
	const registry = await collectRegistry("./procedures");
	
	// –°–æ–∑–¥–∞–µ–º webhook registry
	const webhookRegistry = new WebhookRegistry();
	
	// –°–æ–∑–¥–∞–µ–º trigger manager
	const triggerManager = createTriggerWorkflowManager(registry, webhookRegistry);
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook'–æ–≤
	const server = createHttpServer(registry, 3000, {
		enableWebhooks: true,
		webhookRegistry,
	});
	
	console.log("‚úÖ HTTP Server running on port 3000");
	console.log("üì° Webhook endpoint: http://localhost:3000/webhooks/googleDrive\n");
	
	// –î–µ–ø–ª–æ–∏–º workflow - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç webhook subscription
	console.log("üì¶ Deploying workflow...");
	
	const subscription = await triggerManager.deploy(googleDriveMonitor, {
		webhookUrl: "http://localhost:3000/webhooks/googleDrive",
	});
	
	console.log("‚úÖ Workflow deployed successfully!");
	console.log("   Workflow ID:", subscription.workflowId);
	console.log("   Subscription ID:", subscription.subscriptionId);
	console.log("   Provider:", subscription.provider);
	console.log("   Expires:", subscription.expiresAt || "Never");
	console.log();
	
	console.log("üéØ System is ready!");
	console.log("   Waiting for Google Drive events...");
	console.log("   When a file changes:");
	console.log("   1. Google Drive sends webhook");
	console.log("   2. Workflow executes automatically");
	console.log("   3. Workflow completes and exits");
	console.log();
	
	// Graceful shutdown
	process.on("SIGINT", async () => {
		console.log("\n\nüõë Shutting down...");
		
		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ workflows (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ cleanup subscriptions)
		await triggerManager.stopAll();
		
		console.log("‚úÖ All workflows stopped");
		console.log("üëã Goodbye!");
		
		process.exit(0);
	});
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä
 */
if (import.meta.url === `file://${process.argv[1]}`) {
	main().catch((error) => {
		console.error("‚ùå Fatal error:", error);
		process.exit(1);
	});
}

/**
 * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤:
 * 
 * –°–¢–ê–†–´–ô –ü–û–î–•–û–î (—Å–ª–æ–∂–Ω—ã–π):
 * ‚ùå –°–æ–∑–¥–∞—Ç—å subscription node
 * ‚ùå –°–æ–∑–¥–∞—Ç—å pause node
 * ‚ùå –í—Ä—É—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å EventRouter
 * ‚ùå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å resume handlers
 * ‚ùå –£–ø—Ä–∞–≤–ª—è—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤ workflow –ª–æ–≥–∏–∫–µ
 * ‚ùå Loop –æ–±—Ä–∞—Ç–Ω–æ –∫ pause
 * 
 * –ù–û–í–´–ô –ü–û–î–•–û–î (–ø—Ä–æ—Å—Ç–æ–π):
 * ‚úÖ –û–±—ä—è–≤–∏—Ç—å trigger node
 * ‚úÖ –í—ã–∑–≤–∞—Ç—å triggerManager.deploy()
 * ‚úÖ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 * 
 * 
 * –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º:
 * 
 * 1. DEPLOYMENT
 *    triggerManager.deploy() ‚Üí
 *    - –í—ã–∑—ã–≤–∞–µ—Ç googleDrive.drive.changes.watch
 *    - –ü–æ–ª—É—á–∞–µ—Ç subscription info
 *    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç event handler
 *    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è cleanup
 * 
 * 2. EVENT ARRIVAL
 *    Google Drive ‚Üí webhook POST ‚Üí
 *    - HTTP Server –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
 *    - WebhookRegistry dispatches
 *    - TriggerWorkflowManager –ø–æ–ª—É—á–∞–µ—Ç event
 *    - –ó–∞–ø—É—Å–∫–∞–µ—Ç executeWorkflow() —Å event data
 *    - Workflow –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
 * 
 * 3. CLEANUP
 *    triggerManager.stop() ‚Üí
 *    - –ù–∞—Ö–æ–¥–∏—Ç stop procedure
 *    - –í—ã–∑—ã–≤–∞–µ—Ç googleDrive.drive.channels.stop
 *    - –£–¥–∞–ª—è–µ—Ç event handler
 *    - –û—á–∏—â–∞–µ—Ç subscription
 */
