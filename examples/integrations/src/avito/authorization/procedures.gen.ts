// This file is auto-generated by scripts/generate-contracts.mjs
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@tsdev/core";
import { withOAuth, getOAuthHeaders } from "@tsdev/policies";
import * as sdk from "../../../generated/avito/authorization/sdk.gen.js";
import * as zod from "../../../generated/avito/authorization/zod.gen.js";

export const AvitoAuthorizationPostTokenContract: Contract = {
  name: "avitoAuthorization.post.token",
  description: "Получение временного ключа для авторизации",
  input: zod.zPostTokenData,
  output: zod.zPostTokenResponse,
  metadata: {
    provider: "avitoAuthorization",
    operation: "postToken",
    tags: ["avito", "authorization"],
  },
};

const postTokenHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "avitoAuthorization");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postToken(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "avitoAuthorization",
    metadataTokenKey: "avitoAuthorizationToken",
    envVar: "AVITO_AUTHORIZATION_TOKEN",
  })
);

export const AvitoAuthorizationPostTokenProcedure: Procedure = {
  contract: AvitoAuthorizationPostTokenContract,
  handler: postTokenHandler,
};

export const AvitoAuthorizationProcedures: Procedure[] = [
  AvitoAuthorizationPostTokenProcedure
];
