// This file is auto-generated by scripts/generate-contracts.mjs
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@tsdev/core";
import { withOAuth, getOAuthHeaders } from "@tsdev/policies";
import * as sdk from "../../../generated/google/drive/sdk.gen.js";
import * as zod from "../../../generated/google/drive/zod.gen.js";

export const GoogleDriveDriveAboutGetContract: Contract = {
  name: "googleDrive.drive.about.get",
  description: "Gets information about the user, the user's Drive, and system capabilities.",
  input: zod.zDriveAboutGetData,
  output: zod.zDriveAboutGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveAboutGet",
    tags: ["google", "drive"],
  },
};

const driveAboutGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveAboutGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveAboutGetProcedure: Procedure = {
  contract: GoogleDriveDriveAboutGetContract,
  handler: driveAboutGetHandler,
};

export const GoogleDriveDriveChangesListContract: Contract = {
  name: "googleDrive.drive.changes.list",
  description: "Lists the changes for a user or shared drive.",
  input: zod.zDriveChangesListData,
  output: zod.zDriveChangesListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveChangesList",
    tags: ["google", "drive"],
  },
};

const driveChangesListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveChangesList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveChangesListProcedure: Procedure = {
  contract: GoogleDriveDriveChangesListContract,
  handler: driveChangesListHandler,
};

export const GoogleDriveDriveChangesGetStartPageTokenContract: Contract = {
  name: "googleDrive.drive.changes.get.start.page.token",
  description: "Gets the starting pageToken for listing future changes.",
  input: zod.zDriveChangesGetStartPageTokenData,
  output: zod.zDriveChangesGetStartPageTokenResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveChangesGetStartPageToken",
    tags: ["google", "drive"],
  },
};

const driveChangesGetStartPageTokenHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveChangesGetStartPageToken(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveChangesGetStartPageTokenProcedure: Procedure = {
  contract: GoogleDriveDriveChangesGetStartPageTokenContract,
  handler: driveChangesGetStartPageTokenHandler,
};

export const GoogleDriveDriveChangesWatchContract: Contract = {
  name: "googleDrive.drive.changes.watch",
  description: "Subscribes to changes for a user. To use this method, you must include the pageToken query parameter.",
  input: zod.zDriveChangesWatchData,
  output: zod.zDriveChangesWatchResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveChangesWatch",
    tags: ["google", "drive"],
  },
};

const driveChangesWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveChangesWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveChangesWatchProcedure: Procedure = {
  contract: GoogleDriveDriveChangesWatchContract,
  handler: driveChangesWatchHandler,
};

export const GoogleDriveDriveDrivesListContract: Contract = {
  name: "googleDrive.drive.drives.list",
  description: "Lists the user's shared drives.",
  input: zod.zDriveDrivesListData,
  output: zod.zDriveDrivesListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesList",
    tags: ["google", "drive"],
  },
};

const driveDrivesListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesListProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesListContract,
  handler: driveDrivesListHandler,
};

export const GoogleDriveDriveDrivesCreateContract: Contract = {
  name: "googleDrive.drive.drives.create",
  description: "Creates a shared drive.",
  input: zod.zDriveDrivesCreateData,
  output: zod.zDriveDrivesCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesCreate",
    tags: ["google", "drive"],
  },
};

const driveDrivesCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesCreateProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesCreateContract,
  handler: driveDrivesCreateHandler,
};

export const GoogleDriveDriveDrivesGetContract: Contract = {
  name: "googleDrive.drive.drives.get",
  description: "Gets a shared drive's metadata by ID.",
  input: zod.zDriveDrivesGetData,
  output: zod.zDriveDrivesGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesGet",
    tags: ["google", "drive"],
  },
};

const driveDrivesGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesGetProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesGetContract,
  handler: driveDrivesGetHandler,
};

export const GoogleDriveDriveDrivesUpdateContract: Contract = {
  name: "googleDrive.drive.drives.update",
  description: "Updates the metadata for a shared drive.",
  input: zod.zDriveDrivesUpdateData,
  output: zod.zDriveDrivesUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesUpdate",
    tags: ["google", "drive"],
  },
};

const driveDrivesUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesUpdateContract,
  handler: driveDrivesUpdateHandler,
};

export const GoogleDriveDriveDrivesHideContract: Contract = {
  name: "googleDrive.drive.drives.hide",
  description: "Hides a shared drive from the default view.",
  input: zod.zDriveDrivesHideData,
  output: zod.zDriveDrivesHideResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesHide",
    tags: ["google", "drive"],
  },
};

const driveDrivesHideHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesHide(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesHideProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesHideContract,
  handler: driveDrivesHideHandler,
};

export const GoogleDriveDriveDrivesUnhideContract: Contract = {
  name: "googleDrive.drive.drives.unhide",
  description: "Restores a shared drive to the default view.",
  input: zod.zDriveDrivesUnhideData,
  output: zod.zDriveDrivesUnhideResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveDrivesUnhide",
    tags: ["google", "drive"],
  },
};

const driveDrivesUnhideHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveDrivesUnhide(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveDrivesUnhideProcedure: Procedure = {
  contract: GoogleDriveDriveDrivesUnhideContract,
  handler: driveDrivesUnhideHandler,
};

export const GoogleDriveDriveFilesListContract: Contract = {
  name: "googleDrive.drive.files.list",
  description: "Lists or searches files.",
  input: zod.zDriveFilesListData,
  output: zod.zDriveFilesListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesList",
    tags: ["google", "drive"],
  },
};

const driveFilesListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesListProcedure: Procedure = {
  contract: GoogleDriveDriveFilesListContract,
  handler: driveFilesListHandler,
};

export const GoogleDriveDriveFilesCreateContract: Contract = {
  name: "googleDrive.drive.files.create",
  description: "Creates a file.",
  input: zod.zDriveFilesCreateData,
  output: zod.zDriveFilesCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesCreate",
    tags: ["google", "drive"],
  },
};

const driveFilesCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesCreateProcedure: Procedure = {
  contract: GoogleDriveDriveFilesCreateContract,
  handler: driveFilesCreateHandler,
};

export const GoogleDriveDriveFilesGenerateIdsContract: Contract = {
  name: "googleDrive.drive.files.generate.ids",
  description: "Generates a set of file IDs which can be provided in create or copy requests.",
  input: zod.zDriveFilesGenerateIdsData,
  output: zod.zDriveFilesGenerateIdsResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesGenerateIds",
    tags: ["google", "drive"],
  },
};

const driveFilesGenerateIdsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesGenerateIds(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesGenerateIdsProcedure: Procedure = {
  contract: GoogleDriveDriveFilesGenerateIdsContract,
  handler: driveFilesGenerateIdsHandler,
};

export const GoogleDriveDriveFilesGetContract: Contract = {
  name: "googleDrive.drive.files.get",
  description: "Gets a file's metadata or content by ID.",
  input: zod.zDriveFilesGetData,
  output: zod.zDriveFilesGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesGet",
    tags: ["google", "drive"],
  },
};

const driveFilesGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesGetProcedure: Procedure = {
  contract: GoogleDriveDriveFilesGetContract,
  handler: driveFilesGetHandler,
};

export const GoogleDriveDriveFilesUpdateContract: Contract = {
  name: "googleDrive.drive.files.update",
  description: "Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might change automatically, such as modifiedDate. This method supports patch semantics.",
  input: zod.zDriveFilesUpdateData,
  output: zod.zDriveFilesUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesUpdate",
    tags: ["google", "drive"],
  },
};

const driveFilesUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveFilesUpdateContract,
  handler: driveFilesUpdateHandler,
};

export const GoogleDriveDriveCommentsListContract: Contract = {
  name: "googleDrive.drive.comments.list",
  description: "Lists a file's comments.",
  input: zod.zDriveCommentsListData,
  output: zod.zDriveCommentsListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveCommentsList",
    tags: ["google", "drive"],
  },
};

const driveCommentsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveCommentsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveCommentsListProcedure: Procedure = {
  contract: GoogleDriveDriveCommentsListContract,
  handler: driveCommentsListHandler,
};

export const GoogleDriveDriveCommentsCreateContract: Contract = {
  name: "googleDrive.drive.comments.create",
  description: "Creates a comment on a file.",
  input: zod.zDriveCommentsCreateData,
  output: zod.zDriveCommentsCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveCommentsCreate",
    tags: ["google", "drive"],
  },
};

const driveCommentsCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveCommentsCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveCommentsCreateProcedure: Procedure = {
  contract: GoogleDriveDriveCommentsCreateContract,
  handler: driveCommentsCreateHandler,
};

export const GoogleDriveDriveCommentsGetContract: Contract = {
  name: "googleDrive.drive.comments.get",
  description: "Gets a comment by ID.",
  input: zod.zDriveCommentsGetData,
  output: zod.zDriveCommentsGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveCommentsGet",
    tags: ["google", "drive"],
  },
};

const driveCommentsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveCommentsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveCommentsGetProcedure: Procedure = {
  contract: GoogleDriveDriveCommentsGetContract,
  handler: driveCommentsGetHandler,
};

export const GoogleDriveDriveCommentsUpdateContract: Contract = {
  name: "googleDrive.drive.comments.update",
  description: "Updates a comment with patch semantics.",
  input: zod.zDriveCommentsUpdateData,
  output: zod.zDriveCommentsUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveCommentsUpdate",
    tags: ["google", "drive"],
  },
};

const driveCommentsUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveCommentsUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveCommentsUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveCommentsUpdateContract,
  handler: driveCommentsUpdateHandler,
};

export const GoogleDriveDriveRepliesListContract: Contract = {
  name: "googleDrive.drive.replies.list",
  description: "Lists a comment's replies.",
  input: zod.zDriveRepliesListData,
  output: zod.zDriveRepliesListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRepliesList",
    tags: ["google", "drive"],
  },
};

const driveRepliesListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRepliesList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRepliesListProcedure: Procedure = {
  contract: GoogleDriveDriveRepliesListContract,
  handler: driveRepliesListHandler,
};

export const GoogleDriveDriveRepliesCreateContract: Contract = {
  name: "googleDrive.drive.replies.create",
  description: "Creates a reply to a comment.",
  input: zod.zDriveRepliesCreateData,
  output: zod.zDriveRepliesCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRepliesCreate",
    tags: ["google", "drive"],
  },
};

const driveRepliesCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRepliesCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRepliesCreateProcedure: Procedure = {
  contract: GoogleDriveDriveRepliesCreateContract,
  handler: driveRepliesCreateHandler,
};

export const GoogleDriveDriveRepliesGetContract: Contract = {
  name: "googleDrive.drive.replies.get",
  description: "Gets a reply by ID.",
  input: zod.zDriveRepliesGetData,
  output: zod.zDriveRepliesGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRepliesGet",
    tags: ["google", "drive"],
  },
};

const driveRepliesGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRepliesGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRepliesGetProcedure: Procedure = {
  contract: GoogleDriveDriveRepliesGetContract,
  handler: driveRepliesGetHandler,
};

export const GoogleDriveDriveRepliesUpdateContract: Contract = {
  name: "googleDrive.drive.replies.update",
  description: "Updates a reply with patch semantics.",
  input: zod.zDriveRepliesUpdateData,
  output: zod.zDriveRepliesUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRepliesUpdate",
    tags: ["google", "drive"],
  },
};

const driveRepliesUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRepliesUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRepliesUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveRepliesUpdateContract,
  handler: driveRepliesUpdateHandler,
};

export const GoogleDriveDriveFilesCopyContract: Contract = {
  name: "googleDrive.drive.files.copy",
  description: "Creates a copy of a file and applies any requested updates with patch semantics. Folders cannot be copied.",
  input: zod.zDriveFilesCopyData,
  output: zod.zDriveFilesCopyResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesCopy",
    tags: ["google", "drive"],
  },
};

const driveFilesCopyHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesCopy(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesCopyProcedure: Procedure = {
  contract: GoogleDriveDriveFilesCopyContract,
  handler: driveFilesCopyHandler,
};

export const GoogleDriveDriveFilesListLabelsContract: Contract = {
  name: "googleDrive.drive.files.list.labels",
  description: "Lists the labels on a file.",
  input: zod.zDriveFilesListLabelsData,
  output: zod.zDriveFilesListLabelsResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesListLabels",
    tags: ["google", "drive"],
  },
};

const driveFilesListLabelsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesListLabels(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesListLabelsProcedure: Procedure = {
  contract: GoogleDriveDriveFilesListLabelsContract,
  handler: driveFilesListLabelsHandler,
};

export const GoogleDriveDriveFilesModifyLabelsContract: Contract = {
  name: "googleDrive.drive.files.modify.labels",
  description: "Modifies the set of labels on a file.",
  input: zod.zDriveFilesModifyLabelsData,
  output: zod.zDriveFilesModifyLabelsResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesModifyLabels",
    tags: ["google", "drive"],
  },
};

const driveFilesModifyLabelsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesModifyLabels(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesModifyLabelsProcedure: Procedure = {
  contract: GoogleDriveDriveFilesModifyLabelsContract,
  handler: driveFilesModifyLabelsHandler,
};

export const GoogleDriveDrivePermissionsListContract: Contract = {
  name: "googleDrive.drive.permissions.list",
  description: "Lists a file's or shared drive's permissions.",
  input: zod.zDrivePermissionsListData,
  output: zod.zDrivePermissionsListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "drivePermissionsList",
    tags: ["google", "drive"],
  },
};

const drivePermissionsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.drivePermissionsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDrivePermissionsListProcedure: Procedure = {
  contract: GoogleDriveDrivePermissionsListContract,
  handler: drivePermissionsListHandler,
};

export const GoogleDriveDrivePermissionsCreateContract: Contract = {
  name: "googleDrive.drive.permissions.create",
  description: "Creates a permission for a file or shared drive. For more information on creating permissions, see Share files, folders & drives.",
  input: zod.zDrivePermissionsCreateData,
  output: zod.zDrivePermissionsCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "drivePermissionsCreate",
    tags: ["google", "drive"],
  },
};

const drivePermissionsCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.drivePermissionsCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDrivePermissionsCreateProcedure: Procedure = {
  contract: GoogleDriveDrivePermissionsCreateContract,
  handler: drivePermissionsCreateHandler,
};

export const GoogleDriveDrivePermissionsGetContract: Contract = {
  name: "googleDrive.drive.permissions.get",
  description: "Gets a permission by ID.",
  input: zod.zDrivePermissionsGetData,
  output: zod.zDrivePermissionsGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "drivePermissionsGet",
    tags: ["google", "drive"],
  },
};

const drivePermissionsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.drivePermissionsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDrivePermissionsGetProcedure: Procedure = {
  contract: GoogleDriveDrivePermissionsGetContract,
  handler: drivePermissionsGetHandler,
};

export const GoogleDriveDrivePermissionsUpdateContract: Contract = {
  name: "googleDrive.drive.permissions.update",
  description: "Updates a permission with patch semantics.",
  input: zod.zDrivePermissionsUpdateData,
  output: zod.zDrivePermissionsUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "drivePermissionsUpdate",
    tags: ["google", "drive"],
  },
};

const drivePermissionsUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.drivePermissionsUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDrivePermissionsUpdateProcedure: Procedure = {
  contract: GoogleDriveDrivePermissionsUpdateContract,
  handler: drivePermissionsUpdateHandler,
};

export const GoogleDriveDriveRevisionsListContract: Contract = {
  name: "googleDrive.drive.revisions.list",
  description: "Lists a file's revisions.",
  input: zod.zDriveRevisionsListData,
  output: zod.zDriveRevisionsListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRevisionsList",
    tags: ["google", "drive"],
  },
};

const driveRevisionsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRevisionsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRevisionsListProcedure: Procedure = {
  contract: GoogleDriveDriveRevisionsListContract,
  handler: driveRevisionsListHandler,
};

export const GoogleDriveDriveRevisionsGetContract: Contract = {
  name: "googleDrive.drive.revisions.get",
  description: "Gets a revision's metadata or content by ID.",
  input: zod.zDriveRevisionsGetData,
  output: zod.zDriveRevisionsGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRevisionsGet",
    tags: ["google", "drive"],
  },
};

const driveRevisionsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRevisionsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRevisionsGetProcedure: Procedure = {
  contract: GoogleDriveDriveRevisionsGetContract,
  handler: driveRevisionsGetHandler,
};

export const GoogleDriveDriveRevisionsUpdateContract: Contract = {
  name: "googleDrive.drive.revisions.update",
  description: "Updates a revision with patch semantics.",
  input: zod.zDriveRevisionsUpdateData,
  output: zod.zDriveRevisionsUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveRevisionsUpdate",
    tags: ["google", "drive"],
  },
};

const driveRevisionsUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveRevisionsUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveRevisionsUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveRevisionsUpdateContract,
  handler: driveRevisionsUpdateHandler,
};

export const GoogleDriveDriveFilesWatchContract: Contract = {
  name: "googleDrive.drive.files.watch",
  description: "Subscribes to changes to a file.",
  input: zod.zDriveFilesWatchData,
  output: zod.zDriveFilesWatchResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveFilesWatch",
    tags: ["google", "drive"],
  },
};

const driveFilesWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveFilesWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveFilesWatchProcedure: Procedure = {
  contract: GoogleDriveDriveFilesWatchContract,
  handler: driveFilesWatchHandler,
};

export const GoogleDriveDriveTeamdrivesListContract: Contract = {
  name: "googleDrive.drive.teamdrives.list",
  description: "Deprecated use drives.list instead.",
  input: zod.zDriveTeamdrivesListData,
  output: zod.zDriveTeamdrivesListResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveTeamdrivesList",
    tags: ["google", "drive"],
  },
};

const driveTeamdrivesListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveTeamdrivesList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveTeamdrivesListProcedure: Procedure = {
  contract: GoogleDriveDriveTeamdrivesListContract,
  handler: driveTeamdrivesListHandler,
};

export const GoogleDriveDriveTeamdrivesCreateContract: Contract = {
  name: "googleDrive.drive.teamdrives.create",
  description: "Deprecated use drives.create instead.",
  input: zod.zDriveTeamdrivesCreateData,
  output: zod.zDriveTeamdrivesCreateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveTeamdrivesCreate",
    tags: ["google", "drive"],
  },
};

const driveTeamdrivesCreateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveTeamdrivesCreate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveTeamdrivesCreateProcedure: Procedure = {
  contract: GoogleDriveDriveTeamdrivesCreateContract,
  handler: driveTeamdrivesCreateHandler,
};

export const GoogleDriveDriveTeamdrivesGetContract: Contract = {
  name: "googleDrive.drive.teamdrives.get",
  description: "Deprecated use drives.get instead.",
  input: zod.zDriveTeamdrivesGetData,
  output: zod.zDriveTeamdrivesGetResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveTeamdrivesGet",
    tags: ["google", "drive"],
  },
};

const driveTeamdrivesGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveTeamdrivesGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveTeamdrivesGetProcedure: Procedure = {
  contract: GoogleDriveDriveTeamdrivesGetContract,
  handler: driveTeamdrivesGetHandler,
};

export const GoogleDriveDriveTeamdrivesUpdateContract: Contract = {
  name: "googleDrive.drive.teamdrives.update",
  description: "Deprecated use drives.update instead",
  input: zod.zDriveTeamdrivesUpdateData,
  output: zod.zDriveTeamdrivesUpdateResponse,
  metadata: {
    provider: "googleDrive",
    operation: "driveTeamdrivesUpdate",
    tags: ["google", "drive"],
  },
};

const driveTeamdrivesUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "googleDrive");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.driveTeamdrivesUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "googleDrive",
    metadataTokenKey: "googleDriveToken",
    envVar: "GOOGLE_DRIVE_TOKEN",
  })
);

export const GoogleDriveDriveTeamdrivesUpdateProcedure: Procedure = {
  contract: GoogleDriveDriveTeamdrivesUpdateContract,
  handler: driveTeamdrivesUpdateHandler,
};

export const GoogleDriveProcedures: Procedure[] = [
  GoogleDriveDriveAboutGetProcedure,
  GoogleDriveDriveChangesListProcedure,
  GoogleDriveDriveChangesGetStartPageTokenProcedure,
  GoogleDriveDriveChangesWatchProcedure,
  GoogleDriveDriveDrivesListProcedure,
  GoogleDriveDriveDrivesCreateProcedure,
  GoogleDriveDriveDrivesGetProcedure,
  GoogleDriveDriveDrivesUpdateProcedure,
  GoogleDriveDriveDrivesHideProcedure,
  GoogleDriveDriveDrivesUnhideProcedure,
  GoogleDriveDriveFilesListProcedure,
  GoogleDriveDriveFilesCreateProcedure,
  GoogleDriveDriveFilesGenerateIdsProcedure,
  GoogleDriveDriveFilesGetProcedure,
  GoogleDriveDriveFilesUpdateProcedure,
  GoogleDriveDriveCommentsListProcedure,
  GoogleDriveDriveCommentsCreateProcedure,
  GoogleDriveDriveCommentsGetProcedure,
  GoogleDriveDriveCommentsUpdateProcedure,
  GoogleDriveDriveRepliesListProcedure,
  GoogleDriveDriveRepliesCreateProcedure,
  GoogleDriveDriveRepliesGetProcedure,
  GoogleDriveDriveRepliesUpdateProcedure,
  GoogleDriveDriveFilesCopyProcedure,
  GoogleDriveDriveFilesListLabelsProcedure,
  GoogleDriveDriveFilesModifyLabelsProcedure,
  GoogleDriveDrivePermissionsListProcedure,
  GoogleDriveDrivePermissionsCreateProcedure,
  GoogleDriveDrivePermissionsGetProcedure,
  GoogleDriveDrivePermissionsUpdateProcedure,
  GoogleDriveDriveRevisionsListProcedure,
  GoogleDriveDriveRevisionsGetProcedure,
  GoogleDriveDriveRevisionsUpdateProcedure,
  GoogleDriveDriveFilesWatchProcedure,
  GoogleDriveDriveTeamdrivesListProcedure,
  GoogleDriveDriveTeamdrivesCreateProcedure,
  GoogleDriveDriveTeamdrivesGetProcedure,
  GoogleDriveDriveTeamdrivesUpdateProcedure
];
