/**
 * Example: Using triggers in workflows (SIMPLIFIED APPROACH)
 * 
 * –¢—Ä–∏–≥–≥–µ—Ä - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ workflow.
 * –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–±—ã—Ç–∏–µ, workflow –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞.
 */

import type { WorkflowDefinition } from "@c4c/workflow";

/**
 * Example 1: Google Drive file monitoring
 * 
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Google Drive –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
 */
export const googleDriveMonitor: WorkflowDefinition = {
	id: "google-drive-monitor",
	name: "Google Drive File Monitor",
	description: "Monitors Google Drive for file changes and processes them",
	version: "1.0.0",
	
	// –£–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —ç—Ç–æ trigger-based workflow
	isTriggered: true,
	
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
	trigger: {
		provider: "googleDrive",
		triggerProcedure: "googleDrive.drive.changes.watch",
		eventType: "change", // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ "change" —Å–æ–±—ã—Ç–∏—è
	},
	
	startNode: "on-file-change",
	
	nodes: [
		// Trigger node - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
		{
			id: "on-file-change",
			type: "trigger",
			procedureName: "googleDrive.drive.changes.watch",
			next: "log-event",
		},
		
		// –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
		{
			id: "log-event",
			type: "procedure",
			procedureName: "custom.logEvent",
			config: {
				message: "File changed: {{ trigger.payload.file.name }}",
				event: "{{ trigger }}",
			},
			next: "check-file-type",
		},
		
		// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞
		{
			id: "check-file-type",
			type: "condition",
			config: {
				expression: "trigger.payload.file.mimeType === 'application/pdf'",
				trueBranch: "process-pdf",
				falseBranch: "skip",
			},
		},
		
		// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF
		{
			id: "process-pdf",
			type: "procedure",
			procedureName: "custom.processPDF",
			config: {
				fileId: "{{ trigger.payload.fileId }}",
				fileName: "{{ trigger.payload.file.name }}",
			},
			next: "notify",
		},
		
		// –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ-PDF —Ñ–∞–π–ª—ã
		{
			id: "skip",
			type: "procedure",
			procedureName: "custom.log",
			config: {
				message: "Skipped non-PDF file",
			},
		},
		
		// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		{
			id: "notify",
			type: "procedure",
			procedureName: "custom.sendNotification",
			config: {
				message: "Processed PDF: {{ trigger.payload.file.name }}",
			},
		},
	],
};

/**
 * Example 2: Slack bot
 * 
 * –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Slack
 */
export const slackBot: WorkflowDefinition = {
	id: "slack-bot",
	name: "Slack Bot",
	description: "Responds to Slack messages",
	version: "1.0.0",
	
	isTriggered: true,
	
	trigger: {
		provider: "slack",
		triggerProcedure: "slack.events.subscribe",
		eventType: "message",
	},
	
	startNode: "on-message",
	
	nodes: [
		{
			id: "on-message",
			type: "trigger",
			procedureName: "slack.events.subscribe",
			next: "parse-command",
		},
		{
			id: "parse-command",
			type: "procedure",
			procedureName: "custom.parseSlackCommand",
			config: {
				text: "{{ trigger.payload.event.text }}",
				user: "{{ trigger.payload.event.user }}",
				channel: "{{ trigger.payload.event.channel }}",
			},
			next: "check-command",
		},
		{
			id: "check-command",
			type: "condition",
			config: {
				expression: "outputs['parse-command'].isCommand === true",
				trueBranch: "execute-command",
				falseBranch: "ignore",
			},
		},
		{
			id: "execute-command",
			type: "procedure",
			procedureName: "custom.executeSlackCommand",
		},
		{
			id: "ignore",
			type: "procedure",
			procedureName: "custom.log",
			config: {
				message: "Not a command, ignoring",
			},
		},
	],
};

/**
 * Example 3: Multi-step processing with error handling
 * 
 * –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π workflow —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export const complexTriggerWorkflow: WorkflowDefinition = {
	id: "complex-trigger-workflow",
	name: "Complex Trigger Workflow",
	version: "1.0.0",
	
	isTriggered: true,
	
	trigger: {
		provider: "googleDrive",
		triggerProcedure: "googleDrive.drive.changes.watch",
		subscriptionConfig: {
			// –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
			pageToken: "start-token",
		},
	},
	
	startNode: "trigger",
	
	nodes: [
		{
			id: "trigger",
			type: "trigger",
			procedureName: "googleDrive.drive.changes.watch",
			next: "validate",
		},
		{
			id: "validate",
			type: "procedure",
			procedureName: "custom.validateEvent",
			config: {
				event: "{{ trigger }}",
			},
			next: "parallel-processing",
			onError: "handle-error", // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
		},
		{
			id: "parallel-processing",
			type: "parallel",
			config: {
				branches: ["download-file", "update-database"],
				waitForAll: true,
			},
			next: "finalize",
		},
		{
			id: "download-file",
			type: "procedure",
			procedureName: "custom.downloadFile",
			config: {
				fileId: "{{ trigger.payload.fileId }}",
			},
		},
		{
			id: "update-database",
			type: "procedure",
			procedureName: "custom.updateDatabase",
			config: {
				fileId: "{{ trigger.payload.fileId }}",
				metadata: "{{ trigger.payload.file }}",
			},
		},
		{
			id: "finalize",
			type: "procedure",
			procedureName: "custom.finalize",
			config: {
				message: "Processing complete",
			},
		},
		{
			id: "handle-error",
			type: "procedure",
			procedureName: "custom.handleError",
			config: {
				error: "{{ error }}",
				event: "{{ trigger }}",
			},
		},
	],
};

/**
 * Usage example:
 */
export async function deployTriggerWorkflow() {
	// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥
	
	const { collectRegistry } = await import("@c4c/core");
	const { createTriggerWorkflowManager } = await import("@c4c/workflow");
	const { WebhookRegistry, createHttpServer } = await import("@c4c/adapters");
	
	// 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
	const registry = await collectRegistry("./procedures");
	const webhookRegistry = new WebhookRegistry();
	const triggerManager = createTriggerWorkflowManager(registry, webhookRegistry);
	
	// 2. –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook'–æ–≤
	const server = createHttpServer(registry, 3000, {
		enableWebhooks: true,
		webhookRegistry,
	});
	
	console.log("üöÄ Server running on port 3000");
	console.log("üì° Webhook endpoint: http://localhost:3000/webhooks/googleDrive");
	
	// 3. –î–µ–ø–ª–æ–π workflow - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç subscription
	const subscription = await triggerManager.deploy(googleDriveMonitor, {
		webhookUrl: "http://localhost:3000/webhooks/googleDrive",
	});
	
	console.log("‚úÖ Workflow deployed:", {
		workflowId: subscription.workflowId,
		subscriptionId: subscription.subscriptionId,
		provider: subscription.provider,
	});
	
	// Workflow —Ç–µ–ø–µ—Ä—å —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è!
	// –ö–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–¥–µ—Ç:
	// 1. HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–º–µ—Ç webhook POST
	// 2. TriggerWorkflowManager –∑–∞–ø—É—Å—Ç–∏—Ç workflow
	// 3. Workflow –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ—Ç trigger –Ω–æ–¥—ã –¥–æ –∫–æ–Ω—Ü–∞
	// 4. Workflow –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
	
	// –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:
	// await triggerManager.stop("google-drive-monitor");
	
	// –ò–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ:
	// await triggerManager.stopAll();
}

/**
 * Comparison with old approach:
 * 
 * OLD (complex):
 * - Create subscription node
 * - Create pause node
 * - Manage EventRouter manually
 * - Register resume handlers
 * - Loop back to pause
 * 
 * NEW (simple):
 * - Just define trigger node
 * - Deploy with triggerManager.deploy()
 * - Everything else is automatic
 */
