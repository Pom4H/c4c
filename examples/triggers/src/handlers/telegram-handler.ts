/**
 * Telegram Bot Event Handler
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram –∏—Å–ø–æ–ª—å–∑—É—è
 * —Ç–∏–ø—ã –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä
 */

import { defineContract, defineProcedure } from '@c4c/core';
import { z } from 'zod';

// ==========================================
// 1. –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –¢–ò–ü–´ –ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –ü–†–û–¶–ï–î–£–†
// ==========================================

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –∏–∑ generated/telegram/schemas.gen.ts
import * as TelegramSchemas from '../../../generated/telegram/schemas.gen.js';

// ==========================================
// 2. –û–ü–†–ï–î–ï–õ–Ø–ï–ú –°–•–ï–ú–´ –°–û–ë–´–¢–ò–ô
// ==========================================

/**
 * Telegram Update - –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç Telegram
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON Schema –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */
const TelegramUpdateSchema = z.object({
  update_id: z.number(),
  message: z.object({
    message_id: z.number(),
    from: z.object({
      id: z.number(),
      is_bot: z.boolean().optional(),
      first_name: z.string(),
      last_name: z.string().optional(),
      username: z.string().optional(),
    }),
    chat: z.object({
      id: z.number(),
      type: z.enum(['private', 'group', 'supergroup', 'channel']),
      title: z.string().optional(),
      username: z.string().optional(),
      first_name: z.string().optional(),
      last_name: z.string().optional(),
    }),
    date: z.number(),
    text: z.string().optional(),
    photo: z.array(z.any()).optional(),
    document: z.any().optional(),
  }).optional(),
  edited_message: z.any().optional(),
  channel_post: z.any().optional(),
  callback_query: z.object({
    id: z.string(),
    from: z.any(),
    message: z.any().optional(),
    data: z.string().optional(),
  }).optional(),
});

// TypeScript —Ç–∏–ø—ã –∏–∑ —Å—Ö–µ–º
type TelegramUpdate = z.infer<typeof TelegramUpdateSchema>;
type TelegramMessage = NonNullable<TelegramUpdate['message']>;
type TelegramCallbackQuery = NonNullable<TelegramUpdate['callback_query']>;

// ==========================================
// 3. –ü–†–û–¶–ï–î–£–†–ê –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
// ==========================================

export const handleTelegramMessageContract = defineContract({
  name: 'telegram.handle.message',
  description: 'Handle incoming Telegram text message',
  input: z.object({
    update: TelegramUpdateSchema,
  }),
  output: z.object({
    reply: z.string(),
    shouldReply: z.boolean(),
    actions: z.array(z.string()).optional(),
  }),
  metadata: {
    exposure: 'internal' as const,
    roles: ['workflow-node'],
    tags: ['telegram', 'handler'],
  },
});

export const handleTelegramMessage = defineProcedure({
  contract: handleTelegramMessageContract,
  handler: async (input, context) => {
    const { update } = input;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!update.message?.text) {
      return {
        reply: '',
        shouldReply: false,
      };
    }
    
    const message = update.message;
    const text = message.text.toLowerCase();
    
    console.log(`[Telegram] Received message from ${message.from.first_name}: ${message.text}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith('/start')) {
      return {
        reply: `–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}! üëã\n\n–Ø –±–æ—Ç –Ω–∞ c4c framework.\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`,
        shouldReply: true,
        actions: ['log_user', 'send_welcome'],
      };
    }
    
    if (text.startsWith('/help')) {
      return {
        reply: `üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n` +
               `/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n` +
               `/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n` +
               `/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n` +
               `/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`,
        shouldReply: true,
      };
    }
    
    if (text.startsWith('/status')) {
      return {
        reply: `‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n\n–í—Ä–µ–º—è: ${new Date().toISOString()}`,
        shouldReply: true,
      };
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (text.includes('–ø—Ä–∏–≤–µ—Ç') || text.includes('hello')) {
      return {
        reply: `–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?`,
        shouldReply: true,
      };
    }
    
    // –≠—Ö–æ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    return {
      reply: `–í—ã —Å–∫–∞–∑–∞–ª–∏: "${message.text}"`,
      shouldReply: true,
      actions: ['echo'],
    };
  },
});

// ==========================================
// 4. –ü–†–û–¶–ï–î–£–†–ê –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò CALLBACK QUERY
// ==========================================

export const handleTelegramCallbackContract = defineContract({
  name: 'telegram.handle.callback',
  description: 'Handle Telegram callback query from inline keyboard',
  input: z.object({
    update: TelegramUpdateSchema,
  }),
  output: z.object({
    answer: z.string(),
    showAlert: z.boolean(),
    editMessage: z.boolean(),
    newText: z.string().optional(),
  }),
  metadata: {
    exposure: 'internal' as const,
    roles: ['workflow-node'],
    tags: ['telegram', 'handler', 'callback'],
  },
});

export const handleTelegramCallback = defineProcedure({
  contract: handleTelegramCallbackContract,
  handler: async (input, context) => {
    const { update } = input;
    
    if (!update.callback_query) {
      return {
        answer: '',
        showAlert: false,
        editMessage: false,
      };
    }
    
    const callback = update.callback_query;
    const data = callback.data || '';
    
    console.log(`[Telegram] Callback query: ${data} from user ${callback.from.id}`);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö callback data
    if (data === 'subscribe') {
      return {
        answer: '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! ‚úÖ',
        showAlert: true,
        editMessage: true,
        newText: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
      };
    }
    
    if (data === 'unsubscribe') {
      return {
        answer: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        showAlert: false,
        editMessage: true,
        newText: '–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
      };
    }
    
    if (data.startsWith('action_')) {
      const action = data.replace('action_', '');
      return {
        answer: `–í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${action}`,
        showAlert: false,
        editMessage: false,
      };
    }
    
    return {
      answer: '–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      showAlert: false,
      editMessage: false,
    };
  },
});

// ==========================================
// 5. –†–û–£–¢–ï–† –°–û–ë–´–¢–ò–ô - –û–ü–†–ï–î–ï–õ–Ø–ï–¢ –¢–ò–ü –°–û–ë–´–¢–ò–Ø
// ==========================================

export const routeTelegramEventContract = defineContract({
  name: 'telegram.route.event',
  description: 'Route Telegram update to appropriate handler',
  input: z.object({
    update: TelegramUpdateSchema,
  }),
  output: z.object({
    eventType: z.enum([
      'message',
      'edited_message',
      'callback_query',
      'channel_post',
      'unknown',
    ]),
    shouldProcess: z.boolean(),
    metadata: z.record(z.unknown()).optional(),
  }),
  metadata: {
    exposure: 'internal' as const,
    roles: ['workflow-node'],
    tags: ['telegram', 'router'],
  },
});

export const routeTelegramEvent = defineProcedure({
  contract: routeTelegramEventContract,
  handler: async (input, context) => {
    const { update } = input;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if (update.message) {
      return {
        eventType: 'message',
        shouldProcess: true,
        metadata: {
          chatId: update.message.chat.id,
          userId: update.message.from.id,
          hasText: !!update.message.text,
          hasPhoto: !!update.message.photo,
        },
      };
    }
    
    if (update.edited_message) {
      return {
        eventType: 'edited_message',
        shouldProcess: true,
        metadata: {
          messageId: update.edited_message.message_id,
        },
      };
    }
    
    if (update.callback_query) {
      return {
        eventType: 'callback_query',
        shouldProcess: true,
        metadata: {
          callbackData: update.callback_query.data,
          userId: update.callback_query.from.id,
        },
      };
    }
    
    if (update.channel_post) {
      return {
        eventType: 'channel_post',
        shouldProcess: false, // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö
      };
    }
    
    return {
      eventType: 'unknown',
      shouldProcess: false,
    };
  },
});

// ==========================================
// 6. –≠–ö–°–ü–û–†–¢ –í–°–ï–• –ü–†–û–¶–ï–î–£–†
// ==========================================

export const TelegramHandlers = [
  handleTelegramMessage,
  handleTelegramCallback,
  routeTelegramEvent,
];
