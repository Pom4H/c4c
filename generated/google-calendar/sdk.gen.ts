// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { CalendarCalendarsInsertData, CalendarCalendarsInsertResponse, CalendarCalendarsDeleteData, CalendarCalendarsGetData, CalendarCalendarsGetResponse, CalendarCalendarsPatchData, CalendarCalendarsPatchResponse, CalendarCalendarsUpdateData, CalendarCalendarsUpdateResponse, CalendarAclListData, CalendarAclListResponse, CalendarAclInsertData, CalendarAclInsertResponse, CalendarAclWatchData, CalendarAclWatchResponse, CalendarAclDeleteData, CalendarAclGetData, CalendarAclGetResponse, CalendarAclPatchData, CalendarAclPatchResponse, CalendarAclUpdateData, CalendarAclUpdateResponse, CalendarCalendarsClearData, CalendarEventsListData, CalendarEventsListResponse, CalendarEventsInsertData, CalendarEventsInsertResponse, CalendarEventsImportData, CalendarEventsImportResponse, CalendarEventsQuickAddData, CalendarEventsQuickAddResponse, CalendarEventsWatchData, CalendarEventsWatchResponse, CalendarEventsDeleteData, CalendarEventsGetData, CalendarEventsGetResponse, CalendarEventsPatchData, CalendarEventsPatchResponse, CalendarEventsUpdateData, CalendarEventsUpdateResponse, CalendarEventsInstancesData, CalendarEventsInstancesResponse, CalendarEventsMoveData, CalendarEventsMoveResponse, CalendarChannelsStopData, CalendarColorsGetData, CalendarColorsGetResponse, CalendarFreebusyQueryData, CalendarFreebusyQueryResponse, CalendarCalendarListListData, CalendarCalendarListListResponse, CalendarCalendarListInsertData, CalendarCalendarListInsertResponse, CalendarCalendarListWatchData, CalendarCalendarListWatchResponse, CalendarCalendarListDeleteData, CalendarCalendarListGetData, CalendarCalendarListGetResponse, CalendarCalendarListPatchData, CalendarCalendarListPatchResponse, CalendarCalendarListUpdateData, CalendarCalendarListUpdateResponse, CalendarSettingsListData, CalendarSettingsListResponse, CalendarSettingsWatchData, CalendarSettingsWatchResponse, CalendarSettingsGetData, CalendarSettingsGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Creates a secondary calendar.
 */
export const calendarCalendarsInsert = <ThrowOnError extends boolean = false>(options?: Options<CalendarCalendarsInsertData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarCalendarsInsertResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
 */
export const calendarCalendarsDelete = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}',
        ...options
    });
};

/**
 * Returns metadata for a calendar.
 */
export const calendarCalendarsGet = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarCalendarsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}',
        ...options
    });
};

/**
 * Updates metadata for a calendar. This method supports patch semantics.
 */
export const calendarCalendarsPatch = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarsPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<CalendarCalendarsPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates metadata for a calendar.
 */
export const calendarCalendarsUpdate = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<CalendarCalendarsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the rules in the access control list for the calendar.
 */
export const calendarAclList = <ThrowOnError extends boolean = false>(options: Options<CalendarAclListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarAclListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl',
        ...options
    });
};

/**
 * Creates an access control rule.
 */
export const calendarAclInsert = <ThrowOnError extends boolean = false>(options: Options<CalendarAclInsertData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarAclInsertResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Watch for changes to ACL resources.
 */
export const calendarAclWatch = <ThrowOnError extends boolean = false>(options: Options<CalendarAclWatchData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarAclWatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl/watch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes an access control rule.
 */
export const calendarAclDelete = <ThrowOnError extends boolean = false>(options: Options<CalendarAclDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl/{ruleId}',
        ...options
    });
};

/**
 * Returns an access control rule.
 */
export const calendarAclGet = <ThrowOnError extends boolean = false>(options: Options<CalendarAclGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarAclGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl/{ruleId}',
        ...options
    });
};

/**
 * Updates an access control rule. This method supports patch semantics.
 */
export const calendarAclPatch = <ThrowOnError extends boolean = false>(options: Options<CalendarAclPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<CalendarAclPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl/{ruleId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates an access control rule.
 */
export const calendarAclUpdate = <ThrowOnError extends boolean = false>(options: Options<CalendarAclUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<CalendarAclUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/acl/{ruleId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
 */
export const calendarCalendarsClear = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarsClearData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/clear',
        ...options
    });
};

/**
 * Returns events on the specified calendar.
 */
export const calendarEventsList = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarEventsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events',
        ...options
    });
};

/**
 * Creates an event.
 */
export const calendarEventsInsert = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsInsertData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarEventsInsertResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Imports an event. This operation is used to add a private copy of an existing event to a calendar.
 */
export const calendarEventsImport = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsImportData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarEventsImportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Creates an event based on a simple text string.
 */
export const calendarEventsQuickAdd = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsQuickAddData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarEventsQuickAddResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/quickAdd',
        ...options
    });
};

/**
 * Watch for changes to Events resources.
 */
export const calendarEventsWatch = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsWatchData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarEventsWatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/watch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deletes an event.
 */
export const calendarEventsDelete = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}',
        ...options
    });
};

/**
 * Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.
 */
export const calendarEventsGet = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarEventsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}',
        ...options
    });
};

/**
 * Updates an event. This method supports patch semantics.
 */
export const calendarEventsPatch = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<CalendarEventsPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates an event.
 */
export const calendarEventsUpdate = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<CalendarEventsUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns instances of the specified recurring event.
 */
export const calendarEventsInstances = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsInstancesData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarEventsInstancesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}/instances',
        ...options
    });
};

/**
 * Moves an event to another calendar, i.e. changes an event's organizer.
 */
export const calendarEventsMove = <ThrowOnError extends boolean = false>(options: Options<CalendarEventsMoveData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarEventsMoveResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/calendars/{calendarId}/events/{eventId}/move',
        ...options
    });
};

/**
 * Stop watching resources through this channel
 */
export const calendarChannelsStop = <ThrowOnError extends boolean = false>(options?: Options<CalendarChannelsStopData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channels/stop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the color definitions for calendars and events.
 */
export const calendarColorsGet = <ThrowOnError extends boolean = false>(options?: Options<CalendarColorsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarColorsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/colors',
        ...options
    });
};

/**
 * Returns free/busy information for a set of calendars.
 */
export const calendarFreebusyQuery = <ThrowOnError extends boolean = false>(options?: Options<CalendarFreebusyQueryData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarFreebusyQueryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/freeBusy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the calendars on the user's calendar list.
 */
export const calendarCalendarListList = <ThrowOnError extends boolean = false>(options?: Options<CalendarCalendarListListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarCalendarListListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList',
        ...options
    });
};

/**
 * Inserts an existing calendar into the user's calendar list.
 */
export const calendarCalendarListInsert = <ThrowOnError extends boolean = false>(options?: Options<CalendarCalendarListInsertData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarCalendarListInsertResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Watch for changes to CalendarList resources.
 */
export const calendarCalendarListWatch = <ThrowOnError extends boolean = false>(options?: Options<CalendarCalendarListWatchData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarCalendarListWatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList/watch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Removes a calendar from the user's calendar list.
 */
export const calendarCalendarListDelete = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarListDeleteData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList/{calendarId}',
        ...options
    });
};

/**
 * Returns a calendar from the user's calendar list.
 */
export const calendarCalendarListGet = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarListGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarCalendarListGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList/{calendarId}',
        ...options
    });
};

/**
 * Updates an existing calendar on the user's calendar list. This method supports patch semantics.
 */
export const calendarCalendarListPatch = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarListPatchData, ThrowOnError>) => {
    return (options?.client ?? client).patch<CalendarCalendarListPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList/{calendarId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Updates an existing calendar on the user's calendar list.
 */
export const calendarCalendarListUpdate = <ThrowOnError extends boolean = false>(options: Options<CalendarCalendarListUpdateData, ThrowOnError>) => {
    return (options?.client ?? client).put<CalendarCalendarListUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/calendarList/{calendarId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns all user settings for the authenticated user.
 */
export const calendarSettingsList = <ThrowOnError extends boolean = false>(options?: Options<CalendarSettingsListData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarSettingsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/settings',
        ...options
    });
};

/**
 * Watch for changes to Settings resources.
 */
export const calendarSettingsWatch = <ThrowOnError extends boolean = false>(options?: Options<CalendarSettingsWatchData, ThrowOnError>) => {
    return (options?.client ?? client).post<CalendarSettingsWatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/settings/watch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns a single user setting.
 */
export const calendarSettingsGet = <ThrowOnError extends boolean = false>(options: Options<CalendarSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<CalendarSettingsGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me/settings/{setting}',
        ...options
    });
};