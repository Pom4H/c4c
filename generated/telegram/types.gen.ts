// This file is auto-generated by @hey-api/openapi-ts

/**
 * This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).
 */
export type Animation = {
    /**
     * Duration of the video in seconds as defined by sender
     */
    duration: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. Original animation filename as defined by sender
     */
    file_name?: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * Video height as defined by sender
     */
    height: number;
    /**
     * *Optional*. MIME type of the file as defined by sender
     */
    mime_type?: string;
    thumb?: PhotoSize;
    /**
     * Video width as defined by sender
     */
    width: number;
};

/**
 * This object represents an audio file to be treated as music by the Telegram clients.
 */
export type Audio = {
    /**
     * Duration of the audio in seconds as defined by sender
     */
    duration: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. Original filename as defined by sender
     */
    file_name?: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * *Optional*. MIME type of the file as defined by sender
     */
    mime_type?: string;
    /**
     * *Optional*. Performer of the audio as defined by sender or by audio tags
     */
    performer?: string;
    thumb?: PhotoSize;
    /**
     * *Optional*. Title of the audio as defined by sender or by audio tags
     */
    title?: string;
};

/**
 * This object represents a bot command.
 */
export type BotCommand = {
    /**
     * Text of the command, 1-32 characters. Can contain only lowercase English letters, digits and underscores.
     */
    command: string;
    /**
     * Description of the command, 3-256 characters.
     */
    description: string;
};

/**
 * A placeholder, currently holds no information. Use [BotFather](https://t.me/botfather) to set up your game.
 */
export type CallbackGame = unknown;

/**
 * This object represents an incoming callback query from a callback button in an [inline keyboard](/bots#inline-keyboards-and-on-the-fly-updating). If the button that originated the query was attached to a message sent by the bot, the field *message* will be present. If the button was attached to a message sent via the bot (in [inline mode](https://core.telegram.org/bots/api/#inline-mode)), the field *inline\_message\_id* will be present. Exactly one of the fields *data* or *game\_short\_name* will be present.
 */
export type CallbackQuery = {
    /**
     * Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in [games](https://core.telegram.org/bots/api/#games).
     */
    chat_instance: string;
    /**
     * *Optional*. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.
     */
    data?: string;
    from: User;
    /**
     * *Optional*. Short name of a [Game](https://core.telegram.org/bots/api/#games) to be returned, serves as the unique identifier for the game
     */
    game_short_name?: string;
    /**
     * Unique identifier for this query
     */
    id: string;
    /**
     * *Optional*. Identifier of the message sent via the bot in inline mode, that originated the query.
     */
    inline_message_id?: string;
    message?: Message;
};

/**
 * This object represents a chat.
 */
export type Chat = {
    /**
     * *Optional*. Bio of the other party in a private chat. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    bio?: string;
    /**
     * *Optional*. True, if the bot can change the group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    can_set_sticker_set?: boolean;
    /**
     * *Optional*. Description, for groups, supergroups and channel chats. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    description?: string;
    /**
     * *Optional*. First name of the other party in a private chat
     */
    first_name?: string;
    /**
     * Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     */
    id: number;
    /**
     * *Optional*. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using [exportChatInviteLink](https://core.telegram.org/bots/api/#exportchatinvitelink). Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    invite_link?: string;
    /**
     * *Optional*. Last name of the other party in a private chat
     */
    last_name?: string;
    /**
     * *Optional*. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    linked_chat_id?: number;
    location?: ChatLocation;
    permissions?: ChatPermissions;
    photo?: ChatPhoto;
    pinned_message?: Message;
    /**
     * *Optional*. For supergroups, the minimum allowed delay between consecutive messages sent by each unpriviledged user. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    slow_mode_delay?: number;
    /**
     * *Optional*. For supergroups, name of group sticker set. Returned only in [getChat](https://core.telegram.org/bots/api/#getchat).
     */
    sticker_set_name?: string;
    /**
     * *Optional*. Title, for supergroups, channels and group chats
     */
    title?: string;
    /**
     * Type of chat, can be either “private”, “group”, “supergroup” or “channel”
     */
    type: 'private' | 'group' | 'supergroup' | 'channel';
    /**
     * *Optional*. Username, for private chats, supergroups and channels if available
     */
    username?: string;
};

/**
 * Represents a location to which a chat is connected.
 */
export type ChatLocation = {
    /**
     * Location address; 1-64 characters, as defined by the chat owner
     */
    address: string;
    location: Location;
};

/**
 * This object contains information about one member of a chat.
 */
export type ChatMember = {
    /**
     * *Optional*. Restricted only. True, if the user is allowed to add web page previews to their messages
     */
    can_add_web_page_previews?: boolean;
    /**
     * *Optional*. Administrators only. True, if the bot is allowed to edit administrator privileges of that user
     */
    can_be_edited?: boolean;
    /**
     * *Optional*. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings
     */
    can_change_info?: boolean;
    /**
     * *Optional*. Administrators only. True, if the administrator can delete messages of other users
     */
    can_delete_messages?: boolean;
    /**
     * *Optional*. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only
     */
    can_edit_messages?: boolean;
    /**
     * *Optional*. Administrators and restricted only. True, if the user is allowed to invite new users to the chat
     */
    can_invite_users?: boolean;
    /**
     * *Optional*. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only
     */
    can_pin_messages?: boolean;
    /**
     * *Optional*. Administrators only. True, if the administrator can post in the channel; channels only
     */
    can_post_messages?: boolean;
    /**
     * *Optional*. Administrators only. True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)
     */
    can_promote_members?: boolean;
    /**
     * *Optional*. Administrators only. True, if the administrator can restrict, ban or unban chat members
     */
    can_restrict_members?: boolean;
    /**
     * *Optional*. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes
     */
    can_send_media_messages?: boolean;
    /**
     * *Optional*. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues
     */
    can_send_messages?: boolean;
    /**
     * *Optional*. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots
     */
    can_send_other_messages?: boolean;
    /**
     * *Optional*. Restricted only. True, if the user is allowed to send polls
     */
    can_send_polls?: boolean;
    /**
     * *Optional*. Owner and administrators only. Custom title for this user
     */
    custom_title?: string;
    /**
     * *Optional*. Owner and administrators only. True, if the user's presence in the chat is hidden
     */
    is_anonymous?: boolean;
    /**
     * *Optional*. Restricted only. True, if the user is a member of the chat at the moment of the request
     */
    is_member?: boolean;
    /**
     * The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”
     */
    status: 'creator' | 'administrator' | 'member' | 'restricted' | 'left' | 'kicked';
    /**
     * *Optional*. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time
     */
    until_date?: number;
    user: User;
};

/**
 * Describes actions that a non-administrator user is allowed to take in a chat.
 */
export type ChatPermissions = {
    /**
     * *Optional*. True, if the user is allowed to add web page previews to their messages, implies can\_send\_media\_messages
     */
    can_add_web_page_previews?: boolean;
    /**
     * *Optional*. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups
     */
    can_change_info?: boolean;
    /**
     * *Optional*. True, if the user is allowed to invite new users to the chat
     */
    can_invite_users?: boolean;
    /**
     * *Optional*. True, if the user is allowed to pin messages. Ignored in public supergroups
     */
    can_pin_messages?: boolean;
    /**
     * *Optional*. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can\_send\_messages
     */
    can_send_media_messages?: boolean;
    /**
     * *Optional*. True, if the user is allowed to send text messages, contacts, locations and venues
     */
    can_send_messages?: boolean;
    /**
     * *Optional*. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can\_send\_media\_messages
     */
    can_send_other_messages?: boolean;
    /**
     * *Optional*. True, if the user is allowed to send polls, implies can\_send\_messages
     */
    can_send_polls?: boolean;
};

/**
 * This object represents a chat photo.
 */
export type ChatPhoto = {
    /**
     * File identifier of big (640x640) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
     */
    big_file_id: string;
    /**
     * Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    big_file_unique_id: string;
    /**
     * File identifier of small (160x160) chat photo. This file\_id can be used only for photo download and only for as long as the photo is not changed.
     */
    small_file_id: string;
    /**
     * Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    small_file_unique_id: string;
};

/**
 * Represents a [result](https://core.telegram.org/bots/api/#inlinequeryresult) of an inline query that was chosen by the user and sent to their chat partner.
 */
export type ChosenInlineResult = {
    from: User;
    /**
     * *Optional*. Identifier of the sent inline message. Available only if there is an [inline keyboard](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) attached to the message. Will be also received in [callback queries](https://core.telegram.org/bots/api/#callbackquery) and can be used to [edit](https://core.telegram.org/bots/api/#updating-messages) the message.
     */
    inline_message_id?: string;
    location?: Location;
    /**
     * The query that was used to obtain the result
     */
    query: string;
    /**
     * The unique identifier for the result that was chosen
     */
    result_id: string;
};

/**
 * This object represents a phone contact.
 */
export type Contact = {
    /**
     * Contact's first name
     */
    first_name: string;
    /**
     * *Optional*. Contact's last name
     */
    last_name?: string;
    /**
     * Contact's phone number
     */
    phone_number: string;
    /**
     * *Optional*. Contact's user identifier in Telegram
     */
    user_id?: number;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard)
     */
    vcard?: string;
};

/**
 * This object represents an animated emoji that displays a random value.
 */
export type Dice = {
    /**
     * Emoji on which the dice throw animation is based
     */
    emoji: string;
    /**
     * Value of the dice, 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />” base emoji, 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />” base emoji, 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />” base emoji
     */
    value: number;
};

/**
 * This object represents a general file (as opposed to [photos](https://core.telegram.org/bots/api/#photosize), [voice messages](https://core.telegram.org/bots/api/#voice) and [audio files](https://core.telegram.org/bots/api/#audio)).
 */
export type Document = {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. Original filename as defined by sender
     */
    file_name?: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * *Optional*. MIME type of the file as defined by sender
     */
    mime_type?: string;
    thumb?: PhotoSize;
};

/**
 * Contains data required for decrypting and authenticating [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement). See the [Telegram Passport Documentation](https://core.telegram.org/passport#receiving-information) for a complete description of the data decryption and authentication processes.
 */
export type EncryptedCredentials = {
    /**
     * Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for [EncryptedPassportElement](https://core.telegram.org/bots/api/#encryptedpassportelement) decryption and authentication
     */
    data: string;
    /**
     * Base64-encoded data hash for data authentication
     */
    hash: string;
    /**
     * Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
     */
    secret: string;
};

/**
 * Contains information about documents or other Telegram Passport elements shared with the bot by the user.
 */
export type EncryptedPassportElement = {
    /**
     * *Optional*. Base64-encoded encrypted Telegram Passport element data provided by the user, available for “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport” and “address” types. Can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     */
    data?: string;
    /**
     * *Optional*. User's verified email address, available only for “email” type
     */
    email?: string;
    /**
     * *Optional*. Array of encrypted files with documents provided by the user, available for “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     */
    files?: Array<PassportFile>;
    front_side?: PassportFile;
    /**
     * Base64-encoded element hash for using in [PassportElementErrorUnspecified](https://core.telegram.org/bots/api/#passportelementerrorunspecified)
     */
    hash: string;
    /**
     * *Optional*. User's verified phone number, available only for “phone\_number” type
     */
    phone_number?: string;
    reverse_side?: PassportFile;
    selfie?: PassportFile;
    /**
     * *Optional*. Array of encrypted files with translated versions of documents provided by the user. Available if requested for “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration” and “temporary\_registration” types. Files can be decrypted and verified using the accompanying [EncryptedCredentials](https://core.telegram.org/bots/api/#encryptedcredentials).
     */
    translation?: Array<PassportFile>;
    /**
     * Element type. One of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”, “phone\_number”, “email”.
     */
    type: 'personal_details' | 'passport' | 'driver_license' | 'identity_card' | 'internal_passport' | 'address' | 'utility_bill' | 'bank_statement' | 'rental_agreement' | 'passport_registration' | 'temporary_registration' | 'phone_number' | 'email';
};

export type _Error = {
    description: string;
    error_code: number;
    ok: boolean;
    parameters?: ResponseParameters;
};

/**
 * This object represents a file ready to be downloaded. The file can be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile).
 *
 * Maximum file size to download is 20 MB
 */
export type File = {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. File path. Use `https://api.telegram.org/file/bot<token>/<file_path>` to get the file.
     */
    file_path?: string;
    /**
     * *Optional*. File size, if known
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
};

/**
 * Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice [privacy mode](/bots#privacy-mode).
 */
export type ForceReply = {
    /**
     * Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply'
     */
    force_reply: boolean;
    /**
     * *Optional*. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
     */
    selective?: boolean;
};

/**
 * This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.
 */
export type Game = {
    animation?: Animation;
    /**
     * Description of the game
     */
    description: string;
    /**
     * Photo that will be displayed in the game message in chats.
     */
    photo: Array<PhotoSize>;
    /**
     * *Optional*. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls [setGameScore](https://core.telegram.org/bots/api/#setgamescore), or manually edited using [editMessageText](https://core.telegram.org/bots/api/#editmessagetext). 0-4096 characters.
     */
    text?: string;
    /**
     * *Optional*. Special entities that appear in *text*, such as usernames, URLs, bot commands, etc.
     */
    text_entities?: Array<MessageEntity>;
    /**
     * Title of the game
     */
    title: string;
};

/**
 * This object represents one row of the high scores table for a game.
 */
export type GameHighScore = {
    /**
     * Position in high score table for the game
     */
    position: number;
    /**
     * Score
     */
    score: number;
    user: User;
};

/**
 * This object represents one button of an inline keyboard. You **must** use exactly one of the optional fields.
 */
export type InlineKeyboardButton = {
    /**
     * *Optional*. Data to be sent in a [callback query](https://core.telegram.org/bots/api/#callbackquery) to the bot when button is pressed, 1-64 bytes
     */
    callback_data?: string;
    callback_game?: CallbackGame;
    login_url?: LoginUrl;
    /**
     * *Optional*. Specify True, to send a [Pay button](https://core.telegram.org/bots/api/#payments).
     *
     * **NOTE:** This type of button **must** always be the first button in the first row.
     */
    pay?: boolean;
    /**
     * *Optional*. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. Can be empty, in which case just the bot's username will be inserted.
     *
     * **Note:** This offers an easy way for users to start using your bot in [inline mode](/bots/inline) when they are currently in a private chat with it. Especially useful when combined with [*switch\_pm…*](https://core.telegram.org/bots/api/#answerinlinequery) actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.
     */
    switch_inline_query?: string;
    /**
     * *Optional*. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot's username will be inserted.
     *
     * This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.
     */
    switch_inline_query_current_chat?: string;
    /**
     * Label text on the button
     */
    text: string;
    /**
     * *Optional*. HTTP or tg:// url to be opened when button is pressed
     */
    url?: string;
};

/**
 * This object represents an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating) that appears right next to the message it belongs to.
 */
export type InlineKeyboardMarkup = {
    /**
     * Array of button rows, each represented by an Array of [InlineKeyboardButton](https://core.telegram.org/bots/api/#inlinekeyboardbutton) objects
     */
    inline_keyboard: Array<Array<InlineKeyboardButton>>;
};

/**
 * This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.
 */
export type InlineQuery = {
    from: User;
    /**
     * Unique identifier for this query
     */
    id: string;
    location?: Location;
    /**
     * Offset of the results to be returned, can be controlled by the bot
     */
    offset: string;
    /**
     * Text of the query (up to 256 characters)
     */
    query: string;
};

/**
 * This object represents one result of an inline query. Telegram clients currently support results of the following 20 types:
 */
export type InlineQueryResult = InlineQueryResultCachedAudio | InlineQueryResultCachedDocument | InlineQueryResultCachedGif | InlineQueryResultCachedMpeg4Gif | InlineQueryResultCachedPhoto | InlineQueryResultCachedSticker | InlineQueryResultCachedVideo | InlineQueryResultCachedVoice | InlineQueryResultArticle | InlineQueryResultAudio | InlineQueryResultContact | InlineQueryResultGame | InlineQueryResultDocument | InlineQueryResultGif | InlineQueryResultLocation | InlineQueryResultMpeg4Gif | InlineQueryResultPhoto | InlineQueryResultVenue | InlineQueryResultVideo | InlineQueryResultVoice;

/**
 * Represents a link to an article or web page.
 */
export type InlineQueryResultArticle = {
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * *Optional*. Pass *True*, if you don't want the URL to be shown in the message
     */
    hide_url?: boolean;
    /**
     * Unique identifier for this result, 1-64 Bytes
     */
    id: string;
    input_message_content: InputMessageContent;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Thumbnail height
     */
    thumb_height?: number;
    /**
     * *Optional*. Url of the thumbnail for the result
     */
    thumb_url?: string;
    /**
     * *Optional*. Thumbnail width
     */
    thumb_width?: number;
    /**
     * Title of the result
     */
    title: string;
    /**
     * Type of the result, must be *article*
     */
    type: string;
    /**
     * *Optional*. URL of the result
     */
    url?: string;
};

/**
 * Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
 */
export type InlineQueryResultAudio = {
    /**
     * *Optional*. Audio duration in seconds
     */
    audio_duration?: number;
    /**
     * A valid URL for the audio file
     */
    audio_url: string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Performer
     */
    performer?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Title
     */
    title: string;
    /**
     * Type of the result, must be *audio*
     */
    type: string;
};

/**
 * Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the audio.
 */
export type InlineQueryResultCachedAudio = {
    /**
     * A valid file identifier for the audio file
     */
    audio_file_id: string;
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Type of the result, must be *audio*
     */
    type: string;
};

/**
 * Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file.
 */
export type InlineQueryResultCachedDocument = {
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * A valid file identifier for the file
     */
    document_file_id: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Title for the result
     */
    title: string;
    /**
     * Type of the result, must be *document*
     */
    type: string;
};

/**
 * Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with specified content instead of the animation.
 */
export type InlineQueryResultCachedGif = {
    /**
     * *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * A valid file identifier for the GIF file
     */
    gif_file_id: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *gif*
     */
    type: string;
};

/**
 * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
 */
export type InlineQueryResultCachedMpeg4Gif = {
    /**
     * *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * A valid file identifier for the MP4 file
     */
    mpeg4_file_id: string;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *mpeg4\_gif*
     */
    type: string;
};

/**
 * Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
 */
export type InlineQueryResultCachedPhoto = {
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * A valid file identifier of the photo
     */
    photo_file_id: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *photo*
     */
    type: string;
};

/**
 * Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the sticker.
 */
export type InlineQueryResultCachedSticker = {
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * A valid file identifier of the sticker
     */
    sticker_file_id: string;
    /**
     * Type of the result, must be *sticker*
     */
    type: string;
};

/**
 * Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
 */
export type InlineQueryResultCachedVideo = {
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Title for the result
     */
    title: string;
    /**
     * Type of the result, must be *video*
     */
    type: string;
    /**
     * A valid file identifier for the video file
     */
    video_file_id: string;
};

/**
 * Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the voice message.
 */
export type InlineQueryResultCachedVoice = {
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Voice message title
     */
    title: string;
    /**
     * Type of the result, must be *voice*
     */
    type: string;
    /**
     * A valid file identifier for the voice message
     */
    voice_file_id: string;
};

/**
 * Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the contact.
 */
export type InlineQueryResultContact = {
    /**
     * Contact's first name
     */
    first_name: string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Contact's last name
     */
    last_name?: string;
    /**
     * Contact's phone number
     */
    phone_number: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Thumbnail height
     */
    thumb_height?: number;
    /**
     * *Optional*. Url of the thumbnail for the result
     */
    thumb_url?: string;
    /**
     * *Optional*. Thumbnail width
     */
    thumb_width?: number;
    /**
     * Type of the result, must be *contact*
     */
    type: string;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     */
    vcard?: string;
};

/**
 * Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the file. Currently, only **.PDF** and **.ZIP** files can be sent using this method.
 */
export type InlineQueryResultDocument = {
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * A valid URL for the file
     */
    document_url: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * Mime type of the content of the file, either “application/pdf” or “application/zip”
     */
    mime_type: 'application/pdf' | 'application/zip';
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Thumbnail height
     */
    thumb_height?: number;
    /**
     * *Optional*. URL of the thumbnail (jpeg only) for the file
     */
    thumb_url?: string;
    /**
     * *Optional*. Thumbnail width
     */
    thumb_width?: number;
    /**
     * Title for the result
     */
    title: string;
    /**
     * Type of the result, must be *document*
     */
    type: string;
};

/**
 * Represents a [Game](https://core.telegram.org/bots/api/#games).
 */
export type InlineQueryResultGame = {
    /**
     * Short name of the game
     */
    game_short_name: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Type of the result, must be *game*
     */
    type: string;
};

/**
 * Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
 */
export type InlineQueryResultGif = {
    /**
     * *Optional*. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Duration of the GIF
     */
    gif_duration?: number;
    /**
     * *Optional*. Height of the GIF
     */
    gif_height?: number;
    /**
     * A valid URL for the GIF file. File size must not exceed 1MB
     */
    gif_url: string;
    /**
     * *Optional*. Width of the GIF
     */
    gif_width?: number;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
     */
    thumb_mime_type?: 'image/jpeg' | 'image/gif' | 'video/mp4';
    /**
     * URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
     */
    thumb_url: string;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *gif*
     */
    type: string;
};

/**
 * Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the location.
 */
export type InlineQueryResultLocation = {
    /**
     * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     */
    heading?: number;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     */
    horizontal_accuracy?: number;
    /**
     * Unique identifier for this result, 1-64 Bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * Location latitude in degrees
     */
    latitude: number;
    /**
     * *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
     */
    live_period?: number;
    /**
     * Location longitude in degrees
     */
    longitude: number;
    /**
     * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     */
    proximity_alert_radius?: number;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Thumbnail height
     */
    thumb_height?: number;
    /**
     * *Optional*. Url of the thumbnail for the result
     */
    thumb_url?: string;
    /**
     * *Optional*. Thumbnail width
     */
    thumb_width?: number;
    /**
     * Location title
     */
    title: string;
    /**
     * Type of the result, must be *location*
     */
    type: string;
};

/**
 * Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the animation.
 */
export type InlineQueryResultMpeg4Gif = {
    /**
     * *Optional*. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Video duration
     */
    mpeg4_duration?: number;
    /**
     * *Optional*. Video height
     */
    mpeg4_height?: number;
    /**
     * A valid URL for the MP4 file. File size must not exceed 1MB
     */
    mpeg4_url: string;
    /**
     * *Optional*. Video width
     */
    mpeg4_width?: number;
    /**
     * *Optional*. Mode for parsing entities in the caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”. Defaults to “image/jpeg”
     */
    thumb_mime_type?: 'image/jpeg' | 'image/gif' | 'video/mp4';
    /**
     * URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
     */
    thumb_url: string;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *mpeg4\_gif*
     */
    type: string;
};

/**
 * Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the photo.
 */
export type InlineQueryResultPhoto = {
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Height of the photo
     */
    photo_height?: number;
    /**
     * A valid URL of the photo. Photo must be in **jpeg** format. Photo size must not exceed 5MB
     */
    photo_url: string;
    /**
     * *Optional*. Width of the photo
     */
    photo_width?: number;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * URL of the thumbnail for the photo
     */
    thumb_url: string;
    /**
     * *Optional*. Title for the result
     */
    title?: string;
    /**
     * Type of the result, must be *photo*
     */
    type: string;
};

/**
 * Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the venue.
 */
export type InlineQueryResultVenue = {
    /**
     * Address of the venue
     */
    address: string;
    /**
     * *Optional*. Foursquare identifier of the venue if known
     */
    foursquare_id?: string;
    /**
     * *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
     */
    foursquare_type?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     */
    google_place_id?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     */
    google_place_type?: string;
    /**
     * Unique identifier for this result, 1-64 Bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * Latitude of the venue location in degrees
     */
    latitude: number;
    /**
     * Longitude of the venue location in degrees
     */
    longitude: number;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * *Optional*. Thumbnail height
     */
    thumb_height?: number;
    /**
     * *Optional*. Url of the thumbnail for the result
     */
    thumb_url?: string;
    /**
     * *Optional*. Thumbnail width
     */
    thumb_width?: number;
    /**
     * Title of the venue
     */
    title: string;
    /**
     * Type of the result, must be *venue*
     */
    type: string;
};

/**
 * Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the video.
 *
 * If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you **must** replace its content using *input\_message\_content*.
 */
export type InlineQueryResultVideo = {
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Short description of the result
     */
    description?: string;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * Mime type of the content of video url, “text/html” or “video/mp4”
     */
    mime_type: string;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * URL of the thumbnail (jpeg only) for the video
     */
    thumb_url: string;
    /**
     * Title for the result
     */
    title: string;
    /**
     * Type of the result, must be *video*
     */
    type: string;
    /**
     * *Optional*. Video duration in seconds
     */
    video_duration?: number;
    /**
     * *Optional*. Video height
     */
    video_height?: number;
    /**
     * A valid URL for the embedded video player or video file
     */
    video_url: string;
    /**
     * *Optional*. Video width
     */
    video_width?: number;
};

/**
 * Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use *input\_message\_content* to send a message with the specified content instead of the the voice message.
 */
export type InlineQueryResultVoice = {
    /**
     * *Optional*. Caption, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * Unique identifier for this result, 1-64 bytes
     */
    id: string;
    input_message_content?: InputMessageContent;
    /**
     * *Optional*. Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    reply_markup?: InlineKeyboardMarkup;
    /**
     * Recording title
     */
    title: string;
    /**
     * Type of the result, must be *voice*
     */
    type: string;
    /**
     * *Optional*. Recording duration in seconds
     */
    voice_duration?: number;
    /**
     * A valid URL for the voice recording
     */
    voice_url: string;
};

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a contact message to be sent as the result of an inline query.
 */
export type InputContactMessageContent = {
    /**
     * Contact's first name
     */
    first_name: string;
    /**
     * *Optional*. Contact's last name
     */
    last_name?: string;
    /**
     * Contact's phone number
     */
    phone_number: string;
    /**
     * *Optional*. Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
     */
    vcard?: string;
};

/**
 * This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.
 */
export type InputFile = unknown;

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a location message to be sent as the result of an inline query.
 */
export type InputLocationMessageContent = {
    /**
     * *Optional*. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
     */
    heading?: number;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     */
    horizontal_accuracy?: number;
    /**
     * Latitude of the location in degrees
     */
    latitude: number;
    /**
     * *Optional*. Period in seconds for which the location can be updated, should be between 60 and 86400.
     */
    live_period?: number;
    /**
     * Longitude of the location in degrees
     */
    longitude: number;
    /**
     * *Optional*. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
     */
    proximity_alert_radius?: number;
};

/**
 * This object represents the content of a media message to be sent. It should be one of
 */
export type InputMedia = InputMediaAnimation | InputMediaDocument | InputMediaAudio | InputMediaPhoto | InputMediaVideo;

/**
 * Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.
 */
export type InputMediaAnimation = {
    /**
     * *Optional*. Caption of the animation to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Animation duration
     */
    duration?: number;
    /**
     * *Optional*. Animation height
     */
    height?: number;
    /**
     * File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    media: string;
    /**
     * *Optional*. Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    thumb?: InputFile | string;
    /**
     * Type of the result, must be *animation*
     */
    type: string;
    /**
     * *Optional*. Animation width
     */
    width?: number;
};

/**
 * Represents an audio file to be treated as music to be sent.
 */
export type InputMediaAudio = {
    /**
     * *Optional*. Caption of the audio to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Duration of the audio in seconds
     */
    duration?: number;
    /**
     * File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    media: string;
    /**
     * *Optional*. Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Performer of the audio
     */
    performer?: string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    thumb?: InputFile | string;
    /**
     * *Optional*. Title of the audio
     */
    title?: string;
    /**
     * Type of the result, must be *audio*
     */
    type: string;
};

/**
 * Represents a general file to be sent.
 */
export type InputMediaDocument = {
    /**
     * *Optional*. Caption of the document to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always true, if the document is sent as part of an album.
     */
    disable_content_type_detection?: boolean;
    /**
     * File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    media: string;
    /**
     * *Optional*. Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    thumb?: InputFile | string;
    /**
     * Type of the result, must be *document*
     */
    type: string;
};

/**
 * Represents a photo to be sent.
 */
export type InputMediaPhoto = {
    /**
     * *Optional*. Caption of the photo to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    media: string;
    /**
     * *Optional*. Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * Type of the result, must be *photo*
     */
    type: string;
};

/**
 * Represents a video to be sent.
 */
export type InputMediaVideo = {
    /**
     * *Optional*. Caption of the video to be sent, 0-1024 characters after entities parsing
     */
    caption?: string;
    /**
     * *Optional*. List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Video duration
     */
    duration?: number;
    /**
     * *Optional*. Video height
     */
    height?: number;
    /**
     * File to send. Pass a file\_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file\_attach\_name>” to upload a new one using multipart/form-data under <file\_attach\_name> name. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    media: string;
    /**
     * *Optional*. Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
    /**
     * *Optional*. Pass *True*, if the uploaded video is suitable for streaming
     */
    supports_streaming?: boolean;
    /**
     * *Optional*. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
     */
    thumb?: InputFile | string;
    /**
     * Type of the result, must be *video*
     */
    type: string;
    /**
     * *Optional*. Video width
     */
    width?: number;
};

/**
 * This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:
 */
export type InputMessageContent = InputTextMessageContent | InputLocationMessageContent | InputVenueMessageContent | InputContactMessageContent;

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a text message to be sent as the result of an inline query.
 */
export type InputTextMessageContent = {
    /**
     * *Optional*. Disables link previews for links in the sent message
     */
    disable_web_page_preview?: boolean;
    /**
     * *Optional*. List of special entities that appear in message text, which can be specified instead of *parse\_mode*
     */
    entities?: Array<MessageEntity>;
    /**
     * Text of the message to be sent, 1-4096 characters
     */
    message_text: string;
    /**
     * *Optional*. Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
     */
    parse_mode?: string;
};

/**
 * Represents the [content](https://core.telegram.org/bots/api/#inputmessagecontent) of a venue message to be sent as the result of an inline query.
 */
export type InputVenueMessageContent = {
    /**
     * Address of the venue
     */
    address: string;
    /**
     * *Optional*. Foursquare identifier of the venue, if known
     */
    foursquare_id?: string;
    /**
     * *Optional*. Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
     */
    foursquare_type?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     */
    google_place_id?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     */
    google_place_type?: string;
    /**
     * Latitude of the venue in degrees
     */
    latitude: number;
    /**
     * Longitude of the venue in degrees
     */
    longitude: number;
    /**
     * Name of the venue
     */
    title: string;
};

/**
 * This object contains basic information about an invoice.
 */
export type Invoice = {
    /**
     * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     */
    currency: string;
    /**
     * Product description
     */
    description: string;
    /**
     * Unique bot deep-linking parameter that can be used to generate this invoice
     */
    start_parameter: string;
    /**
     * Product name
     */
    title: string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    total_amount: number;
};

/**
 * This object represents one button of the reply keyboard. For simple text buttons *String* can be used instead of this object to specify text of the button. Optional fields *request\_contact*, *request\_location*, and *request\_poll* are mutually exclusive.
 */
export type KeyboardButton = {
    /**
     * *Optional*. If *True*, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only
     */
    request_contact?: boolean;
    /**
     * *Optional*. If *True*, the user's current location will be sent when the button is pressed. Available in private chats only
     */
    request_location?: boolean;
    request_poll?: KeyboardButtonPollType;
    /**
     * Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed
     */
    text: string;
};

/**
 * This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.
 */
export type KeyboardButtonPollType = {
    /**
     * *Optional*. If *quiz* is passed, the user will be allowed to create only polls in the quiz mode. If *regular* is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type.
     */
    type?: string;
};

/**
 * This object represents a portion of the price for goods or services.
 */
export type LabeledPrice = {
    /**
     * Price of the product in the *smallest units* of the [currency](/bots/payments#supported-currencies) (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    amount: number;
    /**
     * Portion label
     */
    label: string;
};

/**
 * This object represents a point on the map.
 */
export type Location = {
    /**
     * *Optional*. The direction in which user is moving, in degrees; 1-360. For active live locations only.
     */
    heading?: number;
    /**
     * *Optional*. The radius of uncertainty for the location, measured in meters; 0-1500
     */
    horizontal_accuracy?: number;
    /**
     * Latitude as defined by sender
     */
    latitude: number;
    /**
     * *Optional*. Time relative to the message sending date, during which the location can be updated, in seconds. For active live locations only.
     */
    live_period?: number;
    /**
     * Longitude as defined by sender
     */
    longitude: number;
    /**
     * *Optional*. Maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only.
     */
    proximity_alert_radius?: number;
};

/**
 * This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the [Telegram Login Widget](https://core.telegram.org/widgets/login) when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:
 *
 * Telegram apps support these buttons as of [version 5.7](https://telegram.org/blog/privacy-discussions-web-bots#meet-seamless-web-bots).
 *
 * Sample bot: [@discussbot](https://t.me/discussbot)
 */
export type LoginUrl = {
    /**
     * *Optional*. Username of a bot, which will be used for user authorization. See [Setting up a bot](https://core.telegram.org/widgets/login#setting-up-a-bot) for more details. If not specified, the current bot's username will be assumed. The *url*'s domain must be the same as the domain linked with the bot. See [Linking your domain to the bot](https://core.telegram.org/widgets/login#linking-your-domain-to-the-bot) for more details.
     */
    bot_username?: string;
    /**
     * *Optional*. New text of the button in forwarded messages.
     */
    forward_text?: string;
    /**
     * *Optional*. Pass True to request the permission for your bot to send messages to the user.
     */
    request_write_access?: boolean;
    /**
     * An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in [Receiving authorization data](https://core.telegram.org/widgets/login#receiving-authorization-data).
     *
     * **NOTE:** You **must** always check the hash of the received data to verify the authentication and the integrity of the data as described in [Checking authorization](https://core.telegram.org/widgets/login#checking-authorization).
     */
    url: string;
};

/**
 * This object describes the position on faces where a mask should be placed by default.
 */
export type MaskPosition = {
    /**
     * The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”, “mouth”, or “chin”.
     */
    point: 'forehead' | 'eyes' | 'mouth' | 'chin';
    /**
     * Mask scaling coefficient. For example, 2.0 means double size.
     */
    scale: number;
    /**
     * Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position.
     */
    x_shift: number;
    /**
     * Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position.
     */
    y_shift: number;
};

/**
 * This object represents a message.
 */
export type Message = {
    animation?: Animation;
    audio?: Audio;
    /**
     * *Optional*. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator
     */
    author_signature?: string;
    /**
     * *Optional*. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
     */
    caption?: string;
    /**
     * *Optional*. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption
     */
    caption_entities?: Array<MessageEntity>;
    /**
     * *Optional*. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a channel.
     */
    channel_chat_created?: boolean;
    chat: Chat;
    /**
     * *Optional*. The domain name of the website on which the user has logged in. [More about Telegram Login »](/widgets/login)
     */
    connected_website?: string;
    contact?: Contact;
    /**
     * Date the message was sent in Unix time
     */
    date: number;
    /**
     * *Optional*. Service message: the chat photo was deleted
     */
    delete_chat_photo?: boolean;
    dice?: Dice;
    document?: Document;
    /**
     * *Optional*. Date the message was last edited in Unix time
     */
    edit_date?: number;
    /**
     * *Optional*. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text
     */
    entities?: Array<MessageEntity>;
    /**
     * *Optional*. For forwarded messages, date the original message was sent in Unix time
     */
    forward_date?: number;
    forward_from?: User;
    forward_from_chat?: Chat;
    /**
     * *Optional*. For messages forwarded from channels, identifier of the original message in the channel
     */
    forward_from_message_id?: number;
    /**
     * *Optional*. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages
     */
    forward_sender_name?: string;
    /**
     * *Optional*. For messages forwarded from channels, signature of the post author if present
     */
    forward_signature?: string;
    from?: User;
    game?: Game;
    /**
     * *Optional*. Service message: the group has been created
     */
    group_chat_created?: boolean;
    invoice?: Invoice;
    left_chat_member?: User;
    location?: Location;
    /**
     * *Optional*. The unique identifier of a media message group this message belongs to
     */
    media_group_id?: string;
    /**
     * Unique message identifier inside this chat
     */
    message_id: number;
    /**
     * *Optional*. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     */
    migrate_from_chat_id?: number;
    /**
     * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     */
    migrate_to_chat_id?: number;
    /**
     * *Optional*. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)
     */
    new_chat_members?: Array<User>;
    /**
     * *Optional*. A chat photo was change to this value
     */
    new_chat_photo?: Array<PhotoSize>;
    /**
     * *Optional*. A chat title was changed to this value
     */
    new_chat_title?: string;
    passport_data?: PassportData;
    /**
     * *Optional*. Message is a photo, available sizes of the photo
     */
    photo?: Array<PhotoSize>;
    pinned_message?: Message;
    poll?: Poll;
    proximity_alert_triggered?: ProximityAlertTriggered;
    reply_markup?: InlineKeyboardMarkup;
    reply_to_message?: Message;
    sender_chat?: Chat;
    sticker?: Sticker;
    successful_payment?: SuccessfulPayment;
    /**
     * *Optional*. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply\_to\_message if someone replies to a very first message in a directly created supergroup.
     */
    supergroup_chat_created?: boolean;
    /**
     * *Optional*. For text messages, the actual UTF-8 text of the message, 0-4096 characters
     */
    text?: string;
    venue?: Venue;
    via_bot?: User;
    video?: Video;
    video_note?: VideoNote;
    voice?: Voice;
};

/**
 * This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.
 */
export type MessageEntity = {
    /**
     * *Optional*. For “pre” only, the programming language of the entity text
     */
    language?: string;
    /**
     * Length of the entity in UTF-16 code units
     */
    length: number;
    /**
     * Offset in UTF-16 code units to the start of the entity
     */
    offset: number;
    /**
     * Type of the entity. Can be “mention” (`@username`), “hashtag” (`#hashtag`), “cashtag” (`$USD`), “bot\_command” (`/start@jobs_bot`), “url” (`https://telegram.org`), “email” (`do-not-reply@telegram.org`), “phone\_number” (`+1-212-555-0123`), “bold” (**bold text**), “italic” (*italic text*), “underline” (underlined text), “strikethrough” (strikethrough text), “code” (monowidth string), “pre” (monowidth block), “text\_link” (for clickable text URLs), “text\_mention” (for users [without usernames](https://telegram.org/blog/edit#new-mentions))
     */
    type: 'mention' | 'hashtag' | 'cashtag' | 'bot_command' | 'url' | 'email' | 'phone_number' | 'bold' | 'italic' | 'underline' | 'strikethrough' | 'code' | 'pre' | 'text_link' | 'text_mention';
    /**
     * *Optional*. For “text\_link” only, url that will be opened after user taps on the text
     */
    url?: string;
    user?: User;
};

/**
 * This object represents a unique message identifier.
 */
export type MessageId = {
    /**
     * Unique message identifier
     */
    message_id: number;
};

/**
 * This object represents information about an order.
 */
export type OrderInfo = {
    /**
     * *Optional*. User email
     */
    email?: string;
    /**
     * *Optional*. User name
     */
    name?: string;
    /**
     * *Optional*. User's phone number
     */
    phone_number?: string;
    shipping_address?: ShippingAddress;
};

/**
 * Contains information about Telegram Passport data shared with the bot by the user.
 */
export type PassportData = {
    credentials: EncryptedCredentials;
    /**
     * Array with information about documents and other Telegram Passport elements that was shared with the bot
     */
    data: Array<EncryptedPassportElement>;
};

/**
 * This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of:
 */
export type PassportElementError = PassportElementErrorDataField | PassportElementErrorFrontSide | PassportElementErrorReverseSide | PassportElementErrorSelfie | PassportElementErrorFile | PassportElementErrorFiles | PassportElementErrorTranslationFile | PassportElementErrorTranslationFiles | PassportElementErrorUnspecified;

/**
 * Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.
 */
export type PassportElementErrorDataField = {
    /**
     * Base64-encoded data hash
     */
    data_hash: string;
    /**
     * Name of the data field which has the error
     */
    field_name: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *data*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the error, one of “personal\_details”, “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “address”
     */
    type: 'personal_details' | 'passport' | 'driver_license' | 'identity_card' | 'internal_passport' | 'address';
};

/**
 * Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.
 */
export type PassportElementErrorFile = {
    /**
     * Base64-encoded file hash
     */
    file_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *file*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
     */
    type: 'utility_bill' | 'bank_statement' | 'rental_agreement' | 'passport_registration' | 'temporary_registration';
};

/**
 * Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.
 */
export type PassportElementErrorFiles = {
    /**
     * List of base64-encoded file hashes
     */
    file_hashes: Array<string>;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *files*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the issue, one of “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
     */
    type: 'utility_bill' | 'bank_statement' | 'rental_agreement' | 'passport_registration' | 'temporary_registration';
};

/**
 * Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.
 */
export type PassportElementErrorFrontSide = {
    /**
     * Base64-encoded hash of the file with the front side of the document
     */
    file_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *front\_side*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
     */
    type: 'passport' | 'driver_license' | 'identity_card' | 'internal_passport';
};

/**
 * Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.
 */
export type PassportElementErrorReverseSide = {
    /**
     * Base64-encoded hash of the file with the reverse side of the document
     */
    file_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *reverse\_side*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the issue, one of “driver\_license”, “identity\_card”
     */
    type: 'driver_license' | 'identity_card';
};

/**
 * Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.
 */
export type PassportElementErrorSelfie = {
    /**
     * Base64-encoded hash of the file with the selfie
     */
    file_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *selfie*
     */
    source: string;
    /**
     * The section of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”
     */
    type: 'passport' | 'driver_license' | 'identity_card' | 'internal_passport';
};

/**
 * Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.
 */
export type PassportElementErrorTranslationFile = {
    /**
     * Base64-encoded file hash
     */
    file_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *translation\_file*
     */
    source: string;
    /**
     * Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
     */
    type: 'passport' | 'driver_license' | 'identity_card' | 'internal_passport' | 'utility_bill' | 'bank_statement' | 'rental_agreement' | 'passport_registration' | 'temporary_registration';
};

/**
 * Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.
 */
export type PassportElementErrorTranslationFiles = {
    /**
     * List of base64-encoded file hashes
     */
    file_hashes: Array<string>;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *translation\_files*
     */
    source: string;
    /**
     * Type of element of the user's Telegram Passport which has the issue, one of “passport”, “driver\_license”, “identity\_card”, “internal\_passport”, “utility\_bill”, “bank\_statement”, “rental\_agreement”, “passport\_registration”, “temporary\_registration”
     */
    type: 'passport' | 'driver_license' | 'identity_card' | 'internal_passport' | 'utility_bill' | 'bank_statement' | 'rental_agreement' | 'passport_registration' | 'temporary_registration';
};

/**
 * Represents an issue in an unspecified place. The error is considered resolved when new data is added.
 */
export type PassportElementErrorUnspecified = {
    /**
     * Base64-encoded element hash
     */
    element_hash: string;
    /**
     * Error message
     */
    message: string;
    /**
     * Error source, must be *unspecified*
     */
    source: string;
    /**
     * Type of element of the user's Telegram Passport which has the issue
     */
    type: string;
};

/**
 * This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.
 */
export type PassportFile = {
    /**
     * Unix time when the file was uploaded
     */
    file_date: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * File size
     */
    file_size: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
};

/**
 * This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document) / [sticker](https://core.telegram.org/bots/api/#sticker) thumbnail.
 */
export type PhotoSize = {
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * Photo height
     */
    height: number;
    /**
     * Photo width
     */
    width: number;
};

/**
 * This object contains information about a poll.
 */
export type Poll = {
    /**
     * True, if the poll allows multiple answers
     */
    allows_multiple_answers: boolean;
    /**
     * *Optional*. Point in time (Unix timestamp) when the poll will be automatically closed
     */
    close_date?: number;
    /**
     * *Optional*. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot.
     */
    correct_option_id?: number;
    /**
     * *Optional*. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters
     */
    explanation?: string;
    /**
     * *Optional*. Special entities like usernames, URLs, bot commands, etc. that appear in the *explanation*
     */
    explanation_entities?: Array<MessageEntity>;
    /**
     * Unique poll identifier
     */
    id: string;
    /**
     * True, if the poll is anonymous
     */
    is_anonymous: boolean;
    /**
     * True, if the poll is closed
     */
    is_closed: boolean;
    /**
     * *Optional*. Amount of time in seconds the poll will be active after creation
     */
    open_period?: number;
    /**
     * List of poll options
     */
    options: Array<PollOption>;
    /**
     * Poll question, 1-255 characters
     */
    question: string;
    /**
     * Total number of users that voted in the poll
     */
    total_voter_count: number;
    /**
     * Poll type, currently can be “regular” or “quiz”
     */
    type: string;
};

/**
 * This object represents an answer of a user in a non-anonymous poll.
 */
export type PollAnswer = {
    /**
     * 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted their vote.
     */
    option_ids: Array<number>;
    /**
     * Unique poll identifier
     */
    poll_id: string;
    user: User;
};

/**
 * This object contains information about one answer option in a poll.
 */
export type PollOption = {
    /**
     * Option text, 1-100 characters
     */
    text: string;
    /**
     * Number of users that voted for this option
     */
    voter_count: number;
};

/**
 * This object contains information about an incoming pre-checkout query.
 */
export type PreCheckoutQuery = {
    /**
     * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     */
    currency: string;
    from: User;
    /**
     * Unique query identifier
     */
    id: string;
    /**
     * Bot specified invoice payload
     */
    invoice_payload: string;
    order_info?: OrderInfo;
    /**
     * *Optional*. Identifier of the shipping option chosen by the user
     */
    shipping_option_id?: string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    total_amount: number;
};

/**
 * This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.
 */
export type ProximityAlertTriggered = {
    /**
     * The distance between the users
     */
    distance: number;
    traveler: User;
    watcher: User;
};

/**
 * This object represents a [custom keyboard](https://core.telegram.org/bots#keyboards) with reply options (see [Introduction to bots](https://core.telegram.org/bots#keyboards) for details and examples).
 */
export type ReplyKeyboardMarkup = {
    /**
     * Array of button rows, each represented by an Array of [KeyboardButton](https://core.telegram.org/bots/api/#keyboardbutton) objects
     */
    keyboard: Array<Array<KeyboardButton>>;
    /**
     * *Optional*. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to *false*.
     */
    one_time_keyboard?: boolean;
    /**
     * *Optional*. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to *false*, in which case the custom keyboard is always of the same height as the app's standard keyboard.
     */
    resize_keyboard?: boolean;
    /**
     * *Optional*. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
     *
     * *Example:* A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard.
     */
    selective?: boolean;
};

/**
 * Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup)).
 */
export type ReplyKeyboardRemove = {
    /**
     * Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use *one\_time\_keyboard* in [ReplyKeyboardMarkup](https://core.telegram.org/bots/api/#replykeyboardmarkup))
     */
    remove_keyboard: boolean;
    /**
     * *Optional*. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the *text* of the [Message](https://core.telegram.org/bots/api/#message) object; 2) if the bot's message is a reply (has *reply\_to\_message\_id*), sender of the original message.
     *
     * *Example:* A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.
     */
    selective?: boolean;
};

/**
 * Contains information about why a request was unsuccessful.
 */
export type ResponseParameters = {
    /**
     * *Optional*. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.
     */
    migrate_to_chat_id?: number;
    /**
     * *Optional*. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated
     */
    retry_after?: number;
};

/**
 * This object represents a shipping address.
 */
export type ShippingAddress = {
    /**
     * City
     */
    city: string;
    /**
     * ISO 3166-1 alpha-2 country code
     */
    country_code: string;
    /**
     * Address post code
     */
    post_code: string;
    /**
     * State, if applicable
     */
    state: string;
    /**
     * First line for the address
     */
    street_line1: string;
    /**
     * Second line for the address
     */
    street_line2: string;
};

/**
 * This object represents one shipping option.
 */
export type ShippingOption = {
    /**
     * Shipping option identifier
     */
    id: string;
    /**
     * List of price portions
     */
    prices: Array<LabeledPrice>;
    /**
     * Option title
     */
    title: string;
};

/**
 * This object contains information about an incoming shipping query.
 */
export type ShippingQuery = {
    from: User;
    /**
     * Unique query identifier
     */
    id: string;
    /**
     * Bot specified invoice payload
     */
    invoice_payload: string;
    shipping_address: ShippingAddress;
};

/**
 * This object represents a sticker.
 */
export type Sticker = {
    /**
     * *Optional*. Emoji associated with the sticker
     */
    emoji?: string;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * Sticker height
     */
    height: number;
    /**
     * *True*, if the sticker is [animated](https://telegram.org/blog/animated-stickers)
     */
    is_animated: boolean;
    mask_position?: MaskPosition;
    /**
     * *Optional*. Name of the sticker set to which the sticker belongs
     */
    set_name?: string;
    thumb?: PhotoSize;
    /**
     * Sticker width
     */
    width: number;
};

/**
 * This object represents a sticker set.
 */
export type StickerSet = {
    /**
     * *True*, if the sticker set contains masks
     */
    contains_masks: boolean;
    /**
     * *True*, if the sticker set contains [animated stickers](https://telegram.org/blog/animated-stickers)
     */
    is_animated: boolean;
    /**
     * Sticker set name
     */
    name: string;
    /**
     * List of all set stickers
     */
    stickers: Array<Sticker>;
    thumb?: PhotoSize;
    /**
     * Sticker set title
     */
    title: string;
};

/**
 * This object contains basic information about a successful payment.
 */
export type SuccessfulPayment = {
    /**
     * Three-letter ISO 4217 [currency](/bots/payments#supported-currencies) code
     */
    currency: string;
    /**
     * Bot specified invoice payload
     */
    invoice_payload: string;
    order_info?: OrderInfo;
    /**
     * Provider payment identifier
     */
    provider_payment_charge_id: string;
    /**
     * *Optional*. Identifier of the shipping option chosen by the user
     */
    shipping_option_id?: string;
    /**
     * Telegram payment identifier
     */
    telegram_payment_charge_id: string;
    /**
     * Total price in the *smallest units* of the currency (integer, **not** float/double). For example, for a price of `US$ 1.45` pass `amount = 145`. See the *exp* parameter in [currencies.json](https://core.telegram.org/bots/payments/currencies.json), it shows the number of digits past the decimal point for each currency (2 for the majority of currencies).
     */
    total_amount: number;
};

/**
 * This [object](https://core.telegram.org/bots/api/#available-types) represents an incoming update.
 * At most **one** of the optional parameters can be present in any given update.
 */
export type Update = {
    callback_query?: CallbackQuery;
    channel_post?: Message;
    chosen_inline_result?: ChosenInlineResult;
    edited_channel_post?: Message;
    edited_message?: Message;
    inline_query?: InlineQuery;
    message?: Message;
    poll?: Poll;
    poll_answer?: PollAnswer;
    pre_checkout_query?: PreCheckoutQuery;
    shipping_query?: ShippingQuery;
    /**
     * The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you're using [Webhooks](https://core.telegram.org/bots/api/#setwebhook), since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.
     */
    update_id: number;
};

/**
 * This object represents a Telegram user or bot.
 */
export type User = {
    /**
     * *Optional*. True, if the bot can be invited to groups. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     */
    can_join_groups?: boolean;
    /**
     * *Optional*. True, if [privacy mode](https://core.telegram.org/bots#privacy-mode) is disabled for the bot. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     */
    can_read_all_group_messages?: boolean;
    /**
     * User's or bot's first name
     */
    first_name: string;
    /**
     * Unique identifier for this user or bot
     */
    id: number;
    /**
     * True, if this user is a bot
     */
    is_bot: boolean;
    /**
     * *Optional*. [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the user's language
     */
    language_code?: string;
    /**
     * *Optional*. User's or bot's last name
     */
    last_name?: string;
    /**
     * *Optional*. True, if the bot supports inline queries. Returned only in [getMe](https://core.telegram.org/bots/api/#getme).
     */
    supports_inline_queries?: boolean;
    /**
     * *Optional*. User's or bot's username
     */
    username?: string;
};

/**
 * This object represent a user's profile pictures.
 */
export type UserProfilePhotos = {
    /**
     * Requested profile pictures (in up to 4 sizes each)
     */
    photos: Array<Array<PhotoSize>>;
    /**
     * Total number of profile pictures the target user has
     */
    total_count: number;
};

/**
 * This object represents a venue.
 */
export type Venue = {
    /**
     * Address of the venue
     */
    address: string;
    /**
     * *Optional*. Foursquare identifier of the venue
     */
    foursquare_id?: string;
    /**
     * *Optional*. Foursquare type of the venue. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
     */
    foursquare_type?: string;
    /**
     * *Optional*. Google Places identifier of the venue
     */
    google_place_id?: string;
    /**
     * *Optional*. Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
     */
    google_place_type?: string;
    location: Location;
    /**
     * Name of the venue
     */
    title: string;
};

/**
 * This object represents a video file.
 */
export type Video = {
    /**
     * Duration of the video in seconds as defined by sender
     */
    duration: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. Original filename as defined by sender
     */
    file_name?: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * Video height as defined by sender
     */
    height: number;
    /**
     * *Optional*. Mime type of a file as defined by sender
     */
    mime_type?: string;
    thumb?: PhotoSize;
    /**
     * Video width as defined by sender
     */
    width: number;
};

/**
 * This object represents a [video message](https://telegram.org/blog/video-messages-and-telescope) (available in Telegram apps as of [v.4.0](https://telegram.org/blog/video-messages-and-telescope)).
 */
export type VideoNote = {
    /**
     * Duration of the video in seconds as defined by sender
     */
    duration: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * Video width and height (diameter of the video message) as defined by sender
     */
    length: number;
    thumb?: PhotoSize;
};

/**
 * This object represents a voice note.
 */
export type Voice = {
    /**
     * Duration of the audio in seconds as defined by sender
     */
    duration: number;
    /**
     * Identifier for this file, which can be used to download or reuse the file
     */
    file_id: string;
    /**
     * *Optional*. File size
     */
    file_size?: number;
    /**
     * Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file.
     */
    file_unique_id: string;
    /**
     * *Optional*. MIME type of the file as defined by sender
     */
    mime_type?: string;
};

/**
 * Contains information about the current status of a webhook.
 */
export type WebhookInfo = {
    /**
     * *Optional*. A list of update types the bot is subscribed to. Defaults to all update types
     */
    allowed_updates?: Array<string>;
    /**
     * True, if a custom certificate was provided for webhook certificate checks
     */
    has_custom_certificate: boolean;
    /**
     * *Optional*. Currently used webhook IP address
     */
    ip_address?: string;
    /**
     * *Optional*. Unix time for the most recent error that happened when trying to deliver an update via webhook
     */
    last_error_date?: number;
    /**
     * *Optional*. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook
     */
    last_error_message?: string;
    /**
     * *Optional*. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery
     */
    max_connections?: number;
    /**
     * Number of updates awaiting delivery
     */
    pending_update_count: number;
    /**
     * Webhook URL, may be empty if webhook is not set up
     */
    url: string;
};

export type PostAddStickerToSetData = {
    body: {
        /**
         * One or more emoji corresponding to the sticker
         */
        emojis: string;
        mask_position?: MaskPosition;
        /**
         * Sticker set name
         */
        name: string;
        /**
         * **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        png_sticker?: InputFile | string;
        tgs_sticker?: InputFile;
        /**
         * User identifier of sticker set owner
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/addStickerToSet';
};

export type PostAddStickerToSetErrors = {
    default: _Error;
};

export type PostAddStickerToSetError = PostAddStickerToSetErrors[keyof PostAddStickerToSetErrors];

export type PostAddStickerToSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostAddStickerToSetResponse = PostAddStickerToSetResponses[keyof PostAddStickerToSetResponses];

export type PostAnswerCallbackQueryData = {
    body: {
        /**
         * The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
         */
        cache_time?: number;
        /**
         * Unique identifier for the query to be answered
         */
        callback_query_id: string;
        /**
         * If *true*, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to *false*.
         */
        show_alert?: boolean;
        /**
         * Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
         */
        text?: string;
        /**
         * URL that will be opened by the user's client. If you have created a [Game](https://core.telegram.org/bots/api/#game) and accepted the conditions via [@Botfather](https://t.me/botfather), specify the URL that opens your game — note that this will only work if the query comes from a [*callback\_game*](https://core.telegram.org/bots/api/#inlinekeyboardbutton) button.
         *
         * Otherwise, you may use links like `t.me/your_bot?start=XXXX` that open your bot with a parameter.
         */
        url?: string;
    };
    path?: never;
    query?: never;
    url: '/answerCallbackQuery';
};

export type PostAnswerCallbackQueryErrors = {
    default: _Error;
};

export type PostAnswerCallbackQueryError = PostAnswerCallbackQueryErrors[keyof PostAnswerCallbackQueryErrors];

export type PostAnswerCallbackQueryResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostAnswerCallbackQueryResponse = PostAnswerCallbackQueryResponses[keyof PostAnswerCallbackQueryResponses];

export type PostAnswerInlineQueryData = {
    body: {
        /**
         * The maximum amount of time in seconds that the result of the inline query may be cached on the server. Defaults to 300.
         */
        cache_time?: number;
        /**
         * Unique identifier for the answered query
         */
        inline_query_id: string;
        /**
         * Pass *True*, if results may be cached on the server side only for the user that sent the query. By default, results may be returned to any user who sends the same query
         */
        is_personal?: boolean;
        /**
         * Pass the offset that a client should send in the next query with the same text to receive more results. Pass an empty string if there are no more results or if you don't support pagination. Offset length can't exceed 64 bytes.
         */
        next_offset?: string;
        /**
         * A JSON-serialized array of results for the inline query
         */
        results: Array<InlineQueryResult>;
        /**
         * [Deep-linking](/bots#deep-linking) parameter for the /start message sent to the bot when user presses the switch button. 1-64 characters, only `A-Z`, `a-z`, `0-9`, `_` and `-` are allowed.
         *
         * *Example:* An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an oauth link. Once done, the bot can offer a [*switch\_inline*](https://core.telegram.org/bots/api/#inlinekeyboardmarkup) button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities.
         */
        switch_pm_parameter?: string;
        /**
         * If passed, clients will display a button with specified text that switches the user to a private chat with the bot and sends the bot a start message with the parameter *switch\_pm\_parameter*
         */
        switch_pm_text?: string;
    };
    path?: never;
    query?: never;
    url: '/answerInlineQuery';
};

export type PostAnswerInlineQueryErrors = {
    default: _Error;
};

export type PostAnswerInlineQueryError = PostAnswerInlineQueryErrors[keyof PostAnswerInlineQueryErrors];

export type PostAnswerInlineQueryResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostAnswerInlineQueryResponse = PostAnswerInlineQueryResponses[keyof PostAnswerInlineQueryResponses];

export type PostAnswerPreCheckoutQueryData = {
    body: {
        /**
         * Required if *ok* is *False*. Error message in human readable form that explains the reason for failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing black T-shirts while you were busy filling out your payment details. Please choose a different color or garment!"). Telegram will display this message to the user.
         */
        error_message?: string;
        /**
         * Specify *True* if everything is alright (goods are available, etc.) and the bot is ready to proceed with the order. Use *False* if there are any problems.
         */
        ok: boolean;
        /**
         * Unique identifier for the query to be answered
         */
        pre_checkout_query_id: string;
    };
    path?: never;
    query?: never;
    url: '/answerPreCheckoutQuery';
};

export type PostAnswerPreCheckoutQueryErrors = {
    default: _Error;
};

export type PostAnswerPreCheckoutQueryError = PostAnswerPreCheckoutQueryErrors[keyof PostAnswerPreCheckoutQueryErrors];

export type PostAnswerPreCheckoutQueryResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostAnswerPreCheckoutQueryResponse = PostAnswerPreCheckoutQueryResponses[keyof PostAnswerPreCheckoutQueryResponses];

export type PostAnswerShippingQueryData = {
    body: {
        /**
         * Required if *ok* is False. Error message in human readable form that explains why it is impossible to complete the order (e.g. "Sorry, delivery to your desired address is unavailable'). Telegram will display this message to the user.
         */
        error_message?: string;
        /**
         * Specify True if delivery to the specified address is possible and False if there are any problems (for example, if delivery to the specified address is not possible)
         */
        ok: boolean;
        /**
         * Required if *ok* is True. A JSON-serialized array of available shipping options.
         */
        shipping_options?: Array<ShippingOption>;
        /**
         * Unique identifier for the query to be answered
         */
        shipping_query_id: string;
    };
    path?: never;
    query?: never;
    url: '/answerShippingQuery';
};

export type PostAnswerShippingQueryErrors = {
    default: _Error;
};

export type PostAnswerShippingQueryError = PostAnswerShippingQueryErrors[keyof PostAnswerShippingQueryErrors];

export type PostAnswerShippingQueryResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostAnswerShippingQueryResponse = PostAnswerShippingQueryResponses[keyof PostAnswerShippingQueryResponses];

export type PostCloseData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/close';
};

export type PostCloseErrors = {
    default: _Error;
};

export type PostCloseError = PostCloseErrors[keyof PostCloseErrors];

export type PostCloseResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostCloseResponse = PostCloseResponses[keyof PostCloseResponses];

export type PostCopyMessageData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * New caption for media, 0-1024 characters after entities parsing. If not specified, the original caption is kept
         */
        caption?: string;
        /**
         * List of special entities that appear in the new caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
         */
        from_chat_id: number | string;
        /**
         * Message identifier in the chat specified in *from\_chat\_id*
         */
        message_id: number;
        /**
         * Mode for parsing entities in the new caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/copyMessage';
};

export type PostCopyMessageErrors = {
    default: _Error;
};

export type PostCopyMessageError = PostCopyMessageErrors[keyof PostCopyMessageErrors];

export type PostCopyMessageResponses = {
    200: {
        ok: boolean;
        result: MessageId;
    };
};

export type PostCopyMessageResponse = PostCopyMessageResponses[keyof PostCopyMessageResponses];

export type PostCreateNewStickerSetData = {
    body: {
        /**
         * Pass *True*, if a set of mask stickers should be created
         */
        contains_masks?: boolean;
        /**
         * One or more emoji corresponding to the sticker
         */
        emojis: string;
        mask_position?: MaskPosition;
        /**
         * Short name of sticker set, to be used in `t.me/addstickers/` URLs (e.g., *animals*). Can contain only english letters, digits and underscores. Must begin with a letter, can't contain consecutive underscores and must end in *“\_by\_<bot username>”*. *<bot\_username>* is case insensitive. 1-64 characters.
         */
        name: string;
        /**
         * **PNG** image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed 512px, and either width or height must be exactly 512px. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        png_sticker?: InputFile | string;
        tgs_sticker?: InputFile;
        /**
         * Sticker set title, 1-64 characters
         */
        title: string;
        /**
         * User identifier of created sticker set owner
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/createNewStickerSet';
};

export type PostCreateNewStickerSetErrors = {
    default: _Error;
};

export type PostCreateNewStickerSetError = PostCreateNewStickerSetErrors[keyof PostCreateNewStickerSetErrors];

export type PostCreateNewStickerSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostCreateNewStickerSetResponse = PostCreateNewStickerSetResponses[keyof PostCreateNewStickerSetResponses];

export type PostDeleteChatPhotoData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/deleteChatPhoto';
};

export type PostDeleteChatPhotoErrors = {
    default: _Error;
};

export type PostDeleteChatPhotoError = PostDeleteChatPhotoErrors[keyof PostDeleteChatPhotoErrors];

export type PostDeleteChatPhotoResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostDeleteChatPhotoResponse = PostDeleteChatPhotoResponses[keyof PostDeleteChatPhotoResponses];

export type PostDeleteChatStickerSetData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/deleteChatStickerSet';
};

export type PostDeleteChatStickerSetErrors = {
    default: _Error;
};

export type PostDeleteChatStickerSetError = PostDeleteChatStickerSetErrors[keyof PostDeleteChatStickerSetErrors];

export type PostDeleteChatStickerSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostDeleteChatStickerSetResponse = PostDeleteChatStickerSetResponses[keyof PostDeleteChatStickerSetResponses];

export type PostDeleteMessageData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Identifier of the message to delete
         */
        message_id: number;
    };
    path?: never;
    query?: never;
    url: '/deleteMessage';
};

export type PostDeleteMessageErrors = {
    default: _Error;
};

export type PostDeleteMessageError = PostDeleteMessageErrors[keyof PostDeleteMessageErrors];

export type PostDeleteMessageResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostDeleteMessageResponse = PostDeleteMessageResponses[keyof PostDeleteMessageResponses];

export type PostDeleteStickerFromSetData = {
    body: {
        /**
         * File identifier of the sticker
         */
        sticker: string;
    };
    path?: never;
    query?: never;
    url: '/deleteStickerFromSet';
};

export type PostDeleteStickerFromSetErrors = {
    default: _Error;
};

export type PostDeleteStickerFromSetError = PostDeleteStickerFromSetErrors[keyof PostDeleteStickerFromSetErrors];

export type PostDeleteStickerFromSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostDeleteStickerFromSetResponse = PostDeleteStickerFromSetResponses[keyof PostDeleteStickerFromSetResponses];

export type PostDeleteWebhookData = {
    body: {
        /**
         * Pass *True* to drop all pending updates
         */
        drop_pending_updates?: boolean;
    };
    path?: never;
    query?: never;
    url: '/deleteWebhook';
};

export type PostDeleteWebhookErrors = {
    default: _Error;
};

export type PostDeleteWebhookError = PostDeleteWebhookErrors[keyof PostDeleteWebhookErrors];

export type PostDeleteWebhookResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostDeleteWebhookResponse = PostDeleteWebhookResponses[keyof PostDeleteWebhookResponses];

export type PostEditMessageCaptionData = {
    body: {
        /**
         * New caption of the message, 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message to edit
         */
        message_id?: number;
        /**
         * Mode for parsing entities in the message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/editMessageCaption';
};

export type PostEditMessageCaptionErrors = {
    default: _Error;
};

export type PostEditMessageCaptionError = PostEditMessageCaptionErrors[keyof PostEditMessageCaptionErrors];

export type PostEditMessageCaptionResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostEditMessageCaptionResponse = PostEditMessageCaptionResponses[keyof PostEditMessageCaptionResponses];

export type PostEditMessageLiveLocationData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         */
        heading?: number;
        /**
         * The radius of uncertainty for the location, measured in meters; 0-1500
         */
        horizontal_accuracy?: number;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Latitude of new location
         */
        latitude: number;
        /**
         * Longitude of new location
         */
        longitude: number;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message to edit
         */
        message_id?: number;
        /**
         * Maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         */
        proximity_alert_radius?: number;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/editMessageLiveLocation';
};

export type PostEditMessageLiveLocationErrors = {
    default: _Error;
};

export type PostEditMessageLiveLocationError = PostEditMessageLiveLocationErrors[keyof PostEditMessageLiveLocationErrors];

export type PostEditMessageLiveLocationResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostEditMessageLiveLocationResponse = PostEditMessageLiveLocationResponses[keyof PostEditMessageLiveLocationResponses];

export type PostEditMessageMediaData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        media: InputMedia;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message to edit
         */
        message_id?: number;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/editMessageMedia';
};

export type PostEditMessageMediaErrors = {
    default: _Error;
};

export type PostEditMessageMediaError = PostEditMessageMediaErrors[keyof PostEditMessageMediaErrors];

export type PostEditMessageMediaResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostEditMessageMediaResponse = PostEditMessageMediaResponses[keyof PostEditMessageMediaResponses];

export type PostEditMessageReplyMarkupData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message to edit
         */
        message_id?: number;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/editMessageReplyMarkup';
};

export type PostEditMessageReplyMarkupErrors = {
    default: _Error;
};

export type PostEditMessageReplyMarkupError = PostEditMessageReplyMarkupErrors[keyof PostEditMessageReplyMarkupErrors];

export type PostEditMessageReplyMarkupResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostEditMessageReplyMarkupResponse = PostEditMessageReplyMarkupResponses[keyof PostEditMessageReplyMarkupResponses];

export type PostEditMessageTextData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Disables link previews for links in this message
         */
        disable_web_page_preview?: boolean;
        /**
         * List of special entities that appear in message text, which can be specified instead of *parse\_mode*
         */
        entities?: Array<MessageEntity>;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message to edit
         */
        message_id?: number;
        /**
         * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        reply_markup?: InlineKeyboardMarkup;
        /**
         * New text of the message, 1-4096 characters after entities parsing
         */
        text: string;
    };
    path?: never;
    query?: never;
    url: '/editMessageText';
};

export type PostEditMessageTextErrors = {
    default: _Error;
};

export type PostEditMessageTextError = PostEditMessageTextErrors[keyof PostEditMessageTextErrors];

export type PostEditMessageTextResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostEditMessageTextResponse = PostEditMessageTextResponses[keyof PostEditMessageTextResponses];

export type PostExportChatInviteLinkData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/exportChatInviteLink';
};

export type PostExportChatInviteLinkErrors = {
    default: _Error;
};

export type PostExportChatInviteLinkError = PostExportChatInviteLinkErrors[keyof PostExportChatInviteLinkErrors];

export type PostExportChatInviteLinkResponses = {
    200: {
        ok: boolean;
        result: string;
    };
};

export type PostExportChatInviteLinkResponse = PostExportChatInviteLinkResponses[keyof PostExportChatInviteLinkResponses];

export type PostForwardMessageData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Unique identifier for the chat where the original message was sent (or channel username in the format `@channelusername`)
         */
        from_chat_id: number | string;
        /**
         * Message identifier in the chat specified in *from\_chat\_id*
         */
        message_id: number;
    };
    path?: never;
    query?: never;
    url: '/forwardMessage';
};

export type PostForwardMessageErrors = {
    default: _Error;
};

export type PostForwardMessageError = PostForwardMessageErrors[keyof PostForwardMessageErrors];

export type PostForwardMessageResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostForwardMessageResponse = PostForwardMessageResponses[keyof PostForwardMessageResponses];

export type PostGetChatData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/getChat';
};

export type PostGetChatErrors = {
    default: _Error;
};

export type PostGetChatError = PostGetChatErrors[keyof PostGetChatErrors];

export type PostGetChatResponses = {
    200: {
        ok: boolean;
        result: Chat;
    };
};

export type PostGetChatResponse = PostGetChatResponses[keyof PostGetChatResponses];

export type PostGetChatAdministratorsData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/getChatAdministrators';
};

export type PostGetChatAdministratorsErrors = {
    default: _Error;
};

export type PostGetChatAdministratorsError = PostGetChatAdministratorsErrors[keyof PostGetChatAdministratorsErrors];

export type PostGetChatAdministratorsResponses = {
    200: {
        ok: boolean;
        result: Array<ChatMember>;
    };
};

export type PostGetChatAdministratorsResponse = PostGetChatAdministratorsResponses[keyof PostGetChatAdministratorsResponses];

export type PostGetChatMemberData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/getChatMember';
};

export type PostGetChatMemberErrors = {
    default: _Error;
};

export type PostGetChatMemberError = PostGetChatMemberErrors[keyof PostGetChatMemberErrors];

export type PostGetChatMemberResponses = {
    200: {
        ok: boolean;
        result: ChatMember;
    };
};

export type PostGetChatMemberResponse = PostGetChatMemberResponses[keyof PostGetChatMemberResponses];

export type PostGetChatMembersCountData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/getChatMembersCount';
};

export type PostGetChatMembersCountErrors = {
    default: _Error;
};

export type PostGetChatMembersCountError = PostGetChatMembersCountErrors[keyof PostGetChatMembersCountErrors];

export type PostGetChatMembersCountResponses = {
    200: {
        ok: boolean;
        result: number;
    };
};

export type PostGetChatMembersCountResponse = PostGetChatMembersCountResponses[keyof PostGetChatMembersCountResponses];

export type PostGetFileData = {
    body: {
        /**
         * File identifier to get info about
         */
        file_id: string;
    };
    path?: never;
    query?: never;
    url: '/getFile';
};

export type PostGetFileErrors = {
    default: _Error;
};

export type PostGetFileError = PostGetFileErrors[keyof PostGetFileErrors];

export type PostGetFileResponses = {
    200: {
        ok: boolean;
        result: File;
    };
};

export type PostGetFileResponse = PostGetFileResponses[keyof PostGetFileResponses];

export type PostGetGameHighScoresData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
         */
        chat_id?: number;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the sent message
         */
        message_id?: number;
        /**
         * Target user id
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/getGameHighScores';
};

export type PostGetGameHighScoresErrors = {
    default: _Error;
};

export type PostGetGameHighScoresError = PostGetGameHighScoresErrors[keyof PostGetGameHighScoresErrors];

export type PostGetGameHighScoresResponses = {
    200: {
        ok: boolean;
        result: Array<GameHighScore>;
    };
};

export type PostGetGameHighScoresResponse = PostGetGameHighScoresResponses[keyof PostGetGameHighScoresResponses];

export type PostGetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/getMe';
};

export type PostGetMeErrors = {
    default: _Error;
};

export type PostGetMeError = PostGetMeErrors[keyof PostGetMeErrors];

export type PostGetMeResponses = {
    200: {
        ok: boolean;
        result: User;
    };
};

export type PostGetMeResponse = PostGetMeResponses[keyof PostGetMeResponses];

export type PostGetMyCommandsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/getMyCommands';
};

export type PostGetMyCommandsErrors = {
    default: _Error;
};

export type PostGetMyCommandsError = PostGetMyCommandsErrors[keyof PostGetMyCommandsErrors];

export type PostGetMyCommandsResponses = {
    200: {
        ok: boolean;
        result: Array<BotCommand>;
    };
};

export type PostGetMyCommandsResponse = PostGetMyCommandsResponses[keyof PostGetMyCommandsResponses];

export type PostGetStickerSetData = {
    body: {
        /**
         * Name of the sticker set
         */
        name: string;
    };
    path?: never;
    query?: never;
    url: '/getStickerSet';
};

export type PostGetStickerSetErrors = {
    default: _Error;
};

export type PostGetStickerSetError = PostGetStickerSetErrors[keyof PostGetStickerSetErrors];

export type PostGetStickerSetResponses = {
    200: {
        ok: boolean;
        result: StickerSet;
    };
};

export type PostGetStickerSetResponse = PostGetStickerSetResponses[keyof PostGetStickerSetResponses];

export type PostGetUpdatesData = {
    body: {
        /**
         * A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
         *
         * Please note that this parameter doesn't affect updates created before the call to the getUpdates, so unwanted updates may be received for a short period of time.
         */
        allowed_updates?: Array<string>;
        /**
         * Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         */
        limit?: number;
        /**
         * Identifier of the first update to be returned. Must be greater by one than the highest among the identifiers of previously received updates. By default, updates starting with the earliest unconfirmed update are returned. An update is considered confirmed as soon as [getUpdates](https://core.telegram.org/bots/api/#getupdates) is called with an *offset* higher than its *update\_id*. The negative offset can be specified to retrieve updates starting from *-offset* update from the end of the updates queue. All previous updates will forgotten.
         */
        offset?: number;
        /**
         * Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be positive, short polling should be used for testing purposes only.
         */
        timeout?: number;
    };
    path?: never;
    query?: never;
    url: '/getUpdates';
};

export type PostGetUpdatesErrors = {
    default: _Error;
};

export type PostGetUpdatesError = PostGetUpdatesErrors[keyof PostGetUpdatesErrors];

export type PostGetUpdatesResponses = {
    200: {
        ok: boolean;
        result: Array<Update>;
    };
};

export type PostGetUpdatesResponse = PostGetUpdatesResponses[keyof PostGetUpdatesResponses];

export type PostGetUserProfilePhotosData = {
    body: {
        /**
         * Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to 100.
         */
        limit?: number;
        /**
         * Sequential number of the first photo to be returned. By default, all photos are returned.
         */
        offset?: number;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/getUserProfilePhotos';
};

export type PostGetUserProfilePhotosErrors = {
    default: _Error;
};

export type PostGetUserProfilePhotosError = PostGetUserProfilePhotosErrors[keyof PostGetUserProfilePhotosErrors];

export type PostGetUserProfilePhotosResponses = {
    200: {
        ok: boolean;
        result: UserProfilePhotos;
    };
};

export type PostGetUserProfilePhotosResponse = PostGetUserProfilePhotosResponses[keyof PostGetUserProfilePhotosResponses];

export type PostGetWebhookInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/getWebhookInfo';
};

export type PostGetWebhookInfoErrors = {
    default: _Error;
};

export type PostGetWebhookInfoError = PostGetWebhookInfoErrors[keyof PostGetWebhookInfoErrors];

export type PostGetWebhookInfoResponses = {
    200: {
        ok: boolean;
        result: WebhookInfo;
    };
};

export type PostGetWebhookInfoResponse = PostGetWebhookInfoResponses[keyof PostGetWebhookInfoResponses];

export type PostKickChatMemberData = {
    body: {
        /**
         * Unique identifier for the target group or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever
         */
        until_date?: number;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/kickChatMember';
};

export type PostKickChatMemberErrors = {
    default: _Error;
};

export type PostKickChatMemberError = PostKickChatMemberErrors[keyof PostKickChatMemberErrors];

export type PostKickChatMemberResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostKickChatMemberResponse = PostKickChatMemberResponses[keyof PostKickChatMemberResponses];

export type PostLeaveChatData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup or channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/leaveChat';
};

export type PostLeaveChatErrors = {
    default: _Error;
};

export type PostLeaveChatError = PostLeaveChatErrors[keyof PostLeaveChatErrors];

export type PostLeaveChatResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostLeaveChatResponse = PostLeaveChatResponses[keyof PostLeaveChatResponses];

export type PostLogOutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logOut';
};

export type PostLogOutErrors = {
    default: _Error;
};

export type PostLogOutError = PostLogOutErrors[keyof PostLogOutErrors];

export type PostLogOutResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostLogOutResponse = PostLogOutResponses[keyof PostLogOutResponses];

export type PostPinChatMessageData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Pass *True*, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels and private chats.
         */
        disable_notification?: boolean;
        /**
         * Identifier of a message to pin
         */
        message_id: number;
    };
    path?: never;
    query?: never;
    url: '/pinChatMessage';
};

export type PostPinChatMessageErrors = {
    default: _Error;
};

export type PostPinChatMessageError = PostPinChatMessageErrors[keyof PostPinChatMessageErrors];

export type PostPinChatMessageResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostPinChatMessageResponse = PostPinChatMessageResponses[keyof PostPinChatMessageResponses];

export type PostPromoteChatMemberData = {
    body: {
        /**
         * Pass True, if the administrator can change chat title, photo and other settings
         */
        can_change_info?: boolean;
        /**
         * Pass True, if the administrator can delete messages of other users
         */
        can_delete_messages?: boolean;
        /**
         * Pass True, if the administrator can edit messages of other users and can pin messages, channels only
         */
        can_edit_messages?: boolean;
        /**
         * Pass True, if the administrator can invite new users to the chat
         */
        can_invite_users?: boolean;
        /**
         * Pass True, if the administrator can pin messages, supergroups only
         */
        can_pin_messages?: boolean;
        /**
         * Pass True, if the administrator can create channel posts, channels only
         */
        can_post_messages?: boolean;
        /**
         * Pass True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)
         */
        can_promote_members?: boolean;
        /**
         * Pass True, if the administrator can restrict, ban or unban chat members
         */
        can_restrict_members?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Pass *True*, if the administrator's presence in the chat is hidden
         */
        is_anonymous?: boolean;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/promoteChatMember';
};

export type PostPromoteChatMemberErrors = {
    default: _Error;
};

export type PostPromoteChatMemberError = PostPromoteChatMemberErrors[keyof PostPromoteChatMemberErrors];

export type PostPromoteChatMemberResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostPromoteChatMemberResponse = PostPromoteChatMemberResponses[keyof PostPromoteChatMemberResponses];

export type PostRestrictChatMemberData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
         */
        chat_id: number | string;
        permissions: ChatPermissions;
        /**
         * Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever
         */
        until_date?: number;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/restrictChatMember';
};

export type PostRestrictChatMemberErrors = {
    default: _Error;
};

export type PostRestrictChatMemberError = PostRestrictChatMemberErrors[keyof PostRestrictChatMemberErrors];

export type PostRestrictChatMemberResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostRestrictChatMemberResponse = PostRestrictChatMemberResponses[keyof PostRestrictChatMemberResponses];

export type PostSendAnimationData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Animation to send. Pass a file\_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        animation: InputFile | string;
        /**
         * Animation caption (may also be used when resending animation by *file\_id*), 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Duration of sent animation in seconds
         */
        duration?: number;
        /**
         * Animation height
         */
        height?: number;
        /**
         * Mode for parsing entities in the animation caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        thumb?: InputFile | string;
        /**
         * Animation width
         */
        width?: number;
    };
    path?: never;
    query?: never;
    url: '/sendAnimation';
};

export type PostSendAnimationErrors = {
    default: _Error;
};

export type PostSendAnimationError = PostSendAnimationErrors[keyof PostSendAnimationErrors];

export type PostSendAnimationResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendAnimationResponse = PostSendAnimationResponses[keyof PostSendAnimationResponses];

export type PostSendAudioData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Audio file to send. Pass a file\_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        audio: InputFile | string;
        /**
         * Audio caption, 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Duration of the audio in seconds
         */
        duration?: number;
        /**
         * Mode for parsing entities in the audio caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Performer
         */
        performer?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        thumb?: InputFile | string;
        /**
         * Track name
         */
        title?: string;
    };
    path?: never;
    query?: never;
    url: '/sendAudio';
};

export type PostSendAudioErrors = {
    default: _Error;
};

export type PostSendAudioError = PostSendAudioErrors[keyof PostSendAudioErrors];

export type PostSendAudioResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendAudioResponse = PostSendAudioResponses[keyof PostSendAudioResponses];

export type PostSendChatActionData = {
    body: {
        /**
         * Type of action to broadcast. Choose one, depending on what the user is about to receive: *typing* for [text messages](https://core.telegram.org/bots/api/#sendmessage), *upload\_photo* for [photos](https://core.telegram.org/bots/api/#sendphoto), *record\_video* or *upload\_video* for [videos](https://core.telegram.org/bots/api/#sendvideo), *record\_voice* or *upload\_voice* for [voice notes](https://core.telegram.org/bots/api/#sendvoice), *upload\_document* for [general files](https://core.telegram.org/bots/api/#senddocument), *find\_location* for [location data](https://core.telegram.org/bots/api/#sendlocation), *record\_video\_note* or *upload\_video\_note* for [video notes](https://core.telegram.org/bots/api/#sendvideonote).
         */
        action: string;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/sendChatAction';
};

export type PostSendChatActionErrors = {
    default: _Error;
};

export type PostSendChatActionError = PostSendChatActionErrors[keyof PostSendChatActionErrors];

export type PostSendChatActionResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSendChatActionResponse = PostSendChatActionResponses[keyof PostSendChatActionResponses];

export type PostSendContactData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Contact's first name
         */
        first_name: string;
        /**
         * Contact's last name
         */
        last_name?: string;
        /**
         * Contact's phone number
         */
        phone_number: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Additional data about the contact in the form of a [vCard](https://en.wikipedia.org/wiki/VCard), 0-2048 bytes
         */
        vcard?: string;
    };
    path?: never;
    query?: never;
    url: '/sendContact';
};

export type PostSendContactErrors = {
    default: _Error;
};

export type PostSendContactError = PostSendContactErrors[keyof PostSendContactErrors];

export type PostSendContactResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendContactResponse = PostSendContactResponses[keyof PostSendContactResponses];

export type PostSendDiceData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Emoji on which the dice throw animation is based. Currently, must be one of “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”, “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />”, “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, or “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Dice can have values 1-6 for “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />” and “<img alt="🎯" src="//telegram.org/img/emoji/40/F09F8EAF.png" height="20" width="20" />”, values 1-5 for “<img alt="🏀" src="//telegram.org/img/emoji/40/F09F8F80.png" height="20" width="20" />” and “<img alt="⚽" src="//telegram.org/img/emoji/40/E29ABD.png" height="20" width="20" />”, and values 1-64 for “<img alt="🎰" src="//telegram.org/img/emoji/40/F09F8EB0.png" height="20" width="20" />”. Defaults to “<img alt="🎲" src="//telegram.org/img/emoji/40/F09F8EB2.png" height="20" width="20" />”
         */
        emoji?: '🎲' | '🎯' | '🏀' | '⚽' | '🎰';
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/sendDice';
};

export type PostSendDiceErrors = {
    default: _Error;
};

export type PostSendDiceError = PostSendDiceErrors[keyof PostSendDiceErrors];

export type PostSendDiceResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendDiceResponse = PostSendDiceResponses[keyof PostSendDiceResponses];

export type PostSendDocumentData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Document caption (may also be used when resending documents by *file\_id*), 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Disables automatic server-side content type detection for files uploaded using multipart/form-data
         */
        disable_content_type_detection?: boolean;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * File to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        document: InputFile | string;
        /**
         * Mode for parsing entities in the document caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        thumb?: InputFile | string;
    };
    path?: never;
    query?: never;
    url: '/sendDocument';
};

export type PostSendDocumentErrors = {
    default: _Error;
};

export type PostSendDocumentError = PostSendDocumentErrors[keyof PostSendDocumentErrors];

export type PostSendDocumentResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendDocumentResponse = PostSendDocumentResponses[keyof PostSendDocumentResponses];

export type PostSendGameData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat
         */
        chat_id: number;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Short name of the game, serves as the unique identifier for the game. Set up your games via [Botfather](https://t.me/botfather).
         */
        game_short_name: string;
        reply_markup?: InlineKeyboardMarkup;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/sendGame';
};

export type PostSendGameErrors = {
    default: _Error;
};

export type PostSendGameError = PostSendGameErrors[keyof PostSendGameErrors];

export type PostSendGameResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendGameResponse = PostSendGameResponses[keyof PostSendGameResponses];

export type PostSendInvoiceData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target private chat
         */
        chat_id: number;
        /**
         * Three-letter ISO 4217 currency code, see [more on currencies](/bots/payments#supported-currencies)
         */
        currency: string;
        /**
         * Product description, 1-255 characters
         */
        description: string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Pass *True*, if the final price depends on the shipping method
         */
        is_flexible?: boolean;
        /**
         * Pass *True*, if you require the user's email address to complete the order
         */
        need_email?: boolean;
        /**
         * Pass *True*, if you require the user's full name to complete the order
         */
        need_name?: boolean;
        /**
         * Pass *True*, if you require the user's phone number to complete the order
         */
        need_phone_number?: boolean;
        /**
         * Pass *True*, if you require the user's shipping address to complete the order
         */
        need_shipping_address?: boolean;
        /**
         * Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes.
         */
        payload: string;
        /**
         * Photo height
         */
        photo_height?: number;
        /**
         * Photo size
         */
        photo_size?: number;
        /**
         * URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. People like it better when they see what they are paying for.
         */
        photo_url?: string;
        /**
         * Photo width
         */
        photo_width?: number;
        /**
         * Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.)
         */
        prices: Array<LabeledPrice>;
        /**
         * A JSON-serialized data about the invoice, which will be shared with the payment provider. A detailed description of required fields should be provided by the payment provider.
         */
        provider_data?: string;
        /**
         * Payments provider token, obtained via [Botfather](https://t.me/botfather)
         */
        provider_token: string;
        reply_markup?: InlineKeyboardMarkup;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Pass *True*, if user's email address should be sent to provider
         */
        send_email_to_provider?: boolean;
        /**
         * Pass *True*, if user's phone number should be sent to provider
         */
        send_phone_number_to_provider?: boolean;
        /**
         * Unique deep-linking parameter that can be used to generate this invoice when used as a start parameter
         */
        start_parameter: string;
        /**
         * Product name, 1-32 characters
         */
        title: string;
    };
    path?: never;
    query?: never;
    url: '/sendInvoice';
};

export type PostSendInvoiceErrors = {
    default: _Error;
};

export type PostSendInvoiceError = PostSendInvoiceErrors[keyof PostSendInvoiceErrors];

export type PostSendInvoiceResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendInvoiceResponse = PostSendInvoiceResponses[keyof PostSendInvoiceResponses];

export type PostSendLocationData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
         */
        heading?: number;
        /**
         * The radius of uncertainty for the location, measured in meters; 0-1500
         */
        horizontal_accuracy?: number;
        /**
         * Latitude of the location
         */
        latitude: number;
        /**
         * Period in seconds for which the location will be updated (see [Live Locations](https://telegram.org/blog/live-locations), should be between 60 and 86400.
         */
        live_period?: number;
        /**
         * Longitude of the location
         */
        longitude: number;
        /**
         * For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified.
         */
        proximity_alert_radius?: number;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/sendLocation';
};

export type PostSendLocationErrors = {
    default: _Error;
};

export type PostSendLocationError = PostSendLocationErrors[keyof PostSendLocationErrors];

export type PostSendLocationResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendLocationResponse = PostSendLocationResponses[keyof PostSendLocationResponses];

export type PostSendMediaGroupData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends messages [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * A JSON-serialized array describing messages to be sent, must include 2-10 items
         */
        media: Array<InputMediaAudio | InputMediaDocument | InputMediaPhoto | InputMediaVideo>;
        /**
         * If the messages are a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/sendMediaGroup';
};

export type PostSendMediaGroupErrors = {
    default: _Error;
};

export type PostSendMediaGroupError = PostSendMediaGroupErrors[keyof PostSendMediaGroupErrors];

export type PostSendMediaGroupResponses = {
    200: {
        ok: boolean;
        result: Array<Message>;
    };
};

export type PostSendMediaGroupResponse = PostSendMediaGroupResponses[keyof PostSendMediaGroupResponses];

export type PostSendMessageData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Disables link previews for links in this message
         */
        disable_web_page_preview?: boolean;
        /**
         * List of special entities that appear in message text, which can be specified instead of *parse\_mode*
         */
        entities?: Array<MessageEntity>;
        /**
         * Mode for parsing entities in the message text. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Text of the message to be sent, 1-4096 characters after entities parsing
         */
        text: string;
    };
    path?: never;
    query?: never;
    url: '/sendMessage';
};

export type PostSendMessageErrors = {
    default: _Error;
};

export type PostSendMessageError = PostSendMessageErrors[keyof PostSendMessageErrors];

export type PostSendMessageResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendMessageResponse = PostSendMessageResponses[keyof PostSendMessageResponses];

export type PostSendPhotoData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Photo caption (may also be used when resending photos by *file\_id*), 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Mode for parsing entities in the photo caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Photo to send. Pass a file\_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The photo's width and height must not exceed 10000 in total. Width and height ratio must be at most 20. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        photo: InputFile | string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/sendPhoto';
};

export type PostSendPhotoErrors = {
    default: _Error;
};

export type PostSendPhotoError = PostSendPhotoErrors[keyof PostSendPhotoErrors];

export type PostSendPhotoResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendPhotoResponse = PostSendPhotoResponses[keyof PostSendPhotoResponses];

export type PostSendPollData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to *False*
         */
        allows_multiple_answers?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5 and no more than 600 seconds in the future. Can't be used together with *open\_period*.
         */
        close_date?: number;
        /**
         * 0-based identifier of the correct answer option, required for polls in quiz mode
         */
        correct_option_id?: number;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
         */
        explanation?: string;
        /**
         * List of special entities that appear in the poll explanation, which can be specified instead of *parse\_mode*
         */
        explanation_entities?: Array<MessageEntity>;
        /**
         * Mode for parsing entities in the explanation. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        explanation_parse_mode?: string;
        /**
         * True, if the poll needs to be anonymous, defaults to *True*
         */
        is_anonymous?: boolean;
        /**
         * Pass *True*, if the poll needs to be immediately closed. This can be useful for poll preview.
         */
        is_closed?: boolean;
        /**
         * Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together with *close\_date*.
         */
        open_period?: number;
        /**
         * A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
         */
        options: Array<string>;
        /**
         * Poll question, 1-300 characters
         */
        question: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Poll type, “quiz” or “regular”, defaults to “regular”
         */
        type?: string;
    };
    path?: never;
    query?: never;
    url: '/sendPoll';
};

export type PostSendPollErrors = {
    default: _Error;
};

export type PostSendPollError = PostSendPollErrors[keyof PostSendPollErrors];

export type PostSendPollResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendPollResponse = PostSendPollResponses[keyof PostSendPollResponses];

export type PostSendStickerData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Sticker to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        sticker: InputFile | string;
    };
    path?: never;
    query?: never;
    url: '/sendSticker';
};

export type PostSendStickerErrors = {
    default: _Error;
};

export type PostSendStickerError = PostSendStickerErrors[keyof PostSendStickerErrors];

export type PostSendStickerResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendStickerResponse = PostSendStickerResponses[keyof PostSendStickerResponses];

export type PostSendVenueData = {
    body: {
        /**
         * Address of the venue
         */
        address: string;
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Foursquare identifier of the venue
         */
        foursquare_id?: string;
        /**
         * Foursquare type of the venue, if known. (For example, “arts\_entertainment/default”, “arts\_entertainment/aquarium” or “food/icecream”.)
         */
        foursquare_type?: string;
        /**
         * Google Places identifier of the venue
         */
        google_place_id?: string;
        /**
         * Google Places type of the venue. (See [supported types](https://developers.google.com/places/web-service/supported_types).)
         */
        google_place_type?: string;
        /**
         * Latitude of the venue
         */
        latitude: number;
        /**
         * Longitude of the venue
         */
        longitude: number;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Name of the venue
         */
        title: string;
    };
    path?: never;
    query?: never;
    url: '/sendVenue';
};

export type PostSendVenueErrors = {
    default: _Error;
};

export type PostSendVenueError = PostSendVenueErrors[keyof PostSendVenueErrors];

export type PostSendVenueResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendVenueResponse = PostSendVenueResponses[keyof PostSendVenueResponses];

export type PostSendVideoData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Video caption (may also be used when resending videos by *file\_id*), 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Duration of sent video in seconds
         */
        duration?: number;
        /**
         * Video height
         */
        height?: number;
        /**
         * Mode for parsing entities in the video caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Pass *True*, if the uploaded video is suitable for streaming
         */
        supports_streaming?: boolean;
        /**
         * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        thumb?: InputFile | string;
        /**
         * Video to send. Pass a file\_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        video: InputFile | string;
        /**
         * Video width
         */
        width?: number;
    };
    path?: never;
    query?: never;
    url: '/sendVideo';
};

export type PostSendVideoErrors = {
    default: _Error;
};

export type PostSendVideoError = PostSendVideoErrors[keyof PostSendVideoErrors];

export type PostSendVideoResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendVideoResponse = PostSendVideoResponses[keyof PostSendVideoResponses];

export type PostSendVideoNoteData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Duration of sent video in seconds
         */
        duration?: number;
        /**
         * Video width and height, i.e. diameter of the video message
         */
        length?: number;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass “attach://<file\_attach\_name>” if the thumbnail was uploaded using multipart/form-data under <file\_attach\_name>. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        thumb?: InputFile | string;
        /**
         * Video note to send. Pass a file\_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Sending video notes by a URL is currently unsupported
         */
        video_note: InputFile | string;
    };
    path?: never;
    query?: never;
    url: '/sendVideoNote';
};

export type PostSendVideoNoteErrors = {
    default: _Error;
};

export type PostSendVideoNoteError = PostSendVideoNoteErrors[keyof PostSendVideoNoteErrors];

export type PostSendVideoNoteResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendVideoNoteResponse = PostSendVideoNoteResponses[keyof PostSendVideoNoteResponses];

export type PostSendVoiceData = {
    body: {
        /**
         * Pass *True*, if the message should be sent even if the specified replied-to message is not found
         */
        allow_sending_without_reply?: boolean;
        /**
         * Voice message caption, 0-1024 characters after entities parsing
         */
        caption?: string;
        /**
         * List of special entities that appear in the caption, which can be specified instead of *parse\_mode*
         */
        caption_entities?: Array<MessageEntity>;
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Sends the message [silently](https://telegram.org/blog/channels-2-0#silent-messages). Users will receive a notification with no sound.
         */
        disable_notification?: boolean;
        /**
         * Duration of the voice message in seconds
         */
        duration?: number;
        /**
         * Mode for parsing entities in the voice message caption. See [formatting options](https://core.telegram.org/bots/api/#formatting-options) for more details.
         */
        parse_mode?: string;
        /**
         * Additional interface options. A JSON-serialized object for an [inline keyboard](https://core.telegram.org/bots#inline-keyboards-and-on-the-fly-updating), [custom reply keyboard](https://core.telegram.org/bots#keyboards), instructions to remove reply keyboard or to force a reply from the user.
         */
        reply_markup?: InlineKeyboardMarkup | ReplyKeyboardMarkup | ReplyKeyboardRemove | ForceReply;
        /**
         * If the message is a reply, ID of the original message
         */
        reply_to_message_id?: number;
        /**
         * Audio file to send. Pass a file\_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files)
         */
        voice: InputFile | string;
    };
    path?: never;
    query?: never;
    url: '/sendVoice';
};

export type PostSendVoiceErrors = {
    default: _Error;
};

export type PostSendVoiceError = PostSendVoiceErrors[keyof PostSendVoiceErrors];

export type PostSendVoiceResponses = {
    200: {
        ok: boolean;
        result: Message;
    };
};

export type PostSendVoiceResponse = PostSendVoiceResponses[keyof PostSendVoiceResponses];

export type PostSetChatAdministratorCustomTitleData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
         */
        chat_id: number | string;
        /**
         * New custom title for the administrator; 0-16 characters, emoji are not allowed
         */
        custom_title: string;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/setChatAdministratorCustomTitle';
};

export type PostSetChatAdministratorCustomTitleErrors = {
    default: _Error;
};

export type PostSetChatAdministratorCustomTitleError = PostSetChatAdministratorCustomTitleErrors[keyof PostSetChatAdministratorCustomTitleErrors];

export type PostSetChatAdministratorCustomTitleResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatAdministratorCustomTitleResponse = PostSetChatAdministratorCustomTitleResponses[keyof PostSetChatAdministratorCustomTitleResponses];

export type PostSetChatDescriptionData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * New chat description, 0-255 characters
         */
        description?: string;
    };
    path?: never;
    query?: never;
    url: '/setChatDescription';
};

export type PostSetChatDescriptionErrors = {
    default: _Error;
};

export type PostSetChatDescriptionError = PostSetChatDescriptionErrors[keyof PostSetChatDescriptionErrors];

export type PostSetChatDescriptionResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatDescriptionResponse = PostSetChatDescriptionResponses[keyof PostSetChatDescriptionResponses];

export type PostSetChatPermissionsData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
         */
        chat_id: number | string;
        permissions: ChatPermissions;
    };
    path?: never;
    query?: never;
    url: '/setChatPermissions';
};

export type PostSetChatPermissionsErrors = {
    default: _Error;
};

export type PostSetChatPermissionsError = PostSetChatPermissionsErrors[keyof PostSetChatPermissionsErrors];

export type PostSetChatPermissionsResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatPermissionsResponse = PostSetChatPermissionsResponses[keyof PostSetChatPermissionsResponses];

export type PostSetChatPhotoData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        photo: InputFile;
    };
    path?: never;
    query?: never;
    url: '/setChatPhoto';
};

export type PostSetChatPhotoErrors = {
    default: _Error;
};

export type PostSetChatPhotoError = PostSetChatPhotoErrors[keyof PostSetChatPhotoErrors];

export type PostSetChatPhotoResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatPhotoResponse = PostSetChatPhotoResponses[keyof PostSetChatPhotoResponses];

export type PostSetChatStickerSetData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target supergroup (in the format `@supergroupusername`)
         */
        chat_id: number | string;
        /**
         * Name of the sticker set to be set as the group sticker set
         */
        sticker_set_name: string;
    };
    path?: never;
    query?: never;
    url: '/setChatStickerSet';
};

export type PostSetChatStickerSetErrors = {
    default: _Error;
};

export type PostSetChatStickerSetError = PostSetChatStickerSetErrors[keyof PostSetChatStickerSetErrors];

export type PostSetChatStickerSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatStickerSetResponse = PostSetChatStickerSetResponses[keyof PostSetChatStickerSetResponses];

export type PostSetChatTitleData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * New chat title, 1-255 characters
         */
        title: string;
    };
    path?: never;
    query?: never;
    url: '/setChatTitle';
};

export type PostSetChatTitleErrors = {
    default: _Error;
};

export type PostSetChatTitleError = PostSetChatTitleErrors[keyof PostSetChatTitleErrors];

export type PostSetChatTitleResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetChatTitleResponse = PostSetChatTitleResponses[keyof PostSetChatTitleResponses];

export type PostSetGameScoreData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat
         */
        chat_id?: number;
        /**
         * Pass True, if the game message should not be automatically edited to include the current scoreboard
         */
        disable_edit_message?: boolean;
        /**
         * Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or banning cheaters
         */
        force?: boolean;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the sent message
         */
        message_id?: number;
        /**
         * New score, must be non-negative
         */
        score: number;
        /**
         * User identifier
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/setGameScore';
};

export type PostSetGameScoreErrors = {
    default: _Error;
};

export type PostSetGameScoreError = PostSetGameScoreErrors[keyof PostSetGameScoreErrors];

export type PostSetGameScoreResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostSetGameScoreResponse = PostSetGameScoreResponses[keyof PostSetGameScoreResponses];

export type PostSetMyCommandsData = {
    body: {
        /**
         * A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100 commands can be specified.
         */
        commands: Array<BotCommand>;
    };
    path?: never;
    query?: never;
    url: '/setMyCommands';
};

export type PostSetMyCommandsErrors = {
    default: _Error;
};

export type PostSetMyCommandsError = PostSetMyCommandsErrors[keyof PostSetMyCommandsErrors];

export type PostSetMyCommandsResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetMyCommandsResponse = PostSetMyCommandsResponses[keyof PostSetMyCommandsResponses];

export type PostSetPassportDataErrorsData = {
    body: {
        /**
         * A JSON-serialized array describing the errors
         */
        errors: Array<PassportElementError>;
        /**
         * User identifier
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/setPassportDataErrors';
};

export type PostSetPassportDataErrorsErrors = {
    default: _Error;
};

export type PostSetPassportDataErrorsError = PostSetPassportDataErrorsErrors[keyof PostSetPassportDataErrorsErrors];

export type PostSetPassportDataErrorsResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetPassportDataErrorsResponse = PostSetPassportDataErrorsResponses[keyof PostSetPassportDataErrorsResponses];

export type PostSetStickerPositionInSetData = {
    body: {
        /**
         * New sticker position in the set, zero-based
         */
        position: number;
        /**
         * File identifier of the sticker
         */
        sticker: string;
    };
    path?: never;
    query?: never;
    url: '/setStickerPositionInSet';
};

export type PostSetStickerPositionInSetErrors = {
    default: _Error;
};

export type PostSetStickerPositionInSetError = PostSetStickerPositionInSetErrors[keyof PostSetStickerPositionInSetErrors];

export type PostSetStickerPositionInSetResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetStickerPositionInSetResponse = PostSetStickerPositionInSetResponses[keyof PostSetStickerPositionInSetResponses];

export type PostSetStickerSetThumbData = {
    body: {
        /**
         * Sticker set name
         */
        name: string;
        /**
         * A **PNG** image with the thumbnail, must be up to 128 kilobytes in size and have width and height exactly 100px, or a **TGS** animation with the thumbnail up to 32 kilobytes in size; see [](https://core.telegram.org/animated_stickers#technical-requirements)[https://core.telegram.org/animated\_stickers#technical-requirements](https://core.telegram.org/animated_stickers#technical-requirements) for animated sticker technical requirements. Pass a *file\_id* as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. [More info on Sending Files »](https://core.telegram.org/bots/api/#sending-files). Animated sticker set thumbnail can't be uploaded via HTTP URL.
         */
        thumb?: InputFile | string;
        /**
         * User identifier of the sticker set owner
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/setStickerSetThumb';
};

export type PostSetStickerSetThumbErrors = {
    default: _Error;
};

export type PostSetStickerSetThumbError = PostSetStickerSetThumbErrors[keyof PostSetStickerSetThumbErrors];

export type PostSetStickerSetThumbResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetStickerSetThumbResponse = PostSetStickerSetThumbResponses[keyof PostSetStickerSetThumbResponses];

export type PostSetWebhookData = {
    body: {
        /**
         * A JSON-serialized list of the update types you want your bot to receive. For example, specify [“message”, “edited\_channel\_post”, “callback\_query”] to only receive updates of these types. See [Update](https://core.telegram.org/bots/api/#update) for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.
         * Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.
         */
        allowed_updates?: Array<string>;
        certificate?: InputFile;
        /**
         * Pass *True* to drop all pending updates
         */
        drop_pending_updates?: boolean;
        /**
         * The fixed IP address which will be used to send webhook requests instead of the IP address resolved through DNS
         */
        ip_address?: string;
        /**
         * Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to *40*. Use lower values to limit the load on your bot's server, and higher values to increase your bot's throughput.
         */
        max_connections?: number;
        /**
         * HTTPS url to send updates to. Use an empty string to remove webhook integration
         */
        url: string;
    };
    path?: never;
    query?: never;
    url: '/setWebhook';
};

export type PostSetWebhookErrors = {
    default: _Error;
};

export type PostSetWebhookError = PostSetWebhookErrors[keyof PostSetWebhookErrors];

export type PostSetWebhookResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostSetWebhookResponse = PostSetWebhookResponses[keyof PostSetWebhookResponses];

export type PostStopMessageLiveLocationData = {
    body: {
        /**
         * Required if *inline\_message\_id* is not specified. Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id?: number | string;
        /**
         * Required if *chat\_id* and *message\_id* are not specified. Identifier of the inline message
         */
        inline_message_id?: string;
        /**
         * Required if *inline\_message\_id* is not specified. Identifier of the message with live location to stop
         */
        message_id?: number;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/stopMessageLiveLocation';
};

export type PostStopMessageLiveLocationErrors = {
    default: _Error;
};

export type PostStopMessageLiveLocationError = PostStopMessageLiveLocationErrors[keyof PostStopMessageLiveLocationErrors];

export type PostStopMessageLiveLocationResponses = {
    200: {
        ok: boolean;
        result: Message | boolean;
    };
};

export type PostStopMessageLiveLocationResponse = PostStopMessageLiveLocationResponses[keyof PostStopMessageLiveLocationResponses];

export type PostStopPollData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Identifier of the original message with the poll
         */
        message_id: number;
        reply_markup?: InlineKeyboardMarkup;
    };
    path?: never;
    query?: never;
    url: '/stopPoll';
};

export type PostStopPollErrors = {
    default: _Error;
};

export type PostStopPollError = PostStopPollErrors[keyof PostStopPollErrors];

export type PostStopPollResponses = {
    200: {
        ok: boolean;
        result: Poll;
    };
};

export type PostStopPollResponse = PostStopPollResponses[keyof PostStopPollResponses];

export type PostUnbanChatMemberData = {
    body: {
        /**
         * Unique identifier for the target group or username of the target supergroup or channel (in the format `@username`)
         */
        chat_id: number | string;
        /**
         * Do nothing if the user is not banned
         */
        only_if_banned?: boolean;
        /**
         * Unique identifier of the target user
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/unbanChatMember';
};

export type PostUnbanChatMemberErrors = {
    default: _Error;
};

export type PostUnbanChatMemberError = PostUnbanChatMemberErrors[keyof PostUnbanChatMemberErrors];

export type PostUnbanChatMemberResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostUnbanChatMemberResponse = PostUnbanChatMemberResponses[keyof PostUnbanChatMemberResponses];

export type PostUnpinAllChatMessagesData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
    };
    path?: never;
    query?: never;
    url: '/unpinAllChatMessages';
};

export type PostUnpinAllChatMessagesErrors = {
    default: _Error;
};

export type PostUnpinAllChatMessagesError = PostUnpinAllChatMessagesErrors[keyof PostUnpinAllChatMessagesErrors];

export type PostUnpinAllChatMessagesResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostUnpinAllChatMessagesResponse = PostUnpinAllChatMessagesResponses[keyof PostUnpinAllChatMessagesResponses];

export type PostUnpinChatMessageData = {
    body: {
        /**
         * Unique identifier for the target chat or username of the target channel (in the format `@channelusername`)
         */
        chat_id: number | string;
        /**
         * Identifier of a message to unpin. If not specified, the most recent pinned message (by sending date) will be unpinned.
         */
        message_id?: number;
    };
    path?: never;
    query?: never;
    url: '/unpinChatMessage';
};

export type PostUnpinChatMessageErrors = {
    default: _Error;
};

export type PostUnpinChatMessageError = PostUnpinChatMessageErrors[keyof PostUnpinChatMessageErrors];

export type PostUnpinChatMessageResponses = {
    200: {
        ok: boolean;
        result: boolean;
    };
};

export type PostUnpinChatMessageResponse = PostUnpinChatMessageResponses[keyof PostUnpinChatMessageResponses];

export type PostUploadStickerFileData = {
    body: {
        png_sticker: InputFile;
        /**
         * User identifier of sticker file owner
         */
        user_id: number;
    };
    path?: never;
    query?: never;
    url: '/uploadStickerFile';
};

export type PostUploadStickerFileErrors = {
    default: _Error;
};

export type PostUploadStickerFileError = PostUploadStickerFileErrors[keyof PostUploadStickerFileErrors];

export type PostUploadStickerFileResponses = {
    200: {
        ok: boolean;
        result: File;
    };
};

export type PostUploadStickerFileResponse = PostUploadStickerFileResponses[keyof PostUploadStickerFileResponses];