/**
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
 * 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
 * 3. –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä
 * 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä
 */

import { 
  createNamespaceRegistry, 
  createNamespace, 
  registerNamespace, 
  registerProcedure,
  executeProcedure,
  searchProcedures,
  getRegistryMetadata
} from "./namespace-registry.js";
import * as userManagement from "./examples/user-management.js";

/**
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
async function demonstrateNamespaceSystem() {
  console.log("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω tsdev\n");

  // 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
  const registry = createNamespaceRegistry();

  // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  console.log("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω:");

  const userManagementNamespace = createNamespace({
    name: "user-management",
    description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
    version: "1.0.0",
    visibility: "public",
    policies: ["withLogging", "withSpan", "withRetry"],
    metadata: {
      team: "backend",
      domain: "user-management",
      priority: "high",
    },
  });

  // 3. –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const analyticsNamespace = createNamespace({
    name: "user-management.analytics",
    description: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    version: "1.0.0",
    parent: "user-management",
    visibility: "workflow",
    policies: ["withLogging", "withSpan"],
    metadata: {
      team: "analytics",
      domain: "user-management",
      priority: "medium",
    },
  });

  // 4. –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notificationsNamespace = createNamespace({
    name: "user-management.notifications",
    description: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    version: "1.0.0",
    parent: "user-management",
    visibility: "workflow",
    policies: ["withLogging", "withSpan", "withRetry"],
    metadata: {
      team: "notifications",
      domain: "user-management",
      priority: "medium",
    },
  });

  // 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω
  registerNamespace(userManagementNamespace, registry);
  registerNamespace(analyticsNamespace, registry);
  registerNamespace(notificationsNamespace, registry);

  // 6. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –∏–º–µ–Ω
  console.log("\nüìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞—Ö –∏–º–µ–Ω:");

  const procedures = [
    userManagement.createUser,
    userManagement.getUser,
    userManagement.updateUser,
    userManagement.deleteUser,
    userManagement.sendWelcomeEmail,
    userManagement.trackUserEvent,
    userManagement.validateEmail,
    userManagement.hashPassword,
    userManagement.generateUserId,
    userManagement.sanitizeUserData,
  ];

  for (const procedure of procedures) {
    registerProcedure(procedure.namespace, procedure, registry);
  }

  // 7. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞
  console.log("\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä–∞:");
  const metadata = getRegistryMetadata(registry);
  console.log(JSON.stringify(metadata, null, 2));

  // 8. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω
  console.log("\nüå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω:");
  const hierarchy = registry.hierarchy;
  for (const [namespace, parents] of hierarchy) {
    const indent = "  ".repeat(parents.length);
    console.log(`${indent}üìÅ ${namespace}${parents.length > 0 ? ` (parent: ${parents[0]})` : ""}`);
  }

  // 9. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º –∏–º–µ–Ω
  console.log("\nüîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞–º –∏–º–µ–Ω:");

  const namespaces = ["user-management", "user-management.analytics", "user-management.notifications"];
  for (const namespace of namespaces) {
    const procedures = registry.namespaces.get(namespace)?.procedures;
    if (procedures) {
      console.log(`\nüìÅ ${namespace} (${procedures.size} –ø—Ä–æ—Ü–µ–¥—É—Ä):`);
      for (const [name, procedure] of procedures) {
        console.log(`  - ${name} (${procedure.visibility}) - ${procedure.contract.description}`);
      }
    }
  }

  // 10. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  console.log("\nüìÇ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:");

  const categories = ["api", "workflow", "validation", "computation", "utility", "transformation"];
  for (const category of categories) {
    const procedures = registry.byCategory.get(category as any);
    if (procedures && procedures.length > 0) {
      console.log(`\nüìÅ ${category.toUpperCase()} (${procedures.length} –ø—Ä–æ—Ü–µ–¥—É—Ä):`);
      procedures.forEach(proc => {
        console.log(`  - ${proc.fullName} (${proc.visibility}) - ${proc.contract.description}`);
      });
    }
  }

  // 11. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  console.log("\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:");

  const searchConfigs = [
    { namespace: "user-management" },
    { category: "api" as const },
    { visibility: "public" as const },
    { tags: ["users"] },
    { search: "email" },
    { includePrivate: true },
  ];

  for (const config of searchConfigs) {
    const results = searchProcedures(registry, config);
    console.log(`\nüîç –ö—Ä–∏—Ç–µ—Ä–∏–∏: ${JSON.stringify(config)}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${results.total} –ø—Ä–æ—Ü–µ–¥—É—Ä`);
    console.log(`   –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${results.namespaces.join(", ")}`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${results.categories.join(", ")}`);
    console.log(`   –¢–µ–≥–∏: ${results.tags.join(", ")}`);
    results.procedures.forEach(proc => {
      console.log(`   - ${proc.fullName} (${proc.category}, ${proc.visibility})`);
    });
  }

  // 12. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä
  console.log("\n‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä:");

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüì° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (user-management.createUser):");
    const createResult = await executeProcedure(registry, "user-management.createUser", {
      name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
      email: "alexey@example.com",
      password: "securepassword123",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(createResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É
    console.log("\nüîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É (user-management.sendWelcomeEmail):");
    const emailResult = await executeProcedure(registry, "user-management.sendWelcomeEmail", {
      userId: "user_123",
      email: "alexey@example.com",
      name: "–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(emailResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (user-management.trackUserEvent):");
    const trackResult = await executeProcedure(registry, "user-management.trackUserEvent", {
      userId: "user_123",
      event: "user.signup",
      properties: { source: "web", campaign: "winter2024" },
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(trackResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüîí –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (user-management.validateEmail):");
    const validationResult = await executeProcedure(registry, "user-management.validateEmail", {
      email: "test@example.com",
    });

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(validationResult, null, 2));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É
    console.log("\nüîê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (user-management.generateUserId):");
    const generateResult = await executeProcedure(registry, "user-management.generateUserId", {});

    console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", JSON.stringify(generateResult, null, 2));

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:", error);
  }

  // 13. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã
  console.log("\nüìã –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–µ—Å—Ç—Ä—ã:");

  console.log("\nüì° –ü—É–±–ª–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã (–¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤):");
  const publicProcedures = registry.publicProcedures;
  for (const [name, procedure] of publicProcedures) {
    console.log(`  - ${name} (${procedure.category}) - ${procedure.contract.description}`);
  }

  console.log("\nüîÑ –ü—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è –≤–æ—Ä–∫—Ñ–ª–æ—É:");
  const workflowProcedures = registry.workflowProcedures;
  for (const [name, procedure] of workflowProcedures) {
    console.log(`  - ${name} (${procedure.category}) - ${procedure.contract.description}`);
  }

  console.log("\nüîí –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:");
  const internalProcedures = registry.internalProcedures;
  for (const [name, procedure] of internalProcedures) {
    console.log(`  - ${name} (${procedure.category}) - ${procedure.contract.description}`);
  }

  console.log("\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:");
  const privateProcedures = registry.privateProcedures;
  for (const [name, procedure] of privateProcedures) {
    console.log(`  - ${name} (${procedure.category}) - ${procedure.contract.description}`);
  }

  // 14. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  console.log("\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:");

  for (const [name, procedure] of registry.procedures) {
    if (procedure.dependencies && procedure.dependencies.length > 0) {
      console.log(`\nüì¶ ${name}:`);
      console.log(`  –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${procedure.namespace}`);
      console.log(`  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${procedure.category}`);
      console.log(`  –í–∏–¥–∏–º–æ—Å—Ç—å: ${procedure.visibility}`);
      console.log(`  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${procedure.dependencies.join(", ")}`);
      console.log(`  –¢–µ–≥–∏: ${procedure.tags.join(", ")}`);
    }
  }

  console.log("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
if (import.meta.url === `file://${process.argv[1]}`) {
  demonstrateNamespaceSystem().catch(console.error);
}

export { demonstrateNamespaceSystem };