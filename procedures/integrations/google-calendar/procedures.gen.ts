// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/google-calendar/sdk.gen.js";
import * as schemas from "../../../generated/google-calendar/schemas.gen.js";
import { z } from "zod";


export const Google-calendarCalendarCalendarsInsertContract: Contract = {
  name: "google-calendar.calendar.calendars.insert",
  description: "Creates a secondary calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsInsert",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsInsertHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsInsert(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsInsertProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsInsertContract,
  handler: calendarCalendarsInsertHandler,
};


export const Google-calendarCalendarCalendarsDeleteContract: Contract = {
  name: "google-calendar.calendar.calendars.delete",
  description: "Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsDelete",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsDeleteProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsDeleteContract,
  handler: calendarCalendarsDeleteHandler,
};


export const Google-calendarCalendarCalendarsGetContract: Contract = {
  name: "google-calendar.calendar.calendars.get",
  description: "Returns metadata for a calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsGet",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsGetProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsGetContract,
  handler: calendarCalendarsGetHandler,
};


export const Google-calendarCalendarCalendarsPatchContract: Contract = {
  name: "google-calendar.calendar.calendars.patch",
  description: "Updates metadata for a calendar. This method supports patch semantics.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsPatch",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsPatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsPatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsPatchProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsPatchContract,
  handler: calendarCalendarsPatchHandler,
};


export const Google-calendarCalendarCalendarsUpdateContract: Contract = {
  name: "google-calendar.calendar.calendars.update",
  description: "Updates metadata for a calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsUpdate",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsUpdateProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsUpdateContract,
  handler: calendarCalendarsUpdateHandler,
};


export const Google-calendarCalendarAclListContract: Contract = {
  name: "google-calendar.calendar.acl.list",
  description: "Returns the rules in the access control list for the calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclList",
    tags: ["google-calendar"],
  },
};

const calendarAclListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclListProcedure: Procedure = {
  contract: Google-calendarCalendarAclListContract,
  handler: calendarAclListHandler,
};


export const Google-calendarCalendarAclInsertContract: Contract = {
  name: "google-calendar.calendar.acl.insert",
  description: "Creates an access control rule.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclInsert",
    tags: ["google-calendar"],
  },
};

const calendarAclInsertHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclInsert(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclInsertProcedure: Procedure = {
  contract: Google-calendarCalendarAclInsertContract,
  handler: calendarAclInsertHandler,
};


export const Google-calendarCalendarAclWatchContract: Contract = {
  name: "google-calendar.calendar.acl.watch",
  description: "Watch for changes to ACL resources.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "google-calendar",
    operation: "calendarAclWatch",
    tags: ["google-calendar"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const calendarAclWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclWatchProcedure: Procedure = {
  contract: Google-calendarCalendarAclWatchContract,
  handler: calendarAclWatchHandler,
};


export const Google-calendarCalendarAclDeleteContract: Contract = {
  name: "google-calendar.calendar.acl.delete",
  description: "Deletes an access control rule.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclDelete",
    tags: ["google-calendar"],
  },
};

const calendarAclDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclDeleteProcedure: Procedure = {
  contract: Google-calendarCalendarAclDeleteContract,
  handler: calendarAclDeleteHandler,
};


export const Google-calendarCalendarAclGetContract: Contract = {
  name: "google-calendar.calendar.acl.get",
  description: "Returns an access control rule.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclGet",
    tags: ["google-calendar"],
  },
};

const calendarAclGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclGetProcedure: Procedure = {
  contract: Google-calendarCalendarAclGetContract,
  handler: calendarAclGetHandler,
};


export const Google-calendarCalendarAclPatchContract: Contract = {
  name: "google-calendar.calendar.acl.patch",
  description: "Updates an access control rule. This method supports patch semantics.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclPatch",
    tags: ["google-calendar"],
  },
};

const calendarAclPatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclPatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclPatchProcedure: Procedure = {
  contract: Google-calendarCalendarAclPatchContract,
  handler: calendarAclPatchHandler,
};


export const Google-calendarCalendarAclUpdateContract: Contract = {
  name: "google-calendar.calendar.acl.update",
  description: "Updates an access control rule.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarAclUpdate",
    tags: ["google-calendar"],
  },
};

const calendarAclUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarAclUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarAclUpdateProcedure: Procedure = {
  contract: Google-calendarCalendarAclUpdateContract,
  handler: calendarAclUpdateHandler,
};


export const Google-calendarCalendarCalendarsClearContract: Contract = {
  name: "google-calendar.calendar.calendars.clear",
  description: "Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarsClear",
    tags: ["google-calendar"],
  },
};

const calendarCalendarsClearHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarsClear(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarsClearProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarsClearContract,
  handler: calendarCalendarsClearHandler,
};


export const Google-calendarCalendarEventsListContract: Contract = {
  name: "google-calendar.calendar.events.list",
  description: "Returns events on the specified calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsList",
    tags: ["google-calendar"],
  },
};

const calendarEventsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsListProcedure: Procedure = {
  contract: Google-calendarCalendarEventsListContract,
  handler: calendarEventsListHandler,
};


export const Google-calendarCalendarEventsInsertContract: Contract = {
  name: "google-calendar.calendar.events.insert",
  description: "Creates an event.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsInsert",
    tags: ["google-calendar"],
  },
};

const calendarEventsInsertHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsInsert(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsInsertProcedure: Procedure = {
  contract: Google-calendarCalendarEventsInsertContract,
  handler: calendarEventsInsertHandler,
};


export const Google-calendarCalendarEventsImportContract: Contract = {
  name: "google-calendar.calendar.events.import",
  description: "Imports an event. This operation is used to add a private copy of an existing event to a calendar.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsImport",
    tags: ["google-calendar"],
  },
};

const calendarEventsImportHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsImport(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsImportProcedure: Procedure = {
  contract: Google-calendarCalendarEventsImportContract,
  handler: calendarEventsImportHandler,
};


export const Google-calendarCalendarEventsQuickAddContract: Contract = {
  name: "google-calendar.calendar.events.quick.add",
  description: "Creates an event based on a simple text string.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsQuickAdd",
    tags: ["google-calendar"],
  },
};

const calendarEventsQuickAddHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsQuickAdd(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsQuickAddProcedure: Procedure = {
  contract: Google-calendarCalendarEventsQuickAddContract,
  handler: calendarEventsQuickAddHandler,
};


export const Google-calendarCalendarEventsWatchContract: Contract = {
  name: "google-calendar.calendar.events.watch",
  description: "Watch for changes to Events resources.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "google-calendar",
    operation: "calendarEventsWatch",
    tags: ["google-calendar"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const calendarEventsWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsWatchProcedure: Procedure = {
  contract: Google-calendarCalendarEventsWatchContract,
  handler: calendarEventsWatchHandler,
};


export const Google-calendarCalendarEventsDeleteContract: Contract = {
  name: "google-calendar.calendar.events.delete",
  description: "Deletes an event.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsDelete",
    tags: ["google-calendar"],
  },
};

const calendarEventsDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsDeleteProcedure: Procedure = {
  contract: Google-calendarCalendarEventsDeleteContract,
  handler: calendarEventsDeleteHandler,
};


export const Google-calendarCalendarEventsGetContract: Contract = {
  name: "google-calendar.calendar.events.get",
  description: "Returns an event based on its Google Calendar ID. To retrieve an event using its iCalendar ID, call the events.list method using the iCalUID parameter.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsGet",
    tags: ["google-calendar"],
  },
};

const calendarEventsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsGetProcedure: Procedure = {
  contract: Google-calendarCalendarEventsGetContract,
  handler: calendarEventsGetHandler,
};


export const Google-calendarCalendarEventsPatchContract: Contract = {
  name: "google-calendar.calendar.events.patch",
  description: "Updates an event. This method supports patch semantics.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsPatch",
    tags: ["google-calendar"],
  },
};

const calendarEventsPatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsPatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsPatchProcedure: Procedure = {
  contract: Google-calendarCalendarEventsPatchContract,
  handler: calendarEventsPatchHandler,
};


export const Google-calendarCalendarEventsUpdateContract: Contract = {
  name: "google-calendar.calendar.events.update",
  description: "Updates an event.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsUpdate",
    tags: ["google-calendar"],
  },
};

const calendarEventsUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsUpdateProcedure: Procedure = {
  contract: Google-calendarCalendarEventsUpdateContract,
  handler: calendarEventsUpdateHandler,
};


export const Google-calendarCalendarEventsInstancesContract: Contract = {
  name: "google-calendar.calendar.events.instances",
  description: "Returns instances of the specified recurring event.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsInstances",
    tags: ["google-calendar"],
  },
};

const calendarEventsInstancesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsInstances(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsInstancesProcedure: Procedure = {
  contract: Google-calendarCalendarEventsInstancesContract,
  handler: calendarEventsInstancesHandler,
};


export const Google-calendarCalendarEventsMoveContract: Contract = {
  name: "google-calendar.calendar.events.move",
  description: "Moves an event to another calendar, i.e. changes an event's organizer.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarEventsMove",
    tags: ["google-calendar"],
  },
};

const calendarEventsMoveHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarEventsMove(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarEventsMoveProcedure: Procedure = {
  contract: Google-calendarCalendarEventsMoveContract,
  handler: calendarEventsMoveHandler,
};


export const Google-calendarCalendarChannelsStopContract: Contract = {
  name: "google-calendar.calendar.channels.stop",
  description: "Stop watching resources through this channel",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarChannelsStop",
    tags: ["google-calendar"],
  },
};

const calendarChannelsStopHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarChannelsStop(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarChannelsStopProcedure: Procedure = {
  contract: Google-calendarCalendarChannelsStopContract,
  handler: calendarChannelsStopHandler,
};


export const Google-calendarCalendarColorsGetContract: Contract = {
  name: "google-calendar.calendar.colors.get",
  description: "Returns the color definitions for calendars and events.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarColorsGet",
    tags: ["google-calendar"],
  },
};

const calendarColorsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarColorsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarColorsGetProcedure: Procedure = {
  contract: Google-calendarCalendarColorsGetContract,
  handler: calendarColorsGetHandler,
};


export const Google-calendarCalendarFreebusyQueryContract: Contract = {
  name: "google-calendar.calendar.freebusy.query",
  description: "Returns free/busy information for a set of calendars.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarFreebusyQuery",
    tags: ["google-calendar"],
  },
};

const calendarFreebusyQueryHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarFreebusyQuery(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarFreebusyQueryProcedure: Procedure = {
  contract: Google-calendarCalendarFreebusyQueryContract,
  handler: calendarFreebusyQueryHandler,
};


export const Google-calendarCalendarCalendarListListContract: Contract = {
  name: "google-calendar.calendar.calendar.list.list",
  description: "Returns the calendars on the user's calendar list.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListList",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListListProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListListContract,
  handler: calendarCalendarListListHandler,
};


export const Google-calendarCalendarCalendarListInsertContract: Contract = {
  name: "google-calendar.calendar.calendar.list.insert",
  description: "Inserts an existing calendar into the user's calendar list.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListInsert",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListInsertHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListInsert(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListInsertProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListInsertContract,
  handler: calendarCalendarListInsertHandler,
};


export const Google-calendarCalendarCalendarListWatchContract: Contract = {
  name: "google-calendar.calendar.calendar.list.watch",
  description: "Watch for changes to CalendarList resources.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "google-calendar",
    operation: "calendarCalendarListWatch",
    tags: ["google-calendar"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const calendarCalendarListWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListWatchProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListWatchContract,
  handler: calendarCalendarListWatchHandler,
};


export const Google-calendarCalendarCalendarListDeleteContract: Contract = {
  name: "google-calendar.calendar.calendar.list.delete",
  description: "Removes a calendar from the user's calendar list.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListDelete",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListDeleteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListDelete(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListDeleteProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListDeleteContract,
  handler: calendarCalendarListDeleteHandler,
};


export const Google-calendarCalendarCalendarListGetContract: Contract = {
  name: "google-calendar.calendar.calendar.list.get",
  description: "Returns a calendar from the user's calendar list.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListGet",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListGetProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListGetContract,
  handler: calendarCalendarListGetHandler,
};


export const Google-calendarCalendarCalendarListPatchContract: Contract = {
  name: "google-calendar.calendar.calendar.list.patch",
  description: "Updates an existing calendar on the user's calendar list. This method supports patch semantics.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListPatch",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListPatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListPatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListPatchProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListPatchContract,
  handler: calendarCalendarListPatchHandler,
};


export const Google-calendarCalendarCalendarListUpdateContract: Contract = {
  name: "google-calendar.calendar.calendar.list.update",
  description: "Updates an existing calendar on the user's calendar list.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarCalendarListUpdate",
    tags: ["google-calendar"],
  },
};

const calendarCalendarListUpdateHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarCalendarListUpdate(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarCalendarListUpdateProcedure: Procedure = {
  contract: Google-calendarCalendarCalendarListUpdateContract,
  handler: calendarCalendarListUpdateHandler,
};


export const Google-calendarCalendarSettingsListContract: Contract = {
  name: "google-calendar.calendar.settings.list",
  description: "Returns all user settings for the authenticated user.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarSettingsList",
    tags: ["google-calendar"],
  },
};

const calendarSettingsListHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarSettingsList(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarSettingsListProcedure: Procedure = {
  contract: Google-calendarCalendarSettingsListContract,
  handler: calendarSettingsListHandler,
};


export const Google-calendarCalendarSettingsWatchContract: Contract = {
  name: "google-calendar.calendar.settings.watch",
  description: "Watch for changes to Settings resources.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "google-calendar",
    operation: "calendarSettingsWatch",
    tags: ["google-calendar"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const calendarSettingsWatchHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarSettingsWatch(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarSettingsWatchProcedure: Procedure = {
  contract: Google-calendarCalendarSettingsWatchContract,
  handler: calendarSettingsWatchHandler,
};


export const Google-calendarCalendarSettingsGetContract: Contract = {
  name: "google-calendar.calendar.settings.get",
  description: "Returns a single user setting.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "google-calendar",
    operation: "calendarSettingsGet",
    tags: ["google-calendar"],
  },
};

const calendarSettingsGetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "google-calendar");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.calendarSettingsGet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "google-calendar",
    metadataTokenKey: "google-calendarToken",
    envVar: "GOOGLE-CALENDAR_TOKEN",
  })
);

export const Google-calendarCalendarSettingsGetProcedure: Procedure = {
  contract: Google-calendarCalendarSettingsGetContract,
  handler: calendarSettingsGetHandler,
};


export const Google-calendarProcedures: Procedure[] = [
  Google-calendarCalendarCalendarsInsertProcedure,
  Google-calendarCalendarCalendarsDeleteProcedure,
  Google-calendarCalendarCalendarsGetProcedure,
  Google-calendarCalendarCalendarsPatchProcedure,
  Google-calendarCalendarCalendarsUpdateProcedure,
  Google-calendarCalendarAclListProcedure,
  Google-calendarCalendarAclInsertProcedure,
  Google-calendarCalendarAclWatchProcedure,
  Google-calendarCalendarAclDeleteProcedure,
  Google-calendarCalendarAclGetProcedure,
  Google-calendarCalendarAclPatchProcedure,
  Google-calendarCalendarAclUpdateProcedure,
  Google-calendarCalendarCalendarsClearProcedure,
  Google-calendarCalendarEventsListProcedure,
  Google-calendarCalendarEventsInsertProcedure,
  Google-calendarCalendarEventsImportProcedure,
  Google-calendarCalendarEventsQuickAddProcedure,
  Google-calendarCalendarEventsWatchProcedure,
  Google-calendarCalendarEventsDeleteProcedure,
  Google-calendarCalendarEventsGetProcedure,
  Google-calendarCalendarEventsPatchProcedure,
  Google-calendarCalendarEventsUpdateProcedure,
  Google-calendarCalendarEventsInstancesProcedure,
  Google-calendarCalendarEventsMoveProcedure,
  Google-calendarCalendarChannelsStopProcedure,
  Google-calendarCalendarColorsGetProcedure,
  Google-calendarCalendarFreebusyQueryProcedure,
  Google-calendarCalendarCalendarListListProcedure,
  Google-calendarCalendarCalendarListInsertProcedure,
  Google-calendarCalendarCalendarListWatchProcedure,
  Google-calendarCalendarCalendarListDeleteProcedure,
  Google-calendarCalendarCalendarListGetProcedure,
  Google-calendarCalendarCalendarListPatchProcedure,
  Google-calendarCalendarCalendarListUpdateProcedure,
  Google-calendarCalendarSettingsListProcedure,
  Google-calendarCalendarSettingsWatchProcedure,
  Google-calendarCalendarSettingsGetProcedure
];
