// This file is auto-generated by c4c integrate command
// Do not edit manually.

import { applyPolicies, type Procedure, type Contract } from "@c4c/core";
import { withOAuth, getOAuthHeaders } from "@c4c/policies";
import * as sdk from "../../../generated/telegram/sdk.gen.js";
import * as schemas from "../../../generated/telegram/schemas.gen.js";
import { z } from "zod";


export const TelegramPostAddStickerToSetContract: Contract = {
  name: "telegram.post.add.sticker.to.set",
  description: "Use this method to add a new sticker to a set created by the bot. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Animated stickers can be added to animated sticker sets and only to them. Animated sticker sets can have up to 50 stickers. Static sticker sets can have up to 120 stickers. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postAddStickerToSet",
    tags: ["telegram"],
  },
};

const postAddStickerToSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postAddStickerToSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostAddStickerToSetProcedure: Procedure = {
  contract: TelegramPostAddStickerToSetContract,
  handler: postAddStickerToSetHandler,
};


export const TelegramPostAnswerCallbackQueryContract: Contract = {
  name: "telegram.post.answer.callback.query",
  description: "Use this method to send answers to callback queries sent from [inline keyboards](/bots#inline-keyboards-and-on-the-fly-updating). The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postAnswerCallbackQuery",
    tags: ["telegram"],
  },
};

const postAnswerCallbackQueryHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postAnswerCallbackQuery(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostAnswerCallbackQueryProcedure: Procedure = {
  contract: TelegramPostAnswerCallbackQueryContract,
  handler: postAnswerCallbackQueryHandler,
};


export const TelegramPostAnswerInlineQueryContract: Contract = {
  name: "telegram.post.answer.inline.query",
  description: "Use this method to send answers to an inline query. On success, *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postAnswerInlineQuery",
    tags: ["telegram"],
  },
};

const postAnswerInlineQueryHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postAnswerInlineQuery(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostAnswerInlineQueryProcedure: Procedure = {
  contract: TelegramPostAnswerInlineQueryContract,
  handler: postAnswerInlineQueryHandler,
};


export const TelegramPostAnswerPreCheckoutQueryContract: Contract = {
  name: "telegram.post.answer.pre.checkout.query",
  description: "Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an [Update](https://core.telegram.org/bots/api/#update) with the field *pre\_checkout\_query*. Use this method to respond to such pre-checkout queries. On success, True is returned. **Note:** The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postAnswerPreCheckoutQuery",
    tags: ["telegram"],
  },
};

const postAnswerPreCheckoutQueryHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postAnswerPreCheckoutQuery(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostAnswerPreCheckoutQueryProcedure: Procedure = {
  contract: TelegramPostAnswerPreCheckoutQueryContract,
  handler: postAnswerPreCheckoutQueryHandler,
};


export const TelegramPostAnswerShippingQueryContract: Contract = {
  name: "telegram.post.answer.shipping.query",
  description: "If you sent an invoice requesting a shipping address and the parameter *is\_flexible* was specified, the Bot API will send an [Update](https://core.telegram.org/bots/api/#update) with a *shipping\_query* field to the bot. Use this method to reply to shipping queries. On success, True is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postAnswerShippingQuery",
    tags: ["telegram"],
  },
};

const postAnswerShippingQueryHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postAnswerShippingQuery(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostAnswerShippingQueryProcedure: Procedure = {
  contract: TelegramPostAnswerShippingQueryContract,
  handler: postAnswerShippingQueryHandler,
};


export const TelegramPostCloseContract: Contract = {
  name: "telegram.post.close",
  description: "Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns *True* on success. Requires no parameters.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postClose",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postCloseHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postClose(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostCloseProcedure: Procedure = {
  contract: TelegramPostCloseContract,
  handler: postCloseHandler,
};


export const TelegramPostCopyMessageContract: Contract = {
  name: "telegram.post.copy.message",
  description: "Use this method to copy messages of any kind. The method is analogous to the method [forwardMessages](https://core.telegram.org/bots/api/#forwardmessages), but the copied message doesn't have a link to the original message. Returns the [MessageId](https://core.telegram.org/bots/api/#messageid) of the sent message on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postCopyMessage",
    tags: ["telegram"],
  },
};

const postCopyMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postCopyMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostCopyMessageProcedure: Procedure = {
  contract: TelegramPostCopyMessageContract,
  handler: postCopyMessageHandler,
};


export const TelegramPostCreateNewStickerSetContract: Contract = {
  name: "telegram.post.create.new.sticker.set",
  description: "Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. You **must** use exactly one of the fields *png\_sticker* or *tgs\_sticker*. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postCreateNewStickerSet",
    tags: ["telegram"],
  },
};

const postCreateNewStickerSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postCreateNewStickerSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostCreateNewStickerSetProcedure: Procedure = {
  contract: TelegramPostCreateNewStickerSetContract,
  handler: postCreateNewStickerSetHandler,
};


export const TelegramPostDeleteChatPhotoContract: Contract = {
  name: "telegram.post.delete.chat.photo",
  description: "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postDeleteChatPhoto",
    tags: ["telegram"],
  },
};

const postDeleteChatPhotoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postDeleteChatPhoto(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostDeleteChatPhotoProcedure: Procedure = {
  contract: TelegramPostDeleteChatPhotoContract,
  handler: postDeleteChatPhotoHandler,
};


export const TelegramPostDeleteChatStickerSetContract: Contract = {
  name: "telegram.post.delete.chat.sticker.set",
  description: "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postDeleteChatStickerSet",
    tags: ["telegram"],
  },
};

const postDeleteChatStickerSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postDeleteChatStickerSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostDeleteChatStickerSetProcedure: Procedure = {
  contract: TelegramPostDeleteChatStickerSetContract,
  handler: postDeleteChatStickerSetHandler,
};


export const TelegramPostDeleteMessageContract: Contract = {
  name: "telegram.post.delete.message",
  description: "Use this method to delete a message, including service messages, with the following limitations:",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postDeleteMessage",
    tags: ["telegram"],
  },
};

const postDeleteMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postDeleteMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostDeleteMessageProcedure: Procedure = {
  contract: TelegramPostDeleteMessageContract,
  handler: postDeleteMessageHandler,
};


export const TelegramPostDeleteStickerFromSetContract: Contract = {
  name: "telegram.post.delete.sticker.from.set",
  description: "Use this method to delete a sticker from a set created by the bot. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postDeleteStickerFromSet",
    tags: ["telegram"],
  },
};

const postDeleteStickerFromSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postDeleteStickerFromSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostDeleteStickerFromSetProcedure: Procedure = {
  contract: TelegramPostDeleteStickerFromSetContract,
  handler: postDeleteStickerFromSetHandler,
};


export const TelegramPostDeleteWebhookContract: Contract = {
  name: "telegram.post.delete.webhook",
  description: "Use this method to remove webhook integration if you decide to switch back to [getUpdates](https://core.telegram.org/bots/api/#getupdates). Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postDeleteWebhook",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postDeleteWebhookHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postDeleteWebhook(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostDeleteWebhookProcedure: Procedure = {
  contract: TelegramPostDeleteWebhookContract,
  handler: postDeleteWebhookHandler,
};


export const TelegramPostEditMessageCaptionContract: Contract = {
  name: "telegram.post.edit.message.caption",
  description: "Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postEditMessageCaption",
    tags: ["telegram"],
  },
};

const postEditMessageCaptionHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postEditMessageCaption(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostEditMessageCaptionProcedure: Procedure = {
  contract: TelegramPostEditMessageCaptionContract,
  handler: postEditMessageCaptionHandler,
};


export const TelegramPostEditMessageLiveLocationContract: Contract = {
  name: "telegram.post.edit.message.live.location",
  description: "Use this method to edit live location messages. A location can be edited until its *live\_period* expires or editing is explicitly disabled by a call to [stopMessageLiveLocation](https://core.telegram.org/bots/api/#stopmessagelivelocation). On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postEditMessageLiveLocation",
    tags: ["telegram"],
  },
};

const postEditMessageLiveLocationHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postEditMessageLiveLocation(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostEditMessageLiveLocationProcedure: Procedure = {
  contract: TelegramPostEditMessageLiveLocationContract,
  handler: postEditMessageLiveLocationHandler,
};


export const TelegramPostEditMessageMediaContract: Contract = {
  name: "telegram.post.edit.message.media",
  description: "Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded. Use a previously uploaded file via its file\_id or specify a URL. On success, if the edited message was sent by the bot, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postEditMessageMedia",
    tags: ["telegram"],
  },
};

const postEditMessageMediaHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postEditMessageMedia(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostEditMessageMediaProcedure: Procedure = {
  contract: TelegramPostEditMessageMediaContract,
  handler: postEditMessageMediaHandler,
};


export const TelegramPostEditMessageReplyMarkupContract: Contract = {
  name: "telegram.post.edit.message.reply.markup",
  description: "Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postEditMessageReplyMarkup",
    tags: ["telegram"],
  },
};

const postEditMessageReplyMarkupHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postEditMessageReplyMarkup(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostEditMessageReplyMarkupProcedure: Procedure = {
  contract: TelegramPostEditMessageReplyMarkupContract,
  handler: postEditMessageReplyMarkupHandler,
};


export const TelegramPostEditMessageTextContract: Contract = {
  name: "telegram.post.edit.message.text",
  description: "Use this method to edit text and [game](https://core.telegram.org/bots/api/#games) messages. On success, if the edited message is not an inline message, the edited [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postEditMessageText",
    tags: ["telegram"],
  },
};

const postEditMessageTextHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postEditMessageText(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostEditMessageTextProcedure: Procedure = {
  contract: TelegramPostEditMessageTextContract,
  handler: postEditMessageTextHandler,
};


export const TelegramPostExportChatInviteLinkContract: Contract = {
  name: "telegram.post.export.chat.invite.link",
  description: "Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as *String* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postExportChatInviteLink",
    tags: ["telegram"],
  },
};

const postExportChatInviteLinkHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postExportChatInviteLink(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostExportChatInviteLinkProcedure: Procedure = {
  contract: TelegramPostExportChatInviteLinkContract,
  handler: postExportChatInviteLinkHandler,
};


export const TelegramPostForwardMessageContract: Contract = {
  name: "telegram.post.forward.message",
  description: "Use this method to forward messages of any kind. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postForwardMessage",
    tags: ["telegram"],
  },
};

const postForwardMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postForwardMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostForwardMessageProcedure: Procedure = {
  contract: TelegramPostForwardMessageContract,
  handler: postForwardMessageHandler,
};


export const TelegramPostGetChatContract: Contract = {
  name: "telegram.post.get.chat",
  description: "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a [Chat](https://core.telegram.org/bots/api/#chat) object on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetChat",
    tags: ["telegram"],
  },
};

const postGetChatHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetChat(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetChatProcedure: Procedure = {
  contract: TelegramPostGetChatContract,
  handler: postGetChatHandler,
};


export const TelegramPostGetChatAdministratorsContract: Contract = {
  name: "telegram.post.get.chat.administrators",
  description: "Use this method to get a list of administrators in a chat. On success, returns an Array of [ChatMember](https://core.telegram.org/bots/api/#chatmember) objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetChatAdministrators",
    tags: ["telegram"],
  },
};

const postGetChatAdministratorsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetChatAdministrators(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetChatAdministratorsProcedure: Procedure = {
  contract: TelegramPostGetChatAdministratorsContract,
  handler: postGetChatAdministratorsHandler,
};


export const TelegramPostGetChatMemberContract: Contract = {
  name: "telegram.post.get.chat.member",
  description: "Use this method to get information about a member of a chat. Returns a [ChatMember](https://core.telegram.org/bots/api/#chatmember) object on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetChatMember",
    tags: ["telegram"],
  },
};

const postGetChatMemberHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetChatMember(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetChatMemberProcedure: Procedure = {
  contract: TelegramPostGetChatMemberContract,
  handler: postGetChatMemberHandler,
};


export const TelegramPostGetChatMembersCountContract: Contract = {
  name: "telegram.post.get.chat.members.count",
  description: "Use this method to get the number of members in a chat. Returns *Int* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetChatMembersCount",
    tags: ["telegram"],
  },
};

const postGetChatMembersCountHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetChatMembersCount(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetChatMembersCountProcedure: Procedure = {
  contract: TelegramPostGetChatMembersCountContract,
  handler: postGetChatMembersCountHandler,
};


export const TelegramPostGetFileContract: Contract = {
  name: "telegram.post.get.file",
  description: "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a [File](https://core.telegram.org/bots/api/#file) object is returned. The file can then be downloaded via the link `https://api.telegram.org/file/bot<token>/<file_path>`, where `<file_path>` is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling [getFile](https://core.telegram.org/bots/api/#getfile) again.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetFile",
    tags: ["telegram"],
  },
};

const postGetFileHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetFile(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetFileProcedure: Procedure = {
  contract: TelegramPostGetFileContract,
  handler: postGetFileHandler,
};


export const TelegramPostGetGameHighScoresContract: Contract = {
  name: "telegram.post.get.game.high.scores",
  description: "Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. On success, returns an *Array* of [GameHighScore](https://core.telegram.org/bots/api/#gamehighscore) objects.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetGameHighScores",
    tags: ["telegram"],
  },
};

const postGetGameHighScoresHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetGameHighScores(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetGameHighScoresProcedure: Procedure = {
  contract: TelegramPostGetGameHighScoresContract,
  handler: postGetGameHighScoresHandler,
};


export const TelegramPostGetMeContract: Contract = {
  name: "telegram.post.get.me",
  description: "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a [User](https://core.telegram.org/bots/api/#user) object.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetMe",
    tags: ["telegram"],
  },
};

const postGetMeHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetMe(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetMeProcedure: Procedure = {
  contract: TelegramPostGetMeContract,
  handler: postGetMeHandler,
};


export const TelegramPostGetMyCommandsContract: Contract = {
  name: "telegram.post.get.my.commands",
  description: "Use this method to get the current list of the bot's commands. Requires no parameters. Returns Array of [BotCommand](https://core.telegram.org/bots/api/#botcommand) on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetMyCommands",
    tags: ["telegram"],
  },
};

const postGetMyCommandsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetMyCommands(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetMyCommandsProcedure: Procedure = {
  contract: TelegramPostGetMyCommandsContract,
  handler: postGetMyCommandsHandler,
};


export const TelegramPostGetStickerSetContract: Contract = {
  name: "telegram.post.get.sticker.set",
  description: "Use this method to get a sticker set. On success, a [StickerSet](https://core.telegram.org/bots/api/#stickerset) object is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetStickerSet",
    tags: ["telegram"],
  },
};

const postGetStickerSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetStickerSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetStickerSetProcedure: Procedure = {
  contract: TelegramPostGetStickerSetContract,
  handler: postGetStickerSetHandler,
};


export const TelegramPostGetUpdatesContract: Contract = {
  name: "telegram.post.get.updates",
  description: "Use this method to receive incoming updates using long polling ([wiki](https://en.wikipedia.org/wiki/Push_technology#Long_polling)). An Array of [Update](https://core.telegram.org/bots/api/#update) objects is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postGetUpdates",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postGetUpdatesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetUpdates(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetUpdatesProcedure: Procedure = {
  contract: TelegramPostGetUpdatesContract,
  handler: postGetUpdatesHandler,
};


export const TelegramPostGetUserProfilePhotosContract: Contract = {
  name: "telegram.post.get.user.profile.photos",
  description: "Use this method to get a list of profile pictures for a user. Returns a [UserProfilePhotos](https://core.telegram.org/bots/api/#userprofilephotos) object.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postGetUserProfilePhotos",
    tags: ["telegram"],
  },
};

const postGetUserProfilePhotosHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetUserProfilePhotos(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetUserProfilePhotosProcedure: Procedure = {
  contract: TelegramPostGetUserProfilePhotosContract,
  handler: postGetUserProfilePhotosHandler,
};


export const TelegramPostGetWebhookInfoContract: Contract = {
  name: "telegram.post.get.webhook.info",
  description: "Use this method to get current webhook status. Requires no parameters. On success, returns a [WebhookInfo](https://core.telegram.org/bots/api/#webhookinfo) object. If the bot is using [getUpdates](https://core.telegram.org/bots/api/#getupdates), will return an object with the *url* field empty.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postGetWebhookInfo",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postGetWebhookInfoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postGetWebhookInfo(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostGetWebhookInfoProcedure: Procedure = {
  contract: TelegramPostGetWebhookInfoContract,
  handler: postGetWebhookInfoHandler,
};


export const TelegramPostKickChatMemberContract: Contract = {
  name: "telegram.post.kick.chat.member",
  description: "Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless [unbanned](https://core.telegram.org/bots/api/#unbanchatmember) first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postKickChatMember",
    tags: ["telegram"],
  },
};

const postKickChatMemberHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postKickChatMember(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostKickChatMemberProcedure: Procedure = {
  contract: TelegramPostKickChatMemberContract,
  handler: postKickChatMemberHandler,
};


export const TelegramPostLeaveChatContract: Contract = {
  name: "telegram.post.leave.chat",
  description: "Use this method for your bot to leave a group, supergroup or channel. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postLeaveChat",
    tags: ["telegram"],
  },
};

const postLeaveChatHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postLeaveChat(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostLeaveChatProcedure: Procedure = {
  contract: TelegramPostLeaveChatContract,
  handler: postLeaveChatHandler,
};


export const TelegramPostLogOutContract: Contract = {
  name: "telegram.post.log.out",
  description: "Use this method to log out from the cloud Bot API server before launching the bot locally. You **must** log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns *True* on success. Requires no parameters.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postLogOut",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postLogOutHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postLogOut(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostLogOutProcedure: Procedure = {
  contract: TelegramPostLogOutContract,
  handler: postLogOutHandler,
};


export const TelegramPostPinChatMessageContract: Contract = {
  name: "telegram.post.pin.chat.message",
  description: "Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postPinChatMessage",
    tags: ["telegram"],
  },
};

const postPinChatMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postPinChatMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostPinChatMessageProcedure: Procedure = {
  contract: TelegramPostPinChatMessageContract,
  handler: postPinChatMessageHandler,
};


export const TelegramPostPromoteChatMemberContract: Contract = {
  name: "telegram.post.promote.chat.member",
  description: "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass *False* for all boolean parameters to demote a user. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postPromoteChatMember",
    tags: ["telegram"],
  },
};

const postPromoteChatMemberHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postPromoteChatMember(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostPromoteChatMemberProcedure: Procedure = {
  contract: TelegramPostPromoteChatMemberContract,
  handler: postPromoteChatMemberHandler,
};


export const TelegramPostRestrictChatMemberContract: Contract = {
  name: "telegram.post.restrict.chat.member",
  description: "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass *True* for all permissions to lift restrictions from a user. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postRestrictChatMember",
    tags: ["telegram"],
  },
};

const postRestrictChatMemberHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postRestrictChatMember(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostRestrictChatMemberProcedure: Procedure = {
  contract: TelegramPostRestrictChatMemberContract,
  handler: postRestrictChatMemberHandler,
};


export const TelegramPostSendAnimationContract: Contract = {
  name: "telegram.post.send.animation",
  description: "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendAnimation",
    tags: ["telegram"],
  },
};

const postSendAnimationHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendAnimation(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendAnimationProcedure: Procedure = {
  contract: TelegramPostSendAnimationContract,
  handler: postSendAnimationHandler,
};


export const TelegramPostSendAudioContract: Contract = {
  name: "telegram.post.send.audio",
  description: "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendAudio",
    tags: ["telegram"],
  },
};

const postSendAudioHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendAudio(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendAudioProcedure: Procedure = {
  contract: TelegramPostSendAudioContract,
  handler: postSendAudioHandler,
};


export const TelegramPostSendChatActionContract: Contract = {
  name: "telegram.post.send.chat.action",
  description: "Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendChatAction",
    tags: ["telegram"],
  },
};

const postSendChatActionHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendChatAction(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendChatActionProcedure: Procedure = {
  contract: TelegramPostSendChatActionContract,
  handler: postSendChatActionHandler,
};


export const TelegramPostSendContactContract: Contract = {
  name: "telegram.post.send.contact",
  description: "Use this method to send phone contacts. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendContact",
    tags: ["telegram"],
  },
};

const postSendContactHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendContact(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendContactProcedure: Procedure = {
  contract: TelegramPostSendContactContract,
  handler: postSendContactHandler,
};


export const TelegramPostSendDiceContract: Contract = {
  name: "telegram.post.send.dice",
  description: "Use this method to send an animated emoji that will display a random value. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendDice",
    tags: ["telegram"],
  },
};

const postSendDiceHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendDice(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendDiceProcedure: Procedure = {
  contract: TelegramPostSendDiceContract,
  handler: postSendDiceHandler,
};


export const TelegramPostSendDocumentContract: Contract = {
  name: "telegram.post.send.document",
  description: "Use this method to send general files. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendDocument",
    tags: ["telegram"],
  },
};

const postSendDocumentHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendDocument(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendDocumentProcedure: Procedure = {
  contract: TelegramPostSendDocumentContract,
  handler: postSendDocumentHandler,
};


export const TelegramPostSendGameContract: Contract = {
  name: "telegram.post.send.game",
  description: "Use this method to send a game. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendGame",
    tags: ["telegram"],
  },
};

const postSendGameHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendGame(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendGameProcedure: Procedure = {
  contract: TelegramPostSendGameContract,
  handler: postSendGameHandler,
};


export const TelegramPostSendInvoiceContract: Contract = {
  name: "telegram.post.send.invoice",
  description: "Use this method to send invoices. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendInvoice",
    tags: ["telegram"],
  },
};

const postSendInvoiceHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendInvoice(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendInvoiceProcedure: Procedure = {
  contract: TelegramPostSendInvoiceContract,
  handler: postSendInvoiceHandler,
};


export const TelegramPostSendLocationContract: Contract = {
  name: "telegram.post.send.location",
  description: "Use this method to send point on the map. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendLocation",
    tags: ["telegram"],
  },
};

const postSendLocationHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendLocation(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendLocationProcedure: Procedure = {
  contract: TelegramPostSendLocationContract,
  handler: postSendLocationHandler,
};


export const TelegramPostSendMediaGroupContract: Contract = {
  name: "telegram.post.send.media.group",
  description: "Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of [Messages](https://core.telegram.org/bots/api/#message) that were sent is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendMediaGroup",
    tags: ["telegram"],
  },
};

const postSendMediaGroupHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendMediaGroup(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendMediaGroupProcedure: Procedure = {
  contract: TelegramPostSendMediaGroupContract,
  handler: postSendMediaGroupHandler,
};


export const TelegramPostSendMessageContract: Contract = {
  name: "telegram.post.send.message",
  description: "Use this method to send text messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendMessage",
    tags: ["telegram"],
  },
};

const postSendMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendMessageProcedure: Procedure = {
  contract: TelegramPostSendMessageContract,
  handler: postSendMessageHandler,
};


export const TelegramPostSendPhotoContract: Contract = {
  name: "telegram.post.send.photo",
  description: "Use this method to send photos. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendPhoto",
    tags: ["telegram"],
  },
};

const postSendPhotoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendPhoto(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendPhotoProcedure: Procedure = {
  contract: TelegramPostSendPhotoContract,
  handler: postSendPhotoHandler,
};


export const TelegramPostSendPollContract: Contract = {
  name: "telegram.post.send.poll",
  description: "Use this method to send a native poll. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendPoll",
    tags: ["telegram"],
  },
};

const postSendPollHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendPoll(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendPollProcedure: Procedure = {
  contract: TelegramPostSendPollContract,
  handler: postSendPollHandler,
};


export const TelegramPostSendStickerContract: Contract = {
  name: "telegram.post.send.sticker",
  description: "Use this method to send static .WEBP or [animated](https://telegram.org/blog/animated-stickers) .TGS stickers. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendSticker",
    tags: ["telegram"],
  },
};

const postSendStickerHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendSticker(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendStickerProcedure: Procedure = {
  contract: TelegramPostSendStickerContract,
  handler: postSendStickerHandler,
};


export const TelegramPostSendVenueContract: Contract = {
  name: "telegram.post.send.venue",
  description: "Use this method to send information about a venue. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendVenue",
    tags: ["telegram"],
  },
};

const postSendVenueHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendVenue(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendVenueProcedure: Procedure = {
  contract: TelegramPostSendVenueContract,
  handler: postSendVenueHandler,
};


export const TelegramPostSendVideoContract: Contract = {
  name: "telegram.post.send.video",
  description: "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendVideo",
    tags: ["telegram"],
  },
};

const postSendVideoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendVideo(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendVideoProcedure: Procedure = {
  contract: TelegramPostSendVideoContract,
  handler: postSendVideoHandler,
};


export const TelegramPostSendVideoNoteContract: Contract = {
  name: "telegram.post.send.video.note",
  description: "As of [v.4.0](https://telegram.org/blog/video-messages-and-telescope), Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendVideoNote",
    tags: ["telegram"],
  },
};

const postSendVideoNoteHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendVideoNote(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendVideoNoteProcedure: Procedure = {
  contract: TelegramPostSendVideoNoteContract,
  handler: postSendVideoNoteHandler,
};


export const TelegramPostSendVoiceContract: Contract = {
  name: "telegram.post.send.voice",
  description: "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS (other formats may be sent as [Audio](https://core.telegram.org/bots/api/#audio) or [Document](https://core.telegram.org/bots/api/#document)). On success, the sent [Message](https://core.telegram.org/bots/api/#message) is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSendVoice",
    tags: ["telegram"],
  },
};

const postSendVoiceHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSendVoice(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSendVoiceProcedure: Procedure = {
  contract: TelegramPostSendVoiceContract,
  handler: postSendVoiceHandler,
};


export const TelegramPostSetChatAdministratorCustomTitleContract: Contract = {
  name: "telegram.post.set.chat.administrator.custom.title",
  description: "Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatAdministratorCustomTitle",
    tags: ["telegram"],
  },
};

const postSetChatAdministratorCustomTitleHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatAdministratorCustomTitle(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatAdministratorCustomTitleProcedure: Procedure = {
  contract: TelegramPostSetChatAdministratorCustomTitleContract,
  handler: postSetChatAdministratorCustomTitleHandler,
};


export const TelegramPostSetChatDescriptionContract: Contract = {
  name: "telegram.post.set.chat.description",
  description: "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatDescription",
    tags: ["telegram"],
  },
};

const postSetChatDescriptionHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatDescription(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatDescriptionProcedure: Procedure = {
  contract: TelegramPostSetChatDescriptionContract,
  handler: postSetChatDescriptionHandler,
};


export const TelegramPostSetChatPermissionsContract: Contract = {
  name: "telegram.post.set.chat.permissions",
  description: "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the *can\_restrict\_members* admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatPermissions",
    tags: ["telegram"],
  },
};

const postSetChatPermissionsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatPermissions(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatPermissionsProcedure: Procedure = {
  contract: TelegramPostSetChatPermissionsContract,
  handler: postSetChatPermissionsHandler,
};


export const TelegramPostSetChatPhotoContract: Contract = {
  name: "telegram.post.set.chat.photo",
  description: "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatPhoto",
    tags: ["telegram"],
  },
};

const postSetChatPhotoHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatPhoto(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatPhotoProcedure: Procedure = {
  contract: TelegramPostSetChatPhotoContract,
  handler: postSetChatPhotoHandler,
};


export const TelegramPostSetChatStickerSetContract: Contract = {
  name: "telegram.post.set.chat.sticker.set",
  description: "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field *can\_set\_sticker\_set* optionally returned in [getChat](https://core.telegram.org/bots/api/#getchat) requests to check if the bot can use this method. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatStickerSet",
    tags: ["telegram"],
  },
};

const postSetChatStickerSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatStickerSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatStickerSetProcedure: Procedure = {
  contract: TelegramPostSetChatStickerSetContract,
  handler: postSetChatStickerSetHandler,
};


export const TelegramPostSetChatTitleContract: Contract = {
  name: "telegram.post.set.chat.title",
  description: "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetChatTitle",
    tags: ["telegram"],
  },
};

const postSetChatTitleHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetChatTitle(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetChatTitleProcedure: Procedure = {
  contract: TelegramPostSetChatTitleContract,
  handler: postSetChatTitleHandler,
};


export const TelegramPostSetGameScoreContract: Contract = {
  name: "telegram.post.set.game.score",
  description: "Use this method to set the score of the specified user in a game. On success, if the message was sent by the bot, returns the edited [Message](https://core.telegram.org/bots/api/#message), otherwise returns *True*. Returns an error, if the new score is not greater than the user's current score in the chat and *force* is *False*.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetGameScore",
    tags: ["telegram"],
  },
};

const postSetGameScoreHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetGameScore(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetGameScoreProcedure: Procedure = {
  contract: TelegramPostSetGameScoreContract,
  handler: postSetGameScoreHandler,
};


export const TelegramPostSetMyCommandsContract: Contract = {
  name: "telegram.post.set.my.commands",
  description: "Use this method to change the list of the bot's commands. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetMyCommands",
    tags: ["telegram"],
  },
};

const postSetMyCommandsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetMyCommands(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetMyCommandsProcedure: Procedure = {
  contract: TelegramPostSetMyCommandsContract,
  handler: postSetMyCommandsHandler,
};


export const TelegramPostSetPassportDataErrorsContract: Contract = {
  name: "telegram.post.set.passport.data.errors",
  description: "Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetPassportDataErrors",
    tags: ["telegram"],
  },
};

const postSetPassportDataErrorsHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetPassportDataErrors(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetPassportDataErrorsProcedure: Procedure = {
  contract: TelegramPostSetPassportDataErrorsContract,
  handler: postSetPassportDataErrorsHandler,
};


export const TelegramPostSetStickerPositionInSetContract: Contract = {
  name: "telegram.post.set.sticker.position.in.set",
  description: "Use this method to move a sticker in a set created by the bot to a specific position. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetStickerPositionInSet",
    tags: ["telegram"],
  },
};

const postSetStickerPositionInSetHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetStickerPositionInSet(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetStickerPositionInSetProcedure: Procedure = {
  contract: TelegramPostSetStickerPositionInSetContract,
  handler: postSetStickerPositionInSetHandler,
};


export const TelegramPostSetStickerSetThumbContract: Contract = {
  name: "telegram.post.set.sticker.set.thumb",
  description: "Use this method to set the thumbnail of a sticker set. Animated thumbnails can be set for animated sticker sets only. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postSetStickerSetThumb",
    tags: ["telegram"],
  },
};

const postSetStickerSetThumbHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetStickerSetThumb(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetStickerSetThumbProcedure: Procedure = {
  contract: TelegramPostSetStickerSetThumbContract,
  handler: postSetStickerSetThumbHandler,
};


export const TelegramPostSetWebhookContract: Contract = {
  name: "telegram.post.set.webhook",
  description: "Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized [Update](https://core.telegram.org/bots/api/#update). In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node", "trigger"],
    provider: "telegram",
    operation: "postSetWebhook",
    tags: ["telegram"],
    type: "trigger" as const,
    trigger: {
      type: "subscription",
    },
  },
};

const postSetWebhookHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postSetWebhook(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostSetWebhookProcedure: Procedure = {
  contract: TelegramPostSetWebhookContract,
  handler: postSetWebhookHandler,
};


export const TelegramPostStopMessageLiveLocationContract: Contract = {
  name: "telegram.post.stop.message.live.location",
  description: "Use this method to stop updating a live location message before *live\_period* expires. On success, if the message was sent by the bot, the sent [Message](https://core.telegram.org/bots/api/#message) is returned, otherwise *True* is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postStopMessageLiveLocation",
    tags: ["telegram"],
  },
};

const postStopMessageLiveLocationHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postStopMessageLiveLocation(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostStopMessageLiveLocationProcedure: Procedure = {
  contract: TelegramPostStopMessageLiveLocationContract,
  handler: postStopMessageLiveLocationHandler,
};


export const TelegramPostStopPollContract: Contract = {
  name: "telegram.post.stop.poll",
  description: "Use this method to stop a poll which was sent by the bot. On success, the stopped [Poll](https://core.telegram.org/bots/api/#poll) with the final results is returned.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postStopPoll",
    tags: ["telegram"],
  },
};

const postStopPollHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postStopPoll(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostStopPollProcedure: Procedure = {
  contract: TelegramPostStopPollContract,
  handler: postStopPollHandler,
};


export const TelegramPostUnbanChatMemberContract: Contract = {
  name: "telegram.post.unban.chat.member",
  description: "Use this method to unban a previously kicked user in a supergroup or channel. The user will **not** return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be **removed** from the chat. If you don't want this, use the parameter *only\_if\_banned*. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postUnbanChatMember",
    tags: ["telegram"],
  },
};

const postUnbanChatMemberHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postUnbanChatMember(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostUnbanChatMemberProcedure: Procedure = {
  contract: TelegramPostUnbanChatMemberContract,
  handler: postUnbanChatMemberHandler,
};


export const TelegramPostUnpinAllChatMessagesContract: Contract = {
  name: "telegram.post.unpin.all.chat.messages",
  description: "Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postUnpinAllChatMessages",
    tags: ["telegram"],
  },
};

const postUnpinAllChatMessagesHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postUnpinAllChatMessages(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostUnpinAllChatMessagesProcedure: Procedure = {
  contract: TelegramPostUnpinAllChatMessagesContract,
  handler: postUnpinAllChatMessagesHandler,
};


export const TelegramPostUnpinChatMessageContract: Contract = {
  name: "telegram.post.unpin.chat.message",
  description: "Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can\_pin\_messages' admin right in a supergroup or 'can\_edit\_messages' admin right in a channel. Returns *True* on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postUnpinChatMessage",
    tags: ["telegram"],
  },
};

const postUnpinChatMessageHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postUnpinChatMessage(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostUnpinChatMessageProcedure: Procedure = {
  contract: TelegramPostUnpinChatMessageContract,
  handler: postUnpinChatMessageHandler,
};


export const TelegramPostUploadStickerFileContract: Contract = {
  name: "telegram.post.upload.sticker.file",
  description: "Use this method to upload a .PNG file with a sticker for later use in *createNewStickerSet* and *addStickerToSet* methods (can be used multiple times). Returns the uploaded [File](https://core.telegram.org/bots/api/#file) on success.",
  input: z.any(),
  output: z.any(),
  metadata: {
    exposure: "internal" as const,
    roles: ["workflow-node"],
    provider: "telegram",
    operation: "postUploadStickerFile",
    tags: ["telegram"],
  },
};

const postUploadStickerFileHandler = applyPolicies(
  async (input, context) => {
    const headers = getOAuthHeaders(context, "telegram");
    const request: Record<string, unknown> = { ...input };
    if (headers) {
      request.headers = {
        ...((request.headers as Record<string, string> | undefined) ?? {}),
        ...headers,
      };
    }
    const result = await sdk.postUploadStickerFile(request as any);
    if (result && typeof result === "object" && "data" in result) {
      return (result as { data: unknown }).data;
    }
    return result as unknown;
  },
  withOAuth({
    provider: "telegram",
    metadataTokenKey: "telegramToken",
    envVar: "TELEGRAM_TOKEN",
  })
);

export const TelegramPostUploadStickerFileProcedure: Procedure = {
  contract: TelegramPostUploadStickerFileContract,
  handler: postUploadStickerFileHandler,
};


export const TelegramProcedures: Procedure[] = [
  TelegramPostAddStickerToSetProcedure,
  TelegramPostAnswerCallbackQueryProcedure,
  TelegramPostAnswerInlineQueryProcedure,
  TelegramPostAnswerPreCheckoutQueryProcedure,
  TelegramPostAnswerShippingQueryProcedure,
  TelegramPostCloseProcedure,
  TelegramPostCopyMessageProcedure,
  TelegramPostCreateNewStickerSetProcedure,
  TelegramPostDeleteChatPhotoProcedure,
  TelegramPostDeleteChatStickerSetProcedure,
  TelegramPostDeleteMessageProcedure,
  TelegramPostDeleteStickerFromSetProcedure,
  TelegramPostDeleteWebhookProcedure,
  TelegramPostEditMessageCaptionProcedure,
  TelegramPostEditMessageLiveLocationProcedure,
  TelegramPostEditMessageMediaProcedure,
  TelegramPostEditMessageReplyMarkupProcedure,
  TelegramPostEditMessageTextProcedure,
  TelegramPostExportChatInviteLinkProcedure,
  TelegramPostForwardMessageProcedure,
  TelegramPostGetChatProcedure,
  TelegramPostGetChatAdministratorsProcedure,
  TelegramPostGetChatMemberProcedure,
  TelegramPostGetChatMembersCountProcedure,
  TelegramPostGetFileProcedure,
  TelegramPostGetGameHighScoresProcedure,
  TelegramPostGetMeProcedure,
  TelegramPostGetMyCommandsProcedure,
  TelegramPostGetStickerSetProcedure,
  TelegramPostGetUpdatesProcedure,
  TelegramPostGetUserProfilePhotosProcedure,
  TelegramPostGetWebhookInfoProcedure,
  TelegramPostKickChatMemberProcedure,
  TelegramPostLeaveChatProcedure,
  TelegramPostLogOutProcedure,
  TelegramPostPinChatMessageProcedure,
  TelegramPostPromoteChatMemberProcedure,
  TelegramPostRestrictChatMemberProcedure,
  TelegramPostSendAnimationProcedure,
  TelegramPostSendAudioProcedure,
  TelegramPostSendChatActionProcedure,
  TelegramPostSendContactProcedure,
  TelegramPostSendDiceProcedure,
  TelegramPostSendDocumentProcedure,
  TelegramPostSendGameProcedure,
  TelegramPostSendInvoiceProcedure,
  TelegramPostSendLocationProcedure,
  TelegramPostSendMediaGroupProcedure,
  TelegramPostSendMessageProcedure,
  TelegramPostSendPhotoProcedure,
  TelegramPostSendPollProcedure,
  TelegramPostSendStickerProcedure,
  TelegramPostSendVenueProcedure,
  TelegramPostSendVideoProcedure,
  TelegramPostSendVideoNoteProcedure,
  TelegramPostSendVoiceProcedure,
  TelegramPostSetChatAdministratorCustomTitleProcedure,
  TelegramPostSetChatDescriptionProcedure,
  TelegramPostSetChatPermissionsProcedure,
  TelegramPostSetChatPhotoProcedure,
  TelegramPostSetChatStickerSetProcedure,
  TelegramPostSetChatTitleProcedure,
  TelegramPostSetGameScoreProcedure,
  TelegramPostSetMyCommandsProcedure,
  TelegramPostSetPassportDataErrorsProcedure,
  TelegramPostSetStickerPositionInSetProcedure,
  TelegramPostSetStickerSetThumbProcedure,
  TelegramPostSetWebhookProcedure,
  TelegramPostStopMessageLiveLocationProcedure,
  TelegramPostStopPollProcedure,
  TelegramPostUnbanChatMemberProcedure,
  TelegramPostUnpinAllChatMessagesProcedure,
  TelegramPostUnpinChatMessageProcedure,
  TelegramPostUploadStickerFileProcedure
];
